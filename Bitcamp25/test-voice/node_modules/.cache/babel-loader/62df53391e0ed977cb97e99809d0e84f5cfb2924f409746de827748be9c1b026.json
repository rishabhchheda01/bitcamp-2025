{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmSparseSegmentReduction;\nexport function setup(backend) {\n  wasmSparseSegmentReduction = backend.wasm.cwrap('SparseSegmentReduction', null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // defaultValue\n  ]);\n}\nexport function sparseSegmentReduction(args, isMean) {\n  const {\n    backend,\n    inputs\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  const numIndices = indices.shape[0];\n  const segmentIdsBack = backend.readSync(segmentIds.dataId, numIndices - 1, numIndices)[0];\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIdsBack + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n  if (outputRows < 0) {\n    throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  const outputShape = data.shape.slice();\n  outputShape[0] = outputRows;\n  const dataId = backend.dataIdMap.get(data.dataId).id;\n  const indicesId = backend.dataIdMap.get(indices.dataId).id;\n  const segmentIdsId = backend.dataIdMap.get(segmentIds.dataId).id;\n  const output = backend.makeOutput(outputShape, data.dtype);\n  const outputId = backend.dataIdMap.get(output.dataId).id;\n  const exceptionValues = backend.makeOutput([4], 'int32');\n  const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;\n  wasmSparseSegmentReduction(dataId, CppDType[data.dtype], data.shape[0], indicesId, segmentIdsId, outputId, exceptionValuesId, isMean, 0);\n  const exceptionValuesArray = backend.readSync(exceptionValues.dataId);\n  let exceptionMessage;\n  switch (exceptionValuesArray[0]) {\n    case 0:\n      {\n        exceptionMessage = backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();\n        break;\n      }\n    case 1:\n      {\n        exceptionMessage = backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();\n        break;\n      }\n    case 2:\n      exceptionMessage = backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    case 3:\n      exceptionMessage = backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2], exceptionValuesArray[3]);\n      break;\n    default:\n      exceptionMessage = '';\n  }\n  backend.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend.disposeData(output.dataId);\n    throw new Error(exceptionMessage);\n  }\n  return output;\n}","map":{"version":3,"names":["backend_util","CppDType","wasmSparseSegmentReduction","setup","backend","wasm","cwrap","sparseSegmentReduction","args","isMean","inputs","data","indices","segmentIds","numIndices","shape","segmentIdsBack","readSync","dataId","lastSegmentIdPlusOne","outputRows","Error","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputShape","slice","dataIdMap","get","id","indicesId","segmentIdsId","output","makeOutput","dtype","outputId","exceptionValues","exceptionValuesId","exceptionValuesArray","exceptionMessage","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","disposeData"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\SparseSegmentReduction.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SparseSegmentMeanInputs, SparseSegmentSumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmSparseSegmentReduction: (\n    dataId: number, dtype: number, numRow: number, indicesId: number,\n    segmentIdsId: number, outputId: number, exceptionValuesId: number,\n    isMean: boolean, defaultValue: number) => void;\n\nexport function setup(backend: BackendWasm): void {\n  wasmSparseSegmentReduction =\n      backend.wasm.cwrap('SparseSegmentReduction', null /*void*/, [\n        'number',  // dataId\n        'number',  // dtype\n        'number',  // numRow\n        'number',  // indicesId\n        'number',  // segmentIdsId\n        'number',  // outputId\n        'number',  // exceptionValuesId,\n        'number',  // isMean\n        'number',  // defaultValue\n      ]);\n}\n\nexport function sparseSegmentReduction(\n    args: {\n      backend: BackendWasm,\n      inputs: SparseSegmentSumInputs|SparseSegmentMeanInputs,\n    },\n    isMean: boolean): TensorInfo {\n  const {backend, inputs} = args;\n  const {data, indices, segmentIds} = inputs;\n\n  const numIndices = indices.shape[0];\n  const segmentIdsBack =\n      (backend.readSync(segmentIds.dataId, numIndices - 1, numIndices) as\n       Int32Array)[0];\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIdsBack + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw (new Error(\n        backend_util\n            .getSparseSegmentReductionNegativeSegmentIdsErrorMessage()));\n  }\n\n  const outputShape = data.shape.slice();\n  outputShape[0] = outputRows;\n\n  const dataId = backend.dataIdMap.get(data.dataId).id;\n  const indicesId = backend.dataIdMap.get(indices.dataId).id;\n  const segmentIdsId = backend.dataIdMap.get(segmentIds.dataId).id;\n\n  const output = backend.makeOutput(outputShape, data.dtype);\n  const outputId = backend.dataIdMap.get(output.dataId).id;\n\n  const exceptionValues = backend.makeOutput([4], 'int32');\n  const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;\n\n  wasmSparseSegmentReduction(\n      dataId, CppDType[data.dtype], data.shape[0], indicesId, segmentIdsId,\n      outputId, exceptionValuesId, isMean, 0);\n\n  const exceptionValuesArray =\n      backend.readSync(exceptionValues.dataId) as Int32Array;\n\n  let exceptionMessage: string;\n  switch (exceptionValuesArray[0]) {\n    case 0: {\n      exceptionMessage =\n          backend_util\n              .getSparseSegmentReductionNegativeSegmentIdsErrorMessage();\n      break;\n    }\n    case 1: {\n      exceptionMessage =\n          backend_util\n              .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();\n      break;\n    }\n    case 2:\n      exceptionMessage =\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    case 3:\n      exceptionMessage =\n          backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n              exceptionValuesArray[1], exceptionValuesArray[2],\n              exceptionValuesArray[3]);\n      break;\n    default:\n      exceptionMessage = '';\n  }\n\n  backend.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend.disposeData(output.dataId);\n    throw new Error(exceptionMessage);\n  }\n\n  return output;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}