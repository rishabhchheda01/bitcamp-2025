{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SplitV, util } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    numOrSizeSplits,\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const xSliceSize = [...size];\n    xSliceSize[$axis] = s;\n    const xSlice = slice({\n      inputs: {\n        x\n      },\n      attrs: {\n        begin,\n        size: xSliceSize\n      },\n      backend\n    });\n    begin[$axis] += s;\n    return xSlice;\n  });\n}\nexport const splitVConfig = {\n  kernelName: SplitV,\n  backendName: 'wasm',\n  kernelFunc: splitV\n};","map":{"version":3,"names":["SplitV","util","backend_util","slice","splitV","args","inputs","attrs","backend","x","numOrSizeSplits","axis","$axis","parseAxisParam","shape","splitSizes","prepareSplitSize","begin","Array","length","fill","size","map","s","xSliceSize","xSlice","splitVConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\SplitV.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, util} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, attrs: SplitVAttrs, backend: BackendWasm}) {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const xSliceSize = [...size];\n    xSliceSize[$axis] = s;\n    const xSlice =\n        slice({inputs: {x}, attrs: {begin, size: xSliceSize}, backend});\n    begin[$axis] += s;\n    return xSlice;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'wasm',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAM,EAA6BC,IAAI,QAAO,uBAAuB;AACvG,SAAQC,YAAY,QAAO,uBAAuB;AAIlD,SAAQC,KAAK,QAAO,SAAS;AAE7B,OAAM,SAAUC,MAAMA,CAClBC,IAAsE;EACxE,MAAM;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,eAAe;IAAEC;EAAI,CAAC,GAAGJ,KAAK;EAErC,MAAMK,KAAK,GAAGX,IAAI,CAACY,cAAc,CAACF,IAAI,EAAEF,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;EAEnD,MAAMC,UAAU,GAAGb,YAAY,CAACc,gBAAgB,CAACP,CAAC,EAAEC,eAAe,EAAEE,KAAK,CAAC;EAC3E,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAACT,CAAC,CAACK,KAAK,CAACK,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAC/C,MAAMC,IAAI,GAAGZ,CAAC,CAACK,KAAK,CAACX,KAAK,EAAE;EAC5B,OAAOY,UAAU,CAACO,GAAG,CAACC,CAAC,IAAG;IACxB,MAAMC,UAAU,GAAG,CAAC,GAAGH,IAAI,CAAC;IAC5BG,UAAU,CAACZ,KAAK,CAAC,GAAGW,CAAC;IACrB,MAAME,MAAM,GACRtB,KAAK,CAAC;MAACG,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF,KAAK,EAAE;QAACU,KAAK;QAAEI,IAAI,EAAEG;MAAU,CAAC;MAAEhB;IAAO,CAAC,CAAC;IACnES,KAAK,CAACL,KAAK,CAAC,IAAIW,CAAC;IACjB,OAAOE,MAAM;EACf,CAAC,CAAC;AACJ;AAEA,OAAO,MAAMC,YAAY,GAAiB;EACxCC,UAAU,EAAE3B,MAAM;EAClB4B,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAEzB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}