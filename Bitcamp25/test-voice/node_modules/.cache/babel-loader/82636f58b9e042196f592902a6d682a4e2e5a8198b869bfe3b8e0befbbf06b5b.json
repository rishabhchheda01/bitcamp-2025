{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nimport { parseResultStruct } from './NonMaxSuppression_util';\nlet wasmFunc;\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(NonMaxSuppressionV3, 'number',\n  // Result*\n  ['number', 'number', 'number', 'number', 'number' // scoreThreshold\n  ]);\n}\nfunction kernelFunc(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    iouThreshold,\n    maxOutputSize,\n    scoreThreshold\n  } = attrs;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend.dataIdMap.get(scores.dataId).id;\n  const resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold);\n  const {\n    pSelectedIndices,\n    selectedSize,\n    pSelectedScores,\n    pValidOutputs\n  } = parseResultStruct(backend, resOffset);\n  // Since we are not using scores for V3, we have to delete it from the heap.\n  backend.wasm._free(pSelectedScores);\n  backend.wasm._free(pValidOutputs);\n  const selectedIndicesTensor = backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n  return selectedIndicesTensor;\n}\nexport const nonMaxSuppressionV3Config = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: kernelFunc\n};","map":{"version":3,"names":["NonMaxSuppressionV3","parseResultStruct","wasmFunc","setup","backend","wasm","cwrap","kernelFunc","args","inputs","attrs","iouThreshold","maxOutputSize","scoreThreshold","boxes","scores","boxesId","dataIdMap","get","dataId","id","scoresId","resOffset","pSelectedIndices","selectedSize","pSelectedScores","pValidOutputs","_free","selectedIndicesTensor","makeOutput","nonMaxSuppressionV3Config","kernelName","backendName","setupFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\NonMaxSuppressionV3.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {parseResultStruct} from './NonMaxSuppression_util';\n\nlet wasmFunc: (\n    boxesId: number, scoresId: number, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number) => number;\n\nfunction setup(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(\n      NonMaxSuppressionV3,\n      'number',  // Result*\n      [\n        'number',  // boxesId\n        'number',  // scoresId\n        'number',  // maxOutputSize\n        'number',  // iouThreshold\n        'number',  // scoreThreshold\n      ]);\n}\n\nfunction kernelFunc(args: {\n  backend: BackendWasm,\n  inputs: NonMaxSuppressionV3Inputs,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {iouThreshold, maxOutputSize, scoreThreshold} = attrs;\n  const {boxes, scores} = inputs;\n\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend.dataIdMap.get(scores.dataId).id;\n\n  const resOffset =\n      wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold);\n\n  const {pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs} =\n      parseResultStruct(backend, resOffset);\n\n  // Since we are not using scores for V3, we have to delete it from the heap.\n  backend.wasm._free(pSelectedScores);\n  backend.wasm._free(pValidOutputs);\n\n  const selectedIndicesTensor =\n      backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n\n  return selectedIndicesTensor;\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: kernelFunc as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,mBAAmB,QAAwE,uBAAuB;AAIpJ,SAAQC,iBAAiB,QAAO,0BAA0B;AAE1D,IAAIC,QAEuD;AAE3D,SAASC,KAAKA,CAACC,OAAoB;EACjCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CACzBN,mBAAmB,EACnB,QAAQ;EAAG;EACX,CACE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACR;AAEA,SAASO,UAAUA,CAACC,IAInB;EACC,MAAM;IAACJ,OAAO;IAAEK,MAAM;IAAEC;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,YAAY;IAAEC,aAAa;IAAEC;EAAc,CAAC,GAAGH,KAAK;EAC3D,MAAM;IAACI,KAAK;IAAEC;EAAM,CAAC,GAAGN,MAAM;EAE9B,MAAMO,OAAO,GAAGZ,OAAO,CAACa,SAAS,CAACC,GAAG,CAACJ,KAAK,CAACK,MAAM,CAAC,CAACC,EAAE;EACtD,MAAMC,QAAQ,GAAGjB,OAAO,CAACa,SAAS,CAACC,GAAG,CAACH,MAAM,CAACI,MAAM,CAAC,CAACC,EAAE;EAExD,MAAME,SAAS,GACXpB,QAAQ,CAACc,OAAO,EAAEK,QAAQ,EAAET,aAAa,EAAED,YAAY,EAAEE,cAAc,CAAC;EAE5E,MAAM;IAACU,gBAAgB;IAAEC,YAAY;IAAEC,eAAe;IAAEC;EAAa,CAAC,GAClEzB,iBAAiB,CAACG,OAAO,EAAEkB,SAAS,CAAC;EAEzC;EACAlB,OAAO,CAACC,IAAI,CAACsB,KAAK,CAACF,eAAe,CAAC;EACnCrB,OAAO,CAACC,IAAI,CAACsB,KAAK,CAACD,aAAa,CAAC;EAEjC,MAAME,qBAAqB,GACvBxB,OAAO,CAACyB,UAAU,CAAC,CAACL,YAAY,CAAC,EAAE,OAAO,EAAED,gBAAgB,CAAC;EAEjE,OAAOK,qBAAqB;AAC9B;AAEA,OAAO,MAAME,yBAAyB,GAAiB;EACrDC,UAAU,EAAE/B,mBAAmB;EAC/BgC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE9B,KAAK;EAChBI,UAAU,EAAEA;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}