{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmPrelu;\nfunction setup(backend) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null /* void */, ['number', 'number', 'number' // out_id\n  ]);\n}\nfunction prelu(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x,\n    alpha\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n  let inputId = xId;\n  const input = x;\n  let castedInput = input;\n  if (input.dtype !== 'float32') {\n    castedInput = cast({\n      backend,\n      inputs: {\n        x\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n  const out = backend.makeOutput(x.shape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(inputId, weightsId, outId);\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n  return out;\n}\nexport const preluConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu\n};","map":{"version":3,"names":["Prelu","cast","wasmPrelu","setup","backend","wasm","cwrap","prelu","args","inputs","x","alpha","xId","dataIdMap","get","dataId","id","weightsId","inputId","input","castedInput","dtype","attrs","out","makeOutput","shape","outId","disposeData","preluConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Prelu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\nlet wasmPrelu: (xId: number, weightsId: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null /* void */, [\n    'number',  // x_id\n    'number',  // weights_id\n    'number'   // out_id\n  ]);\n}\n\nfunction prelu(args: {inputs: PreluInputs, backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n\n  let inputId = xId;\n  const input = x;\n  let castedInput = input;\n  if (input.dtype !== 'float32') {\n    castedInput = cast({backend, inputs: {x}, attrs: {dtype: 'float32'}});\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n\n  const out = backend.makeOutput(x.shape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(inputId, weightsId, outId);\n\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n  return out;\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,KAAK,QAAoB,uBAAuB;AAIlF,SAAQC,IAAI,QAAO,QAAQ;AAE3B,IAAIC,SAAkE;AAEtE,SAASC,KAAKA,CAACC,OAAoB;EACjCF,SAAS,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,KAAK,EAAE,IAAI,CAAC,YAAY,CACrD,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASO,KAAKA,CAACC,IAAiD;EAC9D,MAAM;IAACC,MAAM;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC9B,MAAM;IAACE,CAAC;IAAEC;EAAK,CAAC,GAAGF,MAAM;EACzB,MAAMG,GAAG,GAAGR,OAAO,CAACS,SAAS,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC,CAACC,EAAE;EAC9C,MAAMC,SAAS,GAAGb,OAAO,CAACS,SAAS,CAACC,GAAG,CAACH,KAAK,CAACI,MAAM,CAAC,CAACC,EAAE;EAExD,IAAIE,OAAO,GAAGN,GAAG;EACjB,MAAMO,KAAK,GAAGT,CAAC;EACf,IAAIU,WAAW,GAAGD,KAAK;EACvB,IAAIA,KAAK,CAACE,KAAK,KAAK,SAAS,EAAE;IAC7BD,WAAW,GAAGnB,IAAI,CAAC;MAACG,OAAO;MAAEK,MAAM,EAAE;QAACC;MAAC,CAAC;MAAEY,KAAK,EAAE;QAACD,KAAK,EAAE;MAAS;IAAC,CAAC,CAAC;IACrEH,OAAO,GAAGd,OAAO,CAACS,SAAS,CAACC,GAAG,CAACM,WAAW,CAACL,MAAM,CAAC,CAACC,EAAE;;EAGxD,MAAMO,GAAG,GAAGnB,OAAO,CAACoB,UAAU,CAACd,CAAC,CAACe,KAAK,EAAE,SAAS,CAAC;EAClD,MAAMC,KAAK,GAAGtB,OAAO,CAACS,SAAS,CAACC,GAAG,CAACS,GAAG,CAACR,MAAM,CAAC,CAACC,EAAE;EAClDd,SAAS,CAACgB,OAAO,EAAED,SAAS,EAAES,KAAK,CAAC;EAEpC,IAAIP,KAAK,CAACE,KAAK,KAAK,SAAS,EAAE;IAC7BjB,OAAO,CAACuB,WAAW,CAACP,WAAW,CAACL,MAAM,CAAC;;EAEzC,OAAOQ,GAAG;AACZ;AAEA,OAAO,MAAMK,WAAW,GAAiB;EACvCC,UAAU,EAAE7B,KAAK;EACjB8B,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE5B,KAAK;EAChB6B,UAAU,EAAEzB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}