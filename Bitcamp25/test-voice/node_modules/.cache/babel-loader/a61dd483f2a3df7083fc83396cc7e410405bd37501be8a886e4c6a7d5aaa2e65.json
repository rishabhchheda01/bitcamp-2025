{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nfunction batchToSpaceND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeData(xReshaped.dataId);\n  backend.disposeData(xTransposed.dataId);\n  backend.disposeData(xTransposedReshaped.dataId);\n  return result;\n}\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'wasm',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"names":["backend_util","BatchToSpaceND","reshape","slice","transpose","batchToSpaceND","args","inputs","backend","attrs","x","blockShape","crops","prod","reduce","a","b","reshaped","getReshaped","shape","permuted","getPermuted","length","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","perm","xTransposedReshaped","result","begin","size","disposeData","dataId","batchToSpaceNDConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\BatchToSpaceND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nfunction batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: BackendWasm,\n  attrs: BatchToSpaceNDAttrs\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeData(xReshaped.dataId);\n  backend.disposeData(xTransposed.dataId);\n  backend.disposeData(xTransposedReshaped.dataId);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'wasm',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,cAAc,QAA4E,uBAAuB;AAIvI,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,SAAS,QAAO,aAAa;AAErC,SAASC,cAAcA,CAACC,IAIvB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,UAAU;IAAEC;EAAK,CAAC,GAAGH,KAAK;EAEjC,MAAMI,IAAI,GAAGF,UAAU,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAE/C,MAAMC,QAAQ,GAAGjB,YAAY,CAACkB,WAAW,CAACR,CAAC,CAACS,KAAK,EAAER,UAAU,EAAEE,IAAI,CAAC;EACpE,MAAMO,QAAQ,GAAGpB,YAAY,CAACqB,WAAW,CAACJ,QAAQ,CAACK,MAAM,EAAEX,UAAU,CAACW,MAAM,CAAC;EAC7E,MAAMC,gBAAgB,GAClBvB,YAAY,CAACwB,mBAAmB,CAACd,CAAC,CAACS,KAAK,EAAER,UAAU,EAAEE,IAAI,CAAC;EAC/D,MAAMY,gBAAgB,GAClBzB,YAAY,CAAC0B,mBAAmB,CAACd,KAAK,EAAED,UAAU,CAACW,MAAM,CAAC;EAC9D,MAAMK,SAAS,GACX3B,YAAY,CAAC4B,YAAY,CAACL,gBAAgB,EAAEX,KAAK,EAAED,UAAU,CAACW,MAAM,CAAC;EAEzE,MAAMO,SAAS,GAAG3B,OAAO,CAAC;IAACK,MAAM,EAAE;MAACG;IAAC,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACU,KAAK,EAAEF;IAAQ;EAAC,CAAC,CAAC;EAC3E,MAAMa,WAAW,GACb1B,SAAS,CAAC;IAACG,MAAM,EAAE;MAACG,CAAC,EAAEmB;IAAS,CAAC;IAAErB,OAAO;IAAEC,KAAK,EAAE;MAACsB,IAAI,EAAEX;IAAQ;EAAC,CAAC,CAAC;EACzE,MAAMY,mBAAmB,GAAG9B,OAAO,CAC/B;IAACK,MAAM,EAAE;MAACG,CAAC,EAAEoB;IAAW,CAAC;IAAEtB,OAAO;IAAEC,KAAK,EAAE;MAACU,KAAK,EAAEI;IAAgB;EAAC,CAAC,CAAC;EAC1E,MAAMU,MAAM,GAAG9B,KAAK,CAAC;IACnBI,MAAM,EAAE;MAACG,CAAC,EAAEsB;IAAmB,CAAC;IAChCxB,OAAO;IACPC,KAAK,EAAE;MAACyB,KAAK,EAAET,gBAAgB;MAAEU,IAAI,EAAER;IAAS;GACjD,CAAC;EAEFnB,OAAO,CAAC4B,WAAW,CAACP,SAAS,CAACQ,MAAM,CAAC;EACrC7B,OAAO,CAAC4B,WAAW,CAACN,WAAW,CAACO,MAAM,CAAC;EACvC7B,OAAO,CAAC4B,WAAW,CAACJ,mBAAmB,CAACK,MAAM,CAAC;EAE/C,OAAOJ,MAAM;AACf;AAEA,OAAO,MAAMK,oBAAoB,GAAiB;EAChDC,UAAU,EAAEtC,cAAc;EAC1BuC,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAEpC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}