{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nlet wasmFlipLeftRight;\nfunction setup(backend) {\n  wasmFlipLeftRight = backend.wasm.cwrap(FlipLeftRight, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nexport function flipLeftRight(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    image\n  } = inputs;\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  wasmFlipLeftRight(imageId, batch, imageHeight, imageWidth, numChannels, outId);\n  return out;\n}\nexport const flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'wasm',\n  kernelFunc: flipLeftRight,\n  setupFunc: setup\n};","map":{"version":3,"names":["FlipLeftRight","wasmFlipLeftRight","setup","backend","wasm","cwrap","flipLeftRight","args","inputs","image","out","makeOutput","shape","dtype","imageId","dataIdMap","get","dataId","id","outId","batch","imageHeight","imageWidth","numChannels","flipLeftRightConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\FlipLeftRight.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FlipLeftRight, FlipLeftRightInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmFlipLeftRight: (\n    xId: number, batch: number, imageHeight: number, imageWidth: number,\n    numChannels: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmFlipLeftRight = backend.wasm.cwrap(FlipLeftRight, null /* void */, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // imageHeight\n    'number',  // imageWidth\n    'number',  // numChannels\n    'number',  // outId\n  ]);\n}\n\nexport function flipLeftRight(\n    args: {inputs: FlipLeftRightInputs, backend: BackendWasm}): TensorInfo {\n  const {inputs, backend} = args;\n  const {image} = inputs;\n\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n  wasmFlipLeftRight(\n      imageId, batch, imageHeight, imageWidth, numChannels, outId);\n  return out;\n}\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'wasm',\n  kernelFunc: flipLeftRight as unknown as KernelFunc,\n  setupFunc: setup\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAa,QAAkE,uBAAuB;AAI9G,IAAIC,iBAE2C;AAE/C,SAASC,KAAKA,CAACC,OAAoB;EACjCF,iBAAiB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACL,aAAa,EAAE,IAAI,CAAC,YAAY,CACrE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUM,aAAaA,CACzBC,IAAyD;EAC3D,MAAM;IAACC,MAAM;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC9B,MAAM;IAACE;EAAK,CAAC,GAAGD,MAAM;EAEtB,MAAME,GAAG,GAAGP,OAAO,CAACQ,UAAU,CAACF,KAAK,CAACG,KAAK,EAAEH,KAAK,CAACI,KAAK,CAAC;EACxD,MAAMC,OAAO,GAAGX,OAAO,CAACY,SAAS,CAACC,GAAG,CAACP,KAAK,CAACQ,MAAM,CAAC,CAACC,EAAE;EACtD,MAAMC,KAAK,GAAGhB,OAAO,CAACY,SAAS,CAACC,GAAG,CAACN,GAAG,CAACO,MAAM,CAAC,CAACC,EAAE;EAElD,MAAM,CAACE,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,CAAC,GAAGd,KAAK,CAACG,KAAK;EAEjEX,iBAAiB,CACba,OAAO,EAAEM,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEJ,KAAK,CAAC;EAChE,OAAOT,GAAG;AACZ;AAEA,OAAO,MAAMc,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEzB,aAAa;EACzB0B,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAErB,aAAsC;EAClDsB,SAAS,EAAE1B;CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}