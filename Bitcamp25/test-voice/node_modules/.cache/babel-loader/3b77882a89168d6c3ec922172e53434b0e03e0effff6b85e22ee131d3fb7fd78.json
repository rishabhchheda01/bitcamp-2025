{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SearchSorted } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmSearchSorted;\nfunction setup(backend) {\n  wasmSearchSorted = backend.wasm.cwrap(SearchSorted, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'bool', 'number' // outId\n  ]);\n}\nfunction searchSorted(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sortedSequence,\n    values\n  } = inputs;\n  const {\n    side\n  } = attrs;\n  if (sortedSequence.dtype !== values.dtype) {\n    throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${sortedSequence.dtype} and ${values.dtype}`);\n  }\n  const out = backend.makeOutput(values.shape, 'int32');\n  function tensorId(x) {\n    return backend.dataIdMap.get(x.dataId).id;\n  }\n  wasmSearchSorted(tensorId(sortedSequence), tensorId(values), /*batchSize=*/sortedSequence.shape[0], /*sequenceSize=*/sortedSequence.shape[1], /*valuesSize=*/values.shape[1], /*dtype=*/CppDType[sortedSequence.dtype], /*isSideLeft=*/side === 'left', tensorId(out));\n  return out;\n}\nexport const searchSortedConfig = {\n  kernelName: SearchSorted,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: searchSorted\n};","map":{"version":3,"names":["SearchSorted","CppDType","wasmSearchSorted","setup","backend","wasm","cwrap","searchSorted","args","inputs","attrs","sortedSequence","values","side","dtype","Error","out","makeOutput","shape","tensorId","x","dataIdMap","get","dataId","id","searchSortedConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\SearchSorted.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {CppDType} from './types';\n\nlet wasmSearchSorted: (\n    sortedSequenceId: number, valuesId: number, batchSize: number,\n    sequenceSize: number, valuesSize: number, dtype: number,\n    isSideLeft: boolean, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmSearchSorted = backend.wasm.cwrap(SearchSorted, null /* void */, [\n    'number',  // sortedSequenceId\n    'number',  // valuesId\n    'number',  // batchSize\n    'number',  // sequenceSize\n    'number',  // valuesSize\n    'number',  // dtype\n    'bool',    // isSideLeft\n    'number',  // outId\n  ]);\n}\n\nfunction searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: BackendWasm,\n  attrs: SearchSortedAttrs,\n}) {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  if (sortedSequence.dtype !== values.dtype) {\n    throw new Error(\n        `SearchSorted error: sorted_sequence must have the same dtype as values. Got ${\n            sortedSequence.dtype} and ${values.dtype}`);\n  }\n\n  const out = backend.makeOutput(values.shape, 'int32');\n\n  function tensorId(x: TensorInfo) {\n    return backend.dataIdMap.get(x.dataId).id!;\n  }\n  wasmSearchSorted(\n      tensorId(sortedSequence),\n      tensorId(values),\n      /*batchSize=*/sortedSequence.shape[0],\n      /*sequenceSize=*/sortedSequence.shape[1],\n      /*valuesSize=*/values.shape[1],\n      /*dtype=*/CppDType[sortedSequence.dtype],\n      /*isSideLeft=*/side === 'left',\n      tensorId(out),\n  );\n\n  return out;\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: searchSorted as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,QAA0D,uBAAuB;AAG/H,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,gBAG2C;AAE/C,SAASC,KAAKA,CAACC,OAAoB;EACjCF,gBAAgB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,YAAY,EAAE,IAAI,CAAC,YAAY,CACnE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASO,YAAYA,CAACC,IAIrB;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,cAAc;IAAEC;EAAM,CAAC,GAAGH,MAAM;EACvC,MAAM;IAACI;EAAI,CAAC,GAAGH,KAAK;EAEpB,IAAIC,cAAc,CAACG,KAAK,KAAKF,MAAM,CAACE,KAAK,EAAE;IACzC,MAAM,IAAIC,KAAK,CACX,+EACIJ,cAAc,CAACG,KAAK,QAAQF,MAAM,CAACE,KAAK,EAAE,CAAC;;EAGrD,MAAME,GAAG,GAAGZ,OAAO,CAACa,UAAU,CAACL,MAAM,CAACM,KAAK,EAAE,OAAO,CAAC;EAErD,SAASC,QAAQA,CAACC,CAAa;IAC7B,OAAOhB,OAAO,CAACiB,SAAS,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,EAAG;EAC5C;EACAtB,gBAAgB,CACZiB,QAAQ,CAACR,cAAc,CAAC,EACxBQ,QAAQ,CAACP,MAAM,CAAC,EAChB,cAAcD,cAAc,CAACO,KAAK,CAAC,CAAC,CAAC,EACrC,iBAAiBP,cAAc,CAACO,KAAK,CAAC,CAAC,CAAC,EACxC,eAAeN,MAAM,CAACM,KAAK,CAAC,CAAC,CAAC,EAC9B,UAAUjB,QAAQ,CAACU,cAAc,CAACG,KAAK,CAAC,EACxC,eAAeD,IAAI,KAAK,MAAM,EAC9BM,QAAQ,CAACH,GAAG,CAAC,CAChB;EAED,OAAOA,GAAG;AACZ;AAEA,OAAO,MAAMS,kBAAkB,GAAiB;EAC9CC,UAAU,EAAE1B,YAAY;EACxB2B,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEzB,KAAK;EAChB0B,UAAU,EAAEtB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}