{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nfunction stringSplit(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    input,\n    delimiter\n  } = inputs;\n  const {\n    skipEmpty\n  } = attrs;\n  const inputVals = backend.readSync(input.dataId);\n  const delimiterVals = backend.readSync(delimiter.dataId);\n  const [indices, values, shape] = stringSplitImplCPU(inputVals, delimiterVals[0], skipEmpty);\n  const outputSize = values.length;\n  const indicesOut = backend.makeOutput([outputSize, 2], 'int32');\n  const indicesOutVals = backend.typedArrayFromHeap(indicesOut);\n  indicesOutVals.set(indices);\n  const valuesOut = backend.makeOutput([outputSize], 'string');\n  const valuesOutData = backend.dataIdMap.get(valuesOut.dataId);\n  valuesOutData.stringBytes = values;\n  const shapeOut = backend.makeOutput([2], 'int32');\n  const shapeOutVals = backend.typedArrayFromHeap(shapeOut);\n  shapeOutVals.set(shape);\n  return [indicesOut, valuesOut, shapeOut];\n}\nexport const stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'wasm',\n  kernelFunc: stringSplit\n};","map":{"version":3,"names":["StringSplit","stringSplitImplCPU","stringSplit","args","backend","inputs","attrs","input","delimiter","skipEmpty","inputVals","readSync","dataId","delimiterVals","indices","values","shape","outputSize","length","indicesOut","makeOutput","indicesOutVals","typedArrayFromHeap","set","valuesOut","valuesOutData","dataIdMap","get","stringBytes","shapeOut","shapeOutVals","stringSplitConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\StringSplit.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nfunction stringSplit(args: {\n  backend: BackendWasm,\n  inputs: StringSplitInputs,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {backend, inputs, attrs} = args;\n  const {input, delimiter} = inputs;\n  const {skipEmpty} = attrs;\n\n  const inputVals = backend.readSync(input.dataId) as Uint8Array[];\n  const delimiterVals = backend.readSync(delimiter.dataId) as Uint8Array[];\n\n  const [indices, values, shape] =\n      stringSplitImplCPU(inputVals, delimiterVals[0], skipEmpty);\n  const outputSize = values.length;\n\n  const indicesOut = backend.makeOutput([outputSize, 2], 'int32');\n  const indicesOutVals = backend.typedArrayFromHeap(indicesOut);\n  indicesOutVals.set(indices);\n\n  const valuesOut = backend.makeOutput([outputSize], 'string');\n  const valuesOutData = backend.dataIdMap.get(valuesOut.dataId);\n  valuesOutData.stringBytes = values;\n\n  const shapeOut = backend.makeOutput([2], 'int32');\n  const shapeOutVals = backend.typedArrayFromHeap(shapeOut);\n  shapeOutVals.set(shape);\n\n  return [indicesOut, valuesOut, shapeOut];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'wasm',\n  kernelFunc: stringSplit as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAW,QAAwD,uBAAuB;AAG5H,SAAQC,kBAAkB,QAAO,wBAAwB;AAEzD,SAASC,WAAWA,CAACC,IAIpB;EACC,MAAM;IAACC,OAAO;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,KAAK;IAAEC;EAAS,CAAC,GAAGH,MAAM;EACjC,MAAM;IAACI;EAAS,CAAC,GAAGH,KAAK;EAEzB,MAAMI,SAAS,GAAGN,OAAO,CAACO,QAAQ,CAACJ,KAAK,CAACK,MAAM,CAAiB;EAChE,MAAMC,aAAa,GAAGT,OAAO,CAACO,QAAQ,CAACH,SAAS,CAACI,MAAM,CAAiB;EAExE,MAAM,CAACE,OAAO,EAAEC,MAAM,EAAEC,KAAK,CAAC,GAC1Bf,kBAAkB,CAACS,SAAS,EAAEG,aAAa,CAAC,CAAC,CAAC,EAAEJ,SAAS,CAAC;EAC9D,MAAMQ,UAAU,GAAGF,MAAM,CAACG,MAAM;EAEhC,MAAMC,UAAU,GAAGf,OAAO,CAACgB,UAAU,CAAC,CAACH,UAAU,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;EAC/D,MAAMI,cAAc,GAAGjB,OAAO,CAACkB,kBAAkB,CAACH,UAAU,CAAC;EAC7DE,cAAc,CAACE,GAAG,CAACT,OAAO,CAAC;EAE3B,MAAMU,SAAS,GAAGpB,OAAO,CAACgB,UAAU,CAAC,CAACH,UAAU,CAAC,EAAE,QAAQ,CAAC;EAC5D,MAAMQ,aAAa,GAAGrB,OAAO,CAACsB,SAAS,CAACC,GAAG,CAACH,SAAS,CAACZ,MAAM,CAAC;EAC7Da,aAAa,CAACG,WAAW,GAAGb,MAAM;EAElC,MAAMc,QAAQ,GAAGzB,OAAO,CAACgB,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EACjD,MAAMU,YAAY,GAAG1B,OAAO,CAACkB,kBAAkB,CAACO,QAAQ,CAAC;EACzDC,YAAY,CAACP,GAAG,CAACP,KAAK,CAAC;EAEvB,OAAO,CAACG,UAAU,EAAEK,SAAS,EAAEK,QAAQ,CAAC;AAC1C;AAEA,OAAO,MAAME,iBAAiB,GAAiB;EAC7CC,UAAU,EAAEhC,WAAW;EACvBiC,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAEhC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}