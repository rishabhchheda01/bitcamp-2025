{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolWithArgmax, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmMaxPoolWithArgmax;\nfunction setup(backend) {\n  wasmMaxPoolWithArgmax = backend.wasm.cwrap('MaxPoolWithArgmax', null, ['number', 'number', 'number', 'number', 'boolean', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // padLeft\n  ]);\n}\nexport function maxPoolWithArgmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    includeBatchInIndex\n  } = attrs;\n  util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n  const dilations = [1, 1];\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n  const pooled = backend.makeOutput(convInfo.outShape, x.dtype);\n  const indexes = backend.makeOutput(convInfo.outShape, 'int32');\n  wasmMaxPoolWithArgmax(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(pooled.dataId).id, backend.dataIdMap.get(indexes.dataId).id, CppDType[x.dtype], includeBatchInIndex, convInfo.batchSize, convInfo.inChannels, convInfo.inHeight, convInfo.inWidth, convInfo.outHeight, convInfo.outWidth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.top, convInfo.padInfo.left);\n  return [pooled, indexes];\n}\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPoolWithArgmax\n};","map":{"version":3,"names":["backend_util","MaxPoolWithArgmax","util","CppDType","wasmMaxPoolWithArgmax","setup","backend","wasm","cwrap","maxPoolWithArgmax","args","inputs","attrs","x","filterSize","strides","pad","includeBatchInIndex","assert","shape","length","dilations","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","pooled","makeOutput","outShape","dtype","indexes","dataIdMap","get","dataId","id","batchSize","inChannels","inHeight","inWidth","outHeight","outWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padInfo","top","left","maxPoolWithArgmaxConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\MaxPoolWithArgmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmMaxPoolWithArgmax: (\n    xId: number, pooledId: number, indexesId: number, dtype: number,\n    includeBatchIndex: boolean, batchSize: number, channelSize: number,\n    inHeight: number, inWidth: number, outHeight: number, outWidth: number,\n    strideHeight: number, strideWidth: number, dilationHeight: number,\n    dilationWidth: number, effectiveFilterHeight: number,\n    effectiveFilterWidth: number, padTop: number, padLeft: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmMaxPoolWithArgmax = backend.wasm.cwrap('MaxPoolWithArgmax', null, [\n    'number',   // xId\n    'number',   // pooledId\n    'number',   // indexesId\n    'number',   // dtype\n    'boolean',  // includeBatchIndex\n    'number',   // batchSize\n    'number',   // channelSize\n    'number',   // inHeight\n    'number',   // inWidth\n    'number',   // outHeight\n    'number',   // outWidth\n    'number',   // strideHeight\n    'number',   // strideWidth\n    'number',   // dilationHeight\n    'number',   // dilationWidth\n    'number',   // effectiveFilterHeight\n    'number',   // effectiveFilterWidth\n    'number',   // padTop\n    'number',   // padLeft\n  ]);\n}\n\nexport function maxPoolWithArgmax(args: {\n  inputs: MaxPoolWithArgmaxInputs,\n  attrs: MaxPoolWithArgmaxAttrs,\n  backend: BackendWasm,\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, includeBatchInIndex} = attrs;\n\n  util.assert(\n      x.shape.length === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${\n          x.shape.length}.`);\n  const dilations: [number, number] = [1, 1];\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides, [1, 1],\n      pad);\n\n  const pooled = backend.makeOutput(convInfo.outShape, x.dtype);\n  const indexes = backend.makeOutput(convInfo.outShape, 'int32');\n\n  wasmMaxPoolWithArgmax(\n      backend.dataIdMap.get(x.dataId).id,\n      backend.dataIdMap.get(pooled.dataId).id,\n      backend.dataIdMap.get(indexes.dataId).id,\n      CppDType[x.dtype],\n      includeBatchInIndex,\n      convInfo.batchSize,\n      convInfo.inChannels,\n      convInfo.inHeight,\n      convInfo.inWidth,\n      convInfo.outHeight,\n      convInfo.outWidth,\n      convInfo.strideHeight,\n      convInfo.strideWidth,\n      convInfo.dilationHeight,\n      convInfo.dilationWidth,\n      convInfo.effectiveFilterHeight,\n      convInfo.effectiveFilterWidth,\n      convInfo.padInfo.top,\n      convInfo.padInfo.left,\n  );\n  return [pooled, indexes];\n}\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPoolWithArgmax as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}