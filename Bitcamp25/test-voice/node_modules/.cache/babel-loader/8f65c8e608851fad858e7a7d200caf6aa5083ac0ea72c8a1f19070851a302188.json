{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot } from '@tensorflow/tfjs-core';\nlet wasmOneHot;\nfunction setup(backend) {\n  wasmOneHot = backend.wasm.cwrap(OneHot, null /* void */, ['number', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\nfunction oneHot(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    dtype,\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  const out = backend.makeOutput([...indices.shape, depth], dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  wasmOneHot(indicesId, depth, onValue, offValue, outId);\n  return out;\n}\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: oneHot\n};","map":{"version":3,"names":["OneHot","wasmOneHot","setup","backend","wasm","cwrap","oneHot","args","inputs","attrs","indices","dtype","depth","onValue","offValue","out","makeOutput","shape","outId","dataIdMap","get","dataId","id","indicesData","indicesId","oneHotConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\OneHot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmOneHot: (\n    indicesId: number, depth: number, onValue: number, offValue: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmOneHot = backend.wasm.cwrap(OneHot, null /* void */, [\n    'number',  // indices_id\n    'number',  // depth,\n    'number',  // onValue\n    'number',  // offValue\n    'number'   // out_id\n  ]);\n}\n\nfunction oneHot(\n    args: {inputs: OneHotInputs, attrs: OneHotAttrs, backend: BackendWasm}) {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const out = backend.makeOutput([...indices.shape, depth], dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n\n  wasmOneHot(indicesId, depth, onValue, offValue, outId);\n\n  return out;\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: oneHot as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAM,QAAkC,uBAAuB;AAIjG,IAAIC,UAEsB;AAE1B,SAASC,KAAKA,CAACC,OAAoB;EACjCF,UAAU,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACL,MAAM,EAAE,IAAI,CAAC,YAAY,CACvD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASM,MAAMA,CACXC,IAAsE;EACxE,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAO,CAAC,GAAGF,MAAM;EACxB,MAAM;IAACG,KAAK;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGL,KAAK;EAE/C,MAAMM,GAAG,GAAGZ,OAAO,CAACa,UAAU,CAAC,CAAC,GAAGN,OAAO,CAACO,KAAK,EAAEL,KAAK,CAAC,EAAED,KAAK,CAAC;EAChE,MAAMO,KAAK,GAAGf,OAAO,CAACgB,SAAS,CAACC,GAAG,CAACL,GAAG,CAACM,MAAM,CAAC,CAACC,EAAE;EAElD,MAAMC,WAAW,GAAGpB,OAAO,CAACgB,SAAS,CAACC,GAAG,CAACV,OAAO,CAACW,MAAM,CAAC;EACzD,MAAMG,SAAS,GAAGD,WAAW,CAACD,EAAE;EAEhCrB,UAAU,CAACuB,SAAS,EAAEZ,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAEI,KAAK,CAAC;EAEtD,OAAOH,GAAG;AACZ;AAEA,OAAO,MAAMU,YAAY,GAAiB;EACxCC,UAAU,EAAE1B,MAAM;EAClB2B,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE1B,KAAK;EAChB2B,UAAU,EAAEvB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}