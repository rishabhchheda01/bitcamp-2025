{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kheri\\\\Downloads\\\\Bitcamp\\\\bitcamp-2025\\\\Bitcamp25\\\\test-voice\\\\src\\\\SplineLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SplineViewer from './SplineViewer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingTexts = [\"Firing up neurons... please wait\", \"Stretching artificial muscles\", \"Lubricating digital joints\", \"Waking up from REM sleep mode\", \"Brewing caffeine for CPU cortex\"];\nconst SplineLoader = ({\n  onLoadingComplete,\n  showStatus = true\n}) => {\n  _s();\n  const initialSplineRef = useRef(null);\n  const [currentLoadingPhase, setCurrentLoadingPhase] = useState(0);\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n  const [loadingText, setLoadingText] = useState(LoadingTexts[0]);\n  const [textOpacity, setTextOpacity] = useState(1);\n\n  // Handle loading text animation\n  useEffect(() => {\n    if (!isInitialLoading) return;\n    const textInterval = setInterval(() => {\n      setTextOpacity(0);\n      setTimeout(() => {\n        setCurrentLoadingPhase(prev => {\n          const nextPhase = prev + 1;\n          if (nextPhase >= LoadingTexts.length) {\n            clearInterval(textInterval);\n            return prev;\n          }\n          setLoadingText(LoadingTexts[nextPhase]);\n          setTextOpacity(1);\n          return nextPhase;\n        });\n      }, 500); // Wait for fade out before changing text\n    }, 1300); // Change text every 1 second (reduced from 1.2s to show more messages)\n\n    // Handle transition to main scene after 6 seconds (increased from 5 seconds to allow for more messages)\n    const loadingTimer = setTimeout(() => {\n      setIsInitialLoading(false);\n      if (onLoadingComplete) onLoadingComplete();\n    }, 6000);\n    return () => {\n      clearInterval(textInterval);\n      clearTimeout(loadingTimer);\n    };\n  }, [isInitialLoading, onLoadingComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader-container\",\n    children: [isInitialLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spline-container\",\n        children: /*#__PURE__*/_jsxDEV(SplineViewer, {\n          ref: initialSplineRef,\n          url: \"https://prod.spline.design/xpxDmF5OWl8sWQlZ/scene.splinecode\",\n          persistOnUpdate: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-text\",\n        style: {\n          opacity: textOpacity\n        },\n        children: loadingText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          style: {\n            width: `${(currentLoadingPhase + 1) / LoadingTexts.length * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !isInitialLoading && null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(SplineLoader, \"NkMJjSs0uRP8h1dZ9nwBQSIufhs=\");\n_c = SplineLoader;\nexport default SplineLoader;\nvar _c;\n$RefreshReg$(_c, \"SplineLoader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SplineViewer","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingTexts","SplineLoader","onLoadingComplete","showStatus","_s","initialSplineRef","currentLoadingPhase","setCurrentLoadingPhase","isInitialLoading","setIsInitialLoading","loadingText","setLoadingText","textOpacity","setTextOpacity","textInterval","setInterval","setTimeout","prev","nextPhase","length","clearInterval","loadingTimer","clearTimeout","className","children","ref","url","persistOnUpdate","fileName","_jsxFileName","lineNumber","columnNumber","style","opacity","width","_c","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/SplineLoader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SplineViewer from './SplineViewer';\n\nconst LoadingTexts = [\n  \"Firing up neurons... please wait\",\n  \"Stretching artificial muscles\",\n  \"Lubricating digital joints\",\n  \"Waking up from REM sleep mode\",\n  \"Brewing caffeine for CPU cortex\",\n];\n\nconst SplineLoader = ({ onLoadingComplete, showStatus = true }) => {\n  const initialSplineRef = useRef(null);\n  const [currentLoadingPhase, setCurrentLoadingPhase] = useState(0);\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n  const [loadingText, setLoadingText] = useState(LoadingTexts[0]);\n  const [textOpacity, setTextOpacity] = useState(1);\n\n  // Handle loading text animation\n  useEffect(() => {\n    if (!isInitialLoading) return;\n\n    const textInterval = setInterval(() => {\n      setTextOpacity(0);\n      \n      setTimeout(() => {\n        setCurrentLoadingPhase(prev => {\n          const nextPhase = prev + 1;\n          if (nextPhase >= LoadingTexts.length) {\n            clearInterval(textInterval);\n            return prev;\n          }\n          setLoadingText(LoadingTexts[nextPhase]);\n          setTextOpacity(1);\n          return nextPhase;\n        });\n      }, 500); // Wait for fade out before changing text\n    }, 1300); // Change text every 1 second (reduced from 1.2s to show more messages)\n    \n    // Handle transition to main scene after 6 seconds (increased from 5 seconds to allow for more messages)\n    const loadingTimer = setTimeout(() => {\n      setIsInitialLoading(false);\n      if (onLoadingComplete) onLoadingComplete();\n    }, 6000);\n    \n    return () => {\n      clearInterval(textInterval);\n      clearTimeout(loadingTimer);\n    };\n  }, [isInitialLoading, onLoadingComplete]);\n\n  return (\n    <div className=\"loader-container\">\n      {/* Initial loading animation */}\n      {isInitialLoading && (\n        <>\n          <div className=\"spline-container\">\n            <SplineViewer \n              ref={initialSplineRef}\n              url=\"https://prod.spline.design/xpxDmF5OWl8sWQlZ/scene.splinecode\" \n              persistOnUpdate={true}\n            />\n          </div>\n          <div className=\"loading-text\" style={{ opacity: textOpacity }}>\n            {loadingText}\n          </div>\n          <div className=\"loading-progress\">\n            <div \n              className=\"progress-bar\" \n              style={{ \n                width: `${(currentLoadingPhase + 1) / LoadingTexts.length * 100}%` \n              }}\n            ></div>\n          </div>\n        </>\n      )}\n      \n      {/* Main scene after loading - we don't need to render this here anymore,\n          as it will be handled by the App component for persistence */}\n      {!isInitialLoading && null}\n    </div>\n  );\n};\n\nexport default SplineLoader; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}