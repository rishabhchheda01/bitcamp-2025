{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nlet wasmReverse;\nfunction setup(backend) {\n  wasmReverse = backend.wasm.cwrap(Reverse, null, ['number', 'array', 'number', 'array', 'number', 'number' // out_id\n  ]);\n}\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const axes = util.parseAxisParam(dims, x.shape);\n  if (x.shape.length === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n  const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n  const reshaped = reshape({\n    inputs: {\n      x: out\n    },\n    attrs: {\n      shape: x.shape\n    },\n    backend\n  });\n  backend.disposeData(out.dataId);\n  return reshaped;\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'wasm',\n  kernelFunc: reverse,\n  setupFunc: setup\n};","map":{"version":3,"names":["Reverse","util","identity","reshape","wasmReverse","setup","backend","wasm","cwrap","reverse","args","inputs","attrs","x","dims","axes","parseAxisParam","shape","length","out","makeOutput","dtype","xId","dataIdMap","get","dataId","id","outId","axesBytes","Uint8Array","Int32Array","buffer","outShapeBytes","reshaped","disposeData","reverseConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Reverse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\nlet wasmReverse: (\n    xId: number, axes: Uint8Array, axesLength: number, outShape: Uint8Array,\n    outShapeLength: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmReverse = backend.wasm.cwrap(Reverse, null, [\n    'number',  // x_id\n    'array',   // axes\n    'number',  // axes_length\n    'array',   // out_shape\n    'number',  // out_shape_length\n    'number'   // out_id\n  ]);\n}\n\nexport function reverse(\n    args: {inputs: ReverseInputs, backend: BackendWasm, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const axes = util.parseAxisParam(dims, x.shape);\n\n  if (x.shape.length === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n  const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n\n  wasmReverse(\n      xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n\n  const reshaped =\n      reshape({inputs: {x: out}, attrs: {shape: x.shape}, backend});\n\n  backend.disposeData(out.dataId);\n  return reshaped;\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'wasm',\n  kernelFunc: reverse as unknown as KernelFunc,\n  setupFunc: setup\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAO,EAA2CC,IAAI,QAAO,uBAAuB;AAItH,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAAQC,OAAO,QAAO,WAAW;AAEjC,IAAIC,WAE8C;AAElD,SAASC,KAAKA,CAACC,OAAoB;EACjCF,WAAW,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACR,OAAO,EAAE,IAAI,EAAE,CAC9C,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUS,OAAOA,CACnBC,IAAwE;EAE1E,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAClB,MAAM;IAACG;EAAI,CAAC,GAAGF,KAAK;EAEpB,MAAMG,IAAI,GAAGd,IAAI,CAACe,cAAc,CAACF,IAAI,EAAED,CAAC,CAACI,KAAK,CAAC;EAE/C,IAAIJ,CAAC,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOhB,QAAQ,CAAC;MAACS,MAAM,EAAE;QAACE;MAAC,CAAC;MAAEP;IAAO,CAAC,CAAC;;EAGzC,MAAMa,GAAG,GAAGb,OAAO,CAACc,UAAU,CAACP,CAAC,CAACI,KAAK,EAAEJ,CAAC,CAACQ,KAAK,CAAC;EAChD,MAAMC,GAAG,GAAGhB,OAAO,CAACiB,SAAS,CAACC,GAAG,CAACX,CAAC,CAACY,MAAM,CAAC,CAACC,EAAE;EAC9C,MAAMC,KAAK,GAAGrB,OAAO,CAACiB,SAAS,CAACC,GAAG,CAACL,GAAG,CAACM,MAAM,CAAC,CAACC,EAAE;EAElD,MAAME,SAAS,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACf,IAAI,CAAC,CAACgB,MAAM,CAAC;EAC7D,MAAMC,aAAa,GAAG,IAAIH,UAAU,CAAC,IAAIC,UAAU,CAACjB,CAAC,CAACI,KAAK,CAAC,CAACc,MAAM,CAAC;EAEpE3B,WAAW,CACPkB,GAAG,EAAEM,SAAS,EAAEb,IAAI,CAACG,MAAM,EAAEc,aAAa,EAAEnB,CAAC,CAACI,KAAK,CAACC,MAAM,EAAES,KAAK,CAAC;EAEtE,MAAMM,QAAQ,GACV9B,OAAO,CAAC;IAACQ,MAAM,EAAE;MAACE,CAAC,EAAEM;IAAG,CAAC;IAAEP,KAAK,EAAE;MAACK,KAAK,EAAEJ,CAAC,CAACI;IAAK,CAAC;IAAEX;EAAO,CAAC,CAAC;EAEjEA,OAAO,CAAC4B,WAAW,CAACf,GAAG,CAACM,MAAM,CAAC;EAC/B,OAAOQ,QAAQ;AACjB;AAEA,OAAO,MAAME,aAAa,GAAiB;EACzCC,UAAU,EAAEpC,OAAO;EACnBqC,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAE7B,OAAgC;EAC5C8B,SAAS,EAAElC;CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}