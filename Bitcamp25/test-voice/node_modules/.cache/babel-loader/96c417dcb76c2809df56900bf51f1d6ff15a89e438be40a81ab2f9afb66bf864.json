{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropInput } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmDilation2DBackpropInput;\nfunction setup(backend) {\n  wasmDilation2DBackpropInput = backend.wasm.cwrap(Dilation2DBackpropInput, null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // padLeft\n  ]);\n}\nexport function dilation2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  if (x.dtype !== filter.dtype || x.dtype !== dy.dtype) {\n    throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${x.dtype}, ${filter.dtype}, and ${dy.dtype}`);\n  }\n  const dilationInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, /*dataFormat=*/'NHWC', dilations);\n  const gradients = backend.makeOutput(x.shape, x.dtype);\n  wasmDilation2DBackpropInput(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(gradients.dataId).id, CppDType[x.dtype], dilationInfo.batchSize, /*depth=*/dilationInfo.inChannels, dilationInfo.inHeight, dilationInfo.inWidth, dilationInfo.outHeight, dilationInfo.outWidth, dilationInfo.strideHeight, dilationInfo.strideWidth, dilationInfo.dilationHeight, dilationInfo.dilationWidth, dilationInfo.filterHeight, dilationInfo.filterWidth, dilationInfo.padInfo.top, dilationInfo.padInfo.left);\n  return gradients;\n}\nexport const dilation2DBackpropInputConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: dilation2DBackpropInput\n};","map":{"version":3,"names":["backend_util","Dilation2DBackpropInput","CppDType","wasmDilation2DBackpropInput","setup","backend","wasm","cwrap","dilation2DBackpropInput","args","inputs","attrs","x","filter","dy","strides","pad","dilations","dtype","Error","dilationInfo","computeDilation2DInfo","shape","gradients","makeOutput","dataIdMap","get","dataId","id","batchSize","inChannels","inHeight","inWidth","outHeight","outWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","filterHeight","filterWidth","padInfo","top","left","dilation2DBackpropInputConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Dilation2DBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, KernelConfig, KernelFunc, Tensor3D, Tensor4D, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmDilation2DBackpropInput: (\n    xId: number, filterId: number, dyId: number, gradId: number, dtype: number,\n    batch: number, depth: number, inHeight: number, inWidth: number,\n    outHeight: number, outWidth: number, strideHeight: number,\n    strideWidth: number, dilationHeight: number, dilationWidth: number,\n    filterHeight: number, filterWidth: number, padTop: number,\n    padLeft: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmDilation2DBackpropInput =\n      backend.wasm.cwrap(Dilation2DBackpropInput, null, [\n        'number',  // xId\n        'number',  // filterId\n        'number',  // dyId\n        'number',  // gradId\n        'number',  // dtype\n        'number',  // batch\n        'number',  // depth\n        'number',  // inHeight\n        'number',  // inWidth\n        'number',  // outHeight\n        'number',  // outWidth\n        'number',  // strideHeight\n        'number',  // strideWidth\n        'number',  // dilationHeight\n        'number',  // dilationWidth\n        'number',  // filterHeight\n        'number',  // filterWidth\n        'number',  // padTop\n        'number',  // padLeft\n      ]);\n}\n\nexport function dilation2DBackpropInput(args: {\n  inputs: {x: Tensor4D, filter: Tensor3D, dy: Tensor4D},\n  attrs: Dilation2DAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, dy} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  if (x.dtype !== filter.dtype || x.dtype !== dy.dtype) {\n    throw new Error(\n        `Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${\n            x.dtype}, ${filter.dtype}, and ${dy.dtype}`);\n  }\n\n  const dilationInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      /*dataFormat=*/'NHWC', dilations);\n\n  const gradients = backend.makeOutput(x.shape, x.dtype);\n\n  wasmDilation2DBackpropInput(\n      backend.dataIdMap.get(x.dataId).id,\n      backend.dataIdMap.get(filter.dataId).id,\n      backend.dataIdMap.get(dy.dataId).id,\n      backend.dataIdMap.get(gradients.dataId).id,\n      CppDType[x.dtype],\n      dilationInfo.batchSize,\n      /*depth=*/dilationInfo.inChannels,\n      dilationInfo.inHeight,\n      dilationInfo.inWidth,\n      dilationInfo.outHeight,\n      dilationInfo.outWidth,\n      dilationInfo.strideHeight,\n      dilationInfo.strideWidth,\n      dilationInfo.dilationHeight,\n      dilationInfo.dilationWidth,\n      dilationInfo.filterHeight,\n      dilationInfo.filterWidth,\n      dilationInfo.padInfo.top,\n      dilationInfo.padInfo.left,\n  );\n  return gradients;\n}\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: dilation2DBackpropInput as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAmBC,uBAAuB,QAAiE,uBAAuB;AAItJ,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,2BAMwB;AAE5B,SAASC,KAAKA,CAACC,OAAoB;EACjCF,2BAA2B,GACvBE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,uBAAuB,EAAE,IAAI,EAAE,CAChD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACR;AAEA,OAAM,SAAUO,uBAAuBA,CAACC,IAIvC;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,CAAC;IAAEC,MAAM;IAAEC;EAAE,CAAC,GAAGJ,MAAM;EAC9B,MAAM;IAACK,OAAO;IAAEC,GAAG;IAAEC;EAAS,CAAC,GAAGN,KAAK;EAEvC,IAAIC,CAAC,CAACM,KAAK,KAAKL,MAAM,CAACK,KAAK,IAAIN,CAAC,CAACM,KAAK,KAAKJ,EAAE,CAACI,KAAK,EAAE;IACpD,MAAM,IAAIC,KAAK,CACX,mFACIP,CAAC,CAACM,KAAK,KAAKL,MAAM,CAACK,KAAK,SAASJ,EAAE,CAACI,KAAK,EAAE,CAAC;;EAGtD,MAAME,YAAY,GAAGpB,YAAY,CAACqB,qBAAqB,CACnDT,CAAC,CAACU,KAAyC,EAC3CT,MAAM,CAACS,KAAiC,EAAEP,OAAO,EAAEC,GAAG,EACtD,eAAe,MAAM,EAAEC,SAAS,CAAC;EAErC,MAAMM,SAAS,GAAGlB,OAAO,CAACmB,UAAU,CAACZ,CAAC,CAACU,KAAK,EAAEV,CAAC,CAACM,KAAK,CAAC;EAEtDf,2BAA2B,CACvBE,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACd,CAAC,CAACe,MAAM,CAAC,CAACC,EAAE,EAClCvB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACb,MAAM,CAACc,MAAM,CAAC,CAACC,EAAE,EACvCvB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACZ,EAAE,CAACa,MAAM,CAAC,CAACC,EAAE,EACnCvB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACH,SAAS,CAACI,MAAM,CAAC,CAACC,EAAE,EAC1C1B,QAAQ,CAACU,CAAC,CAACM,KAAK,CAAC,EACjBE,YAAY,CAACS,SAAS,EACtB,UAAUT,YAAY,CAACU,UAAU,EACjCV,YAAY,CAACW,QAAQ,EACrBX,YAAY,CAACY,OAAO,EACpBZ,YAAY,CAACa,SAAS,EACtBb,YAAY,CAACc,QAAQ,EACrBd,YAAY,CAACe,YAAY,EACzBf,YAAY,CAACgB,WAAW,EACxBhB,YAAY,CAACiB,cAAc,EAC3BjB,YAAY,CAACkB,aAAa,EAC1BlB,YAAY,CAACmB,YAAY,EACzBnB,YAAY,CAACoB,WAAW,EACxBpB,YAAY,CAACqB,OAAO,CAACC,GAAG,EACxBtB,YAAY,CAACqB,OAAO,CAACE,IAAI,CAC5B;EACD,OAAOpB,SAAS;AAClB;AAEA,OAAO,MAAMqB,6BAA6B,GAAiB;EACzDC,UAAU,EAAE5C,uBAAuB;EACnC6C,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE3C,KAAK;EAChB4C,UAAU,EAAExC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}