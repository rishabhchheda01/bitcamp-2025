{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad } from '@tensorflow/tfjs-core';\nlet wasmEluGrad;\nfunction setup(backend) {\n  wasmEluGrad = backend.wasm.cwrap(EluGrad, null, ['number', 'number', 'number' // outId\n  ]);\n}\nexport function eluGrad(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    dy,\n    y\n  } = inputs;\n  const out = backend.makeOutput(y.shape, 'float32');\n  const tensorId = x => {\n    return backend.dataIdMap.get(x.dataId).id;\n  };\n  wasmEluGrad(tensorId(y), tensorId(dy), tensorId(out));\n  return out;\n}\nexport const eluGradConfig = {\n  kernelName: EluGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: eluGrad\n};","map":{"version":3,"names":["EluGrad","wasmEluGrad","setup","backend","wasm","cwrap","eluGrad","args","inputs","dy","y","out","makeOutput","shape","tensorId","x","dataIdMap","get","dataId","id","eluGradConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\EluGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmEluGrad: (yId: number, dyId: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmEluGrad = backend.wasm.cwrap(EluGrad, null, [\n    'number',  // yId\n    'number',  // dyId,\n    'number',  // outId\n  ]);\n}\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: BackendWasm}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  const out = backend.makeOutput(y.shape, 'float32');\n  const tensorId = (x: TensorInfo) => {\n    return backend.dataIdMap.get(x.dataId).id!;\n  };\n  wasmEluGrad(tensorId(y), tensorId(dy), tensorId(out));\n  return out;\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: eluGrad as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAO,QAA4D,uBAAuB;AAIlG,IAAIC,WAA+D;AAEnE,SAASC,KAAKA,CAACC,OAAoB;EACjCF,WAAW,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACL,OAAO,EAAE,IAAI,EAAE,CAC9C,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUM,OAAOA,CAACC,IAAmD;EAEzE,MAAM;IAACC,MAAM;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC9B,MAAM;IAACE,EAAE;IAAEC;EAAC,CAAC,GAAGF,MAAM;EAEtB,MAAMG,GAAG,GAAGR,OAAO,CAACS,UAAU,CAACF,CAAC,CAACG,KAAK,EAAE,SAAS,CAAC;EAClD,MAAMC,QAAQ,GAAIC,CAAa,IAAI;IACjC,OAAOZ,OAAO,CAACa,SAAS,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,EAAG;EAC5C,CAAC;EACDlB,WAAW,CAACa,QAAQ,CAACJ,CAAC,CAAC,EAAEI,QAAQ,CAACL,EAAE,CAAC,EAAEK,QAAQ,CAACH,GAAG,CAAC,CAAC;EACrD,OAAOA,GAAG;AACZ;AAEA,OAAO,MAAMS,aAAa,GAAiB;EACzCC,UAAU,EAAErB,OAAO;EACnBsB,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAErB,KAAK;EAChBsB,UAAU,EAAElB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}