{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { transpose } from './Transpose';\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\nexport function permuteAxesAndTranspose(x, axis, backend) {\n  const xShape = x.shape;\n  const xRank = x.shape.length;\n  const originalAxes = util.parseAxisParam(axis, xShape);\n  let axes = originalAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xTransposed = null;\n  let inputWasTransposed = false;\n  if (permutedAxes != null) {\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xTransposed = transpose({\n      inputs: {\n        x\n      },\n      attrs: {\n        perm: permutedAxes\n      },\n      backend\n    });\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n  return {\n    transposed: xTransposed,\n    originalAxes,\n    axes,\n    inputWasTransposed\n  };\n}","map":{"version":3,"names":["backend_util","util","transpose","permuteAxesAndTranspose","x","axis","backend","xShape","shape","xRank","length","originalAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","xTransposed","inputWasTransposed","newShape","Array","i","getInnerMostAxes","inputs","attrs","perm","xId","dataIdMap","get","dataId","id","transposedId","transposed"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\kernel_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {BackendWasm} from '../backend_wasm';\nimport {transpose} from './Transpose';\n\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\nexport function permuteAxesAndTranspose(\n    x: TensorInfo, axis: number|number[], backend: BackendWasm): {\n  transposed: TensorInfo|null,\n  axes: number[],\n  originalAxes: number[],\n  inputWasTransposed: boolean\n} {\n  const xShape = x.shape;\n  const xRank = x.shape.length;\n\n  const originalAxes = util.parseAxisParam(axis, xShape);\n  let axes = originalAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xTransposed = null;\n  let inputWasTransposed = false;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xTransposed =\n        transpose({inputs: {x}, attrs: {perm: permutedAxes}, backend});\n\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n\n  return {transposed: xTransposed, originalAxes, axes, inputWasTransposed};\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAcC,IAAI,QAAO,uBAAuB;AAEpE,SAAQC,SAAS,QAAO,aAAa;AAErC;;;;;;;;AAQA,OAAM,SAAUC,uBAAuBA,CACnCC,CAAa,EAAEC,IAAqB,EAAEC,OAAoB;EAM5D,MAAMC,MAAM,GAAGH,CAAC,CAACI,KAAK;EACtB,MAAMC,KAAK,GAAGL,CAAC,CAACI,KAAK,CAACE,MAAM;EAE5B,MAAMC,YAAY,GAAGV,IAAI,CAACW,cAAc,CAACP,IAAI,EAAEE,MAAM,CAAC;EACtD,IAAIM,IAAI,GAAGF,YAAY;EACvB,MAAMG,YAAY,GAAGd,YAAY,CAACe,kBAAkB,CAACF,IAAI,EAAEJ,KAAK,CAAC;EACjE,IAAIO,WAAW,GAAG,IAAI;EACtB,IAAIC,kBAAkB,GAAG,KAAK;EAC9B,IAAIH,YAAY,IAAI,IAAI,EAAE;IACxB,MAAMI,QAAQ,GAAa,IAAIC,KAAK,CAACV,KAAK,CAAC;IAC3C,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACR,MAAM,EAAEU,CAAC,EAAE,EAAE;MACxCF,QAAQ,CAACE,CAAC,CAAC,GAAGb,MAAM,CAACO,YAAY,CAACM,CAAC,CAAC,CAAC;;IAGvCP,IAAI,GAAGb,YAAY,CAACqB,gBAAgB,CAACR,IAAI,CAACH,MAAM,EAAED,KAAK,CAAC;IACxDO,WAAW,GACPd,SAAS,CAAC;MAACoB,MAAM,EAAE;QAAClB;MAAC,CAAC;MAAEmB,KAAK,EAAE;QAACC,IAAI,EAAEV;MAAY,CAAC;MAAER;IAAO,CAAC,CAAC;IAElE,MAAMmB,GAAG,GAAGnB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACvB,CAAC,CAACwB,MAAM,CAAC,CAACC,EAAE;IAC9C,MAAMC,YAAY,GAAGxB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACX,WAAW,CAACY,MAAM,CAAC,CAACC,EAAE;IACjE,IAAIC,YAAY,KAAKL,GAAG,EAAE;MACxBR,kBAAkB,GAAG,IAAI;;;EAI7B,OAAO;IAACc,UAAU,EAAEf,WAAW;IAAEL,YAAY;IAAEE,IAAI;IAAEI;EAAkB,CAAC;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}