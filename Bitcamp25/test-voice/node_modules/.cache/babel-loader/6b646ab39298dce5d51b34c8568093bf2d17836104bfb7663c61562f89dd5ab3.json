{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nlet wasmDepthToSpace;\nfunction setup(backend) {\n  wasmDepthToSpace = backend.wasm.cwrap(DepthToSpace, null /*void*/, ['number', 'number', 'number', 'array', 'number', 'array', 'array', 'number', 'number' // outId\n  ]);\n}\nexport function depthToSpace(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const out = backend.makeOutput(outputShape, 'float32');\n  const xData = backend.dataIdMap.get(x.dataId);\n  const xId = xData.id;\n  const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(x.shape)).buffer);\n  const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n  const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outputShape)).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const channelsLast = dataFormat === 'NHWC' ? 1 : 0;\n  wasmDepthToSpace(xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1, outputShapeBytes, outStridesBytes, outputShape.length, outId);\n  return out;\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthToSpace\n};","map":{"version":3,"names":["DepthToSpace","util","wasmDepthToSpace","setup","backend","wasm","cwrap","depthToSpace","args","inputs","attrs","x","blockSize","dataFormat","batchSize","shape","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputShape","out","makeOutput","xData","dataIdMap","get","dataId","xId","id","xStridesBytes","Uint8Array","Int32Array","computeStrides","buffer","outputShapeBytes","outStridesBytes","outId","channelsLast","length","depthToSpaceConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\DepthToSpace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmDepthToSpace: (\n    xId: number, blockSize: number, channelsLast: number, xStrides: Uint8Array,\n    xStridesLength: number, outputShape: Uint8Array, outputStrides: Uint8Array,\n    outSize: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmDepthToSpace = backend.wasm.cwrap(DepthToSpace, null /*void*/, [\n    'number',  // xId\n    'number',  // blockSize\n    'number',  // channelsLast\n    'array',   // xStrides\n    'number',  // xStridesLength\n    'array',   // outputShape\n    'array',   // outputStrides\n    'number',  // outSize\n    'number',  // outId\n  ]);\n}\n\nexport function depthToSpace(args: {\n  backend: BackendWasm,\n  inputs: DepthToSpaceInputs,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const out = backend.makeOutput(outputShape, 'float32');\n\n  const xData = backend.dataIdMap.get(x.dataId);\n  const xId = xData.id;\n  const xStridesBytes =\n      new Uint8Array(new Int32Array(util.computeStrides(x.shape)).buffer);\n\n  const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n  const outStridesBytes =\n      new Uint8Array(new Int32Array(util.computeStrides(outputShape)).buffer);\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const channelsLast = dataFormat === 'NHWC' ? 1 : 0;\n  wasmDepthToSpace(\n      xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1,\n      outputShapeBytes, outStridesBytes, outputShape.length, outId);\n\n  return out;\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}