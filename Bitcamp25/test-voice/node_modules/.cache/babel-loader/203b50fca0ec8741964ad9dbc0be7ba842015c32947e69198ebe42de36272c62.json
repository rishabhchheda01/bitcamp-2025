{"ast":null,"code":"import * as faceLandmarksDetection from \"@tensorflow-models/face-landmarks-detection\";\n\n// Triangulation array needed for face mesh\nexport const TRIANGULATION = [127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121, 128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9, 151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186, 230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56, 157, 173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144, 24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91, 181, 85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158, 28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117, 228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26, 209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211, 170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53, 52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173, 155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22, 39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28, 158, 157, 35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77, 137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49, 102, 64, 41, 73, 74, 212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168, 123, 147, 187, 96, 77, 90, 65, 55, 107, 89, 90, 180, 101, 100, 120, 63, 105, 104, 93, 137, 227, 15, 86, 85, 129, 102, 49, 14, 87, 86, 55, 8, 9, 100, 47, 121, 145, 23, 22, 88, 89, 179, 6, 122, 196, 88, 95, 96, 138, 172, 136, 215, 58, 172, 115, 48, 219, 42, 80, 81, 195, 3, 51, 43, 146, 61, 171, 175, 199, 81, 82, 38, 53, 46, 225, 144, 163, 110, 246, 33, 7, 52, 65, 66, 229, 228, 117, 34, 127, 234, 107, 108, 69, 109, 108, 151, 48, 64, 235, 62, 78, 191, 129, 209, 126, 111, 35, 143, 163, 161, 246, 117, 123, 50, 222, 65, 52, 19, 125, 141, 221, 55, 65, 3, 195, 197, 25, 7, 33, 220, 237, 44, 70, 71, 139, 122, 193, 245, 247, 130, 33, 71, 21, 162, 153, 158, 159, 170, 169, 150, 188, 174, 196, 216, 186, 92, 144, 160, 161, 2, 97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12, 145, 159, 160, 38, 82, 13, 63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50, 205, 206, 92, 165, 209, 198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243, 239, 238, 241, 214, 135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86, 87, 178, 85, 86, 179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132, 76, 62, 183, 61, 76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143, 156, 79, 239, 237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213, 215, 138, 59, 166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228, 25, 130, 226, 23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190, 243, 221, 56, 190, 28, 56, 221, 27, 28, 222, 29, 27, 223, 30, 29, 224, 247, 30, 225, 238, 79, 20, 166, 59, 75, 60, 75, 240, 147, 177, 215, 20, 79, 166, 187, 147, 213, 112, 233, 244, 233, 128, 245, 128, 114, 188, 114, 217, 174, 131, 115, 220, 217, 198, 236, 198, 131, 134, 177, 132, 58, 143, 35, 124, 110, 163, 7, 228, 110, 25];\n\n/**\r\n * FaceDirectionDetector class\r\n * A reusable class for detecting face landmarks and calculating face direction\r\n */\nclass FaceDirectionDetector {\n  constructor(options = {}) {\n    // Default options\n    this.options = {\n      runtime: \"tfjs\",\n      showMesh: false,\n      showTagNumbers: false,\n      showDirection: false,\n      drawDelay: 300,\n      // ms\n      ...options\n    };\n    this.detector = null;\n    this.canvas = null;\n    this.video = null;\n    this.isRunning = false;\n    this.animationId = null;\n  }\n\n  /**\r\n   * Initialize the detector\r\n   * @returns {Promise<void>}\r\n   */\n  async initialize() {\n    const model = faceLandmarksDetection.SupportedModels.MediaPipeFaceMesh;\n    const detectorConfig = {\n      runtime: this.options.runtime\n    };\n    this.detector = await faceLandmarksDetection.createDetector(model, detectorConfig);\n  }\n\n  /**\r\n   * Start the face direction detection process\r\n   * @param {HTMLVideoElement} video - Video element to detect faces from\r\n   * @param {HTMLCanvasElement} canvas - Canvas element to draw on\r\n   * @param {Function} callback - Callback function to receive direction data\r\n   * @returns {Promise<void>}\r\n   */\n  async start(video, canvas, callback) {\n    if (!this.detector) {\n      await this.initialize();\n    }\n    this.video = video;\n    this.canvas = canvas;\n    this.callback = callback;\n    this.isRunning = true;\n    this.detect();\n  }\n\n  /**\r\n   * Stop the detection process\r\n   */\n  stop() {\n    this.isRunning = false;\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n\n  /**\r\n   * Set options for the detector\r\n   * @param {Object} options - Options to set\r\n   */\n  setOptions(options) {\n    this.options = {\n      ...this.options,\n      ...options\n    };\n  }\n\n  /**\r\n   * Main detection loop\r\n   */\n  async detect() {\n    if (!this.isRunning) return;\n    const estimationConfig = {\n      flipHorizontal: true\n    };\n    const faces = await this.detector.estimateFaces(this.video, estimationConfig);\n    const ctx = this.canvas.getContext(\"2d\");\n    setTimeout(() => {\n      this.animationId = requestAnimationFrame(() => {\n        if (faces && faces.length > 0) {\n          const data = this.drawMesh(faces[0], ctx);\n          if (this.callback) {\n            // Pass the full face data to the callback\n            this.callback({\n              ...data,\n              keypoints: faces[0].keypoints\n            });\n          }\n        }\n        if (this.isRunning) {\n          this.detect();\n        }\n      });\n    }, this.options.drawDelay);\n  }\n\n  /**\r\n   * Draw the face mesh on canvas and calculate direction\r\n   * @param {Object} prediction - Face prediction data\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @returns {Object} Direction data\r\n   */\n  drawMesh(prediction, ctx) {\n    if (!prediction) return;\n    const keyPoints = prediction.keypoints;\n    if (!keyPoints || keyPoints.length === 0) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Draw and calculate\n    this.drawFaceMesh(ctx, keyPoints);\n    return this.calculateDirection(ctx, keyPoints);\n  }\n\n  /**\r\n   * Draw face mesh on canvas\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @param {Array} keyPoints - Face keypoints\r\n   */\n  drawFaceMesh(ctx, keyPoints) {\n    if (this.options.showMesh) {\n      this.drawMeshPaths(keyPoints, ctx);\n    }\n    if (this.options.showTagNumbers) {\n      let index = 0;\n      for (let keyPoint of keyPoints) {\n        ctx.beginPath();\n        ctx.arc(keyPoint.x, keyPoint.y, 1, 0, 3 * Math.PI);\n        ctx.fillText(index, keyPoint.x, keyPoint.y);\n        ctx.fillStyle = \"black\";\n        ctx.fill();\n        index++;\n      }\n    }\n  }\n\n  /**\r\n   * Draw mesh paths on canvas\r\n   * @param {Array} keyPoints - Face keypoints\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   */\n  drawMeshPaths(keyPoints, ctx) {\n    for (let i = 0; i < TRIANGULATION.length / 3; i++) {\n      const points = [TRIANGULATION[i * 3], TRIANGULATION[i * 3 + 1], TRIANGULATION[i * 3 + 2]].map(index => keyPoints[index]);\n      this.drawPath(ctx, points, true);\n    }\n  }\n\n  /**\r\n   * Draw a path on canvas\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @param {Array} points - Points to draw\r\n   * @param {boolean} closePath - Whether to close the path\r\n   */\n  drawPath(ctx, points, closePath) {\n    const region = new Path2D();\n    region.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      const point = points[i];\n      region.lineTo(point.x, point.y);\n    }\n    if (closePath) {\n      region.closePath();\n    }\n    ctx.strokeStyle = \"black\";\n    ctx.stroke(region);\n  }\n\n  /**\r\n   * Calculate face direction based on keypoints\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @param {Array} keyPoints - Face keypoints\r\n   * @returns {Object} Direction data\r\n   */\n  calculateDirection(ctx, keyPoints) {\n    let noseTip, leftNose, rightNose;\n    try {\n      noseTip = {\n        ...keyPoints[1],\n        name: \"nose tip\"\n      };\n      leftNose = {\n        ...keyPoints[279],\n        name: \"left nose\"\n      };\n      rightNose = {\n        ...keyPoints[49],\n        name: \"right nose\"\n      };\n    } catch (error) {\n      console.log(\"Error creating directional points\", keyPoints, error);\n      return null;\n    }\n\n    // Midsection of nose is back of nose perpendicular\n    const midpoint = {\n      x: (leftNose.x + rightNose.x) / 2,\n      y: (leftNose.y + rightNose.y) / 2,\n      z: (leftNose.z + rightNose.z) / 2\n    };\n    const perpendicularUp = {\n      x: midpoint.x,\n      y: midpoint.y - 50,\n      z: midpoint.z\n    };\n\n    // Calculate angles\n    const yaw = this.getAngleBetweenLines(midpoint, noseTip, perpendicularUp);\n    const turn = this.getAngleBetweenLines(midpoint, rightNose, noseTip);\n    if (this.options.showDirection) {\n      // Draw the direction indicators on the canvas for visualization\n      this.drawDirectionIndicators(ctx, noseTip, leftNose, rightNose, midpoint, perpendicularUp, yaw, turn);\n    }\n\n    // Calculate distance between nose tip and midpoint, and left and right nose points\n    const zDistance = this.getDistanceBetweenPoints(noseTip, midpoint);\n    const xDistance = this.getDistanceBetweenPoints(leftNose, rightNose);\n    return {\n      yaw,\n      turn,\n      zDistance,\n      xDistance\n    };\n  }\n\n  /**\r\n   * Draw direction indicators on canvas\r\n   */\n  drawDirectionIndicators(ctx, noseTip, leftNose, rightNose, midpoint, perpendicularUp, yaw, turn) {\n    // Draw the nose points for reference\n    ctx.fillStyle = \"red\";\n    ctx.beginPath();\n    ctx.arc(noseTip.x, noseTip.y, 5, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.fillStyle = \"blue\";\n    ctx.beginPath();\n    ctx.arc(leftNose.x, leftNose.y, 3, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.fillStyle = \"green\";\n    ctx.beginPath();\n    ctx.arc(rightNose.x, rightNose.y, 3, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Draw the midpoint\n    ctx.fillStyle = \"purple\";\n    ctx.beginPath();\n    ctx.arc(midpoint.x, midpoint.y, 3, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n\n  /**\r\n   * Calculate distance between two points\r\n   * @param {Object} point1 - First point with x, y, z coordinates\r\n   * @param {Object} point2 - Second point with x, y, z coordinates\r\n   * @returns {number} Distance between the points\r\n   */\n  getDistanceBetweenPoints(point1, point2) {\n    const dx = point1.x - point2.x;\n    const dy = point1.y - point2.y;\n    const dz = (point1.z || 0) - (point2.z || 0);\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  /**\r\n   * Calculate angle between two lines with a common point\r\n   * @param {Object} midpoint - Common point for both lines\r\n   * @param {Object} point1 - End point of first line\r\n   * @param {Object} point2 - End point of second line\r\n   * @returns {number} Angle in degrees\r\n   */\n  getAngleBetweenLines(midpoint, point1, point2) {\n    const angle1 = Math.atan2(point1.y - midpoint.y, point1.x - midpoint.x);\n    const angle2 = Math.atan2(point2.y - midpoint.y, point2.x - midpoint.x);\n    let angle = (angle1 - angle2) * (180 / Math.PI);\n\n    // Normalize the angle\n    if (angle < 0) {\n      angle += 360;\n    }\n    if (angle > 180) {\n      angle = 360 - angle;\n    }\n    return angle;\n  }\n}\nexport default FaceDirectionDetector;","map":{"version":3,"names":["faceLandmarksDetection","TRIANGULATION","FaceDirectionDetector","constructor","options","runtime","showMesh","showTagNumbers","showDirection","drawDelay","detector","canvas","video","isRunning","animationId","initialize","model","SupportedModels","MediaPipeFaceMesh","detectorConfig","createDetector","start","callback","detect","stop","cancelAnimationFrame","setOptions","estimationConfig","flipHorizontal","faces","estimateFaces","ctx","getContext","setTimeout","requestAnimationFrame","length","data","drawMesh","keypoints","prediction","keyPoints","clearRect","width","height","drawFaceMesh","calculateDirection","drawMeshPaths","index","keyPoint","beginPath","arc","x","y","Math","PI","fillText","fillStyle","fill","i","points","map","drawPath","closePath","region","Path2D","moveTo","point","lineTo","strokeStyle","stroke","noseTip","leftNose","rightNose","name","error","console","log","midpoint","z","perpendicularUp","yaw","getAngleBetweenLines","turn","drawDirectionIndicators","zDistance","getDistanceBetweenPoints","xDistance","point1","point2","dx","dy","dz","sqrt","angle1","atan2","angle2","angle"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/FaceDirectionDetector.js"],"sourcesContent":["import * as faceLandmarksDetection from \"@tensorflow-models/face-landmarks-detection\";\r\n\r\n// Triangulation array needed for face mesh\r\nexport const TRIANGULATION = [\r\n  127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121,\r\n  128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9,\r\n  151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186,\r\n  230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56, 157,\r\n  173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144,\r\n  24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91, 181,\r\n  85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158,\r\n  28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117, 228, 31, 189,\r\n  193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26, 209, 49, 131,\r\n  135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211, 170, 140, 67, 69,\r\n  108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53, 52, 238, 20, 242, 46,\r\n  70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173, 155, 133, 123, 117, 111,\r\n  44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22, 39, 37, 167, 200, 201,\r\n  208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28, 158, 157, 35, 226, 113, 160,\r\n  159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77, 137, 123, 116,\r\n  41, 38, 72, 203, 129, 142, 64, 98, 240, 49, 102, 64, 41, 73, 74, 212, 216,\r\n  207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168, 123,\r\n  147, 187, 96, 77, 90, 65, 55, 107, 89, 90, 180, 101, 100, 120, 63, 105, 104,\r\n  93, 137, 227, 15, 86, 85, 129, 102, 49, 14, 87, 86, 55, 8, 9, 100, 47, 121,\r\n  145, 23, 22, 88, 89, 179, 6, 122, 196, 88, 95, 96, 138, 172, 136, 215, 58,\r\n  172, 115, 48, 219, 42, 80, 81, 195, 3, 51, 43, 146, 61, 171, 175, 199, 81, 82,\r\n  38, 53, 46, 225, 144, 163, 110, 246, 33, 7, 52, 65, 66, 229, 228, 117, 34,\r\n  127, 234, 107, 108, 69, 109, 108, 151, 48, 64, 235, 62, 78, 191, 129, 209,\r\n  126, 111, 35, 143, 163, 161, 246, 117, 123, 50, 222, 65, 52, 19, 125, 141,\r\n  221, 55, 65, 3, 195, 197, 25, 7, 33, 220, 237, 44, 70, 71, 139, 122, 193, 245,\r\n  247, 130, 33, 71, 21, 162, 153, 158, 159, 170, 169, 150, 188, 174, 196, 216,\r\n  186, 92, 144, 160, 161, 2, 97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12,\r\n  145, 159, 160, 38, 82, 13, 63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50,\r\n  205, 206, 92, 165, 209, 198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243,\r\n  239, 238, 241, 214, 135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86,\r\n  87, 178, 85, 86, 179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132,\r\n  76, 62, 183, 61, 76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143,\r\n  156, 79, 239, 237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213,\r\n  215, 138, 59, 166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228,\r\n  25, 130, 226, 23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190,\r\n  243, 221, 56, 190, 28, 56, 221, 27, 28, 222, 29, 27, 223, 30, 29, 224, 247,\r\n  30, 225, 238, 79, 20, 166, 59, 75, 60, 75, 240, 147, 177, 215, 20, 79, 166,\r\n  187, 147, 213, 112, 233, 244, 233, 128, 245, 128, 114, 188, 114, 217, 174,\r\n  131, 115, 220, 217, 198, 236, 198, 131, 134, 177, 132, 58, 143, 35, 124, 110,\r\n  163, 7, 228, 110, 25\r\n];\r\n\r\n/**\r\n * FaceDirectionDetector class\r\n * A reusable class for detecting face landmarks and calculating face direction\r\n */\r\nclass FaceDirectionDetector {\r\n  constructor(options = {}) {\r\n    // Default options\r\n    this.options = {\r\n      runtime: \"tfjs\",\r\n      showMesh: false,\r\n      showTagNumbers: false,\r\n      showDirection: false,\r\n      drawDelay: 300, // ms\r\n      ...options\r\n    };\r\n    \r\n    this.detector = null;\r\n    this.canvas = null;\r\n    this.video = null;\r\n    this.isRunning = false;\r\n    this.animationId = null;\r\n  }\r\n\r\n  /**\r\n   * Initialize the detector\r\n   * @returns {Promise<void>}\r\n   */\r\n  async initialize() {\r\n    const model = faceLandmarksDetection.SupportedModels.MediaPipeFaceMesh;\r\n    const detectorConfig = {\r\n      runtime: this.options.runtime,\r\n    };\r\n    \r\n    this.detector = await faceLandmarksDetection.createDetector(\r\n      model,\r\n      detectorConfig\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Start the face direction detection process\r\n   * @param {HTMLVideoElement} video - Video element to detect faces from\r\n   * @param {HTMLCanvasElement} canvas - Canvas element to draw on\r\n   * @param {Function} callback - Callback function to receive direction data\r\n   * @returns {Promise<void>}\r\n   */\r\n  async start(video, canvas, callback) {\r\n    if (!this.detector) {\r\n      await this.initialize();\r\n    }\r\n    \r\n    this.video = video;\r\n    this.canvas = canvas;\r\n    this.callback = callback;\r\n    this.isRunning = true;\r\n    \r\n    this.detect();\r\n  }\r\n\r\n  /**\r\n   * Stop the detection process\r\n   */\r\n  stop() {\r\n    this.isRunning = false;\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set options for the detector\r\n   * @param {Object} options - Options to set\r\n   */\r\n  setOptions(options) {\r\n    this.options = {\r\n      ...this.options,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Main detection loop\r\n   */\r\n  async detect() {\r\n    if (!this.isRunning) return;\r\n    \r\n    const estimationConfig = { flipHorizontal: true };\r\n    const faces = await this.detector.estimateFaces(this.video, estimationConfig);\r\n    const ctx = this.canvas.getContext(\"2d\");\r\n    \r\n    setTimeout(() => {\r\n      this.animationId = requestAnimationFrame(() => {\r\n        if (faces && faces.length > 0) {\r\n          const data = this.drawMesh(faces[0], ctx);\r\n          if (this.callback) {\r\n            // Pass the full face data to the callback\r\n            this.callback({\r\n              ...data,\r\n              keypoints: faces[0].keypoints\r\n            });\r\n          }\r\n        }\r\n        \r\n        if (this.isRunning) {\r\n          this.detect();\r\n        }\r\n      });\r\n    }, this.options.drawDelay);\r\n  }\r\n\r\n  /**\r\n   * Draw the face mesh on canvas and calculate direction\r\n   * @param {Object} prediction - Face prediction data\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @returns {Object} Direction data\r\n   */\r\n  drawMesh(prediction, ctx) {\r\n    if (!prediction) return;\r\n    const keyPoints = prediction.keypoints;\r\n    if (!keyPoints || keyPoints.length === 0) return;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    // Draw and calculate\r\n    this.drawFaceMesh(ctx, keyPoints);\r\n    return this.calculateDirection(ctx, keyPoints);\r\n  }\r\n\r\n  /**\r\n   * Draw face mesh on canvas\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @param {Array} keyPoints - Face keypoints\r\n   */\r\n  drawFaceMesh(ctx, keyPoints) {\r\n    if (this.options.showMesh) {\r\n      this.drawMeshPaths(keyPoints, ctx);\r\n    }\r\n    \r\n    if (this.options.showTagNumbers) {\r\n      let index = 0;\r\n      for (let keyPoint of keyPoints) {\r\n        ctx.beginPath();\r\n        ctx.arc(keyPoint.x, keyPoint.y, 1, 0, 3 * Math.PI);\r\n        ctx.fillText(index, keyPoint.x, keyPoint.y);\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fill();\r\n        index++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw mesh paths on canvas\r\n   * @param {Array} keyPoints - Face keypoints\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   */\r\n  drawMeshPaths(keyPoints, ctx) {\r\n    for (let i = 0; i < TRIANGULATION.length / 3; i++) {\r\n      const points = [\r\n        TRIANGULATION[i * 3],\r\n        TRIANGULATION[i * 3 + 1],\r\n        TRIANGULATION[i * 3 + 2],\r\n      ].map((index) => keyPoints[index]);\r\n      \r\n      this.drawPath(ctx, points, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw a path on canvas\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @param {Array} points - Points to draw\r\n   * @param {boolean} closePath - Whether to close the path\r\n   */\r\n  drawPath(ctx, points, closePath) {\r\n    const region = new Path2D();\r\n    region.moveTo(points[0].x, points[0].y);\r\n    \r\n    for (let i = 1; i < points.length; i++) {\r\n      const point = points[i];\r\n      region.lineTo(point.x, point.y);\r\n    }\r\n    \r\n    if (closePath) {\r\n      region.closePath();\r\n    }\r\n    \r\n    ctx.strokeStyle = \"black\";\r\n    ctx.stroke(region);\r\n  }\r\n\r\n  /**\r\n   * Calculate face direction based on keypoints\r\n   * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n   * @param {Array} keyPoints - Face keypoints\r\n   * @returns {Object} Direction data\r\n   */\r\n  calculateDirection(ctx, keyPoints) {\r\n    let noseTip, leftNose, rightNose;\r\n    \r\n    try {\r\n      noseTip = { ...keyPoints[1], name: \"nose tip\" };\r\n      leftNose = { ...keyPoints[279], name: \"left nose\" };\r\n      rightNose = { ...keyPoints[49], name: \"right nose\" };\r\n    } catch (error) {\r\n      console.log(\"Error creating directional points\", keyPoints, error);\r\n      return null;\r\n    }\r\n\r\n    // Midsection of nose is back of nose perpendicular\r\n    const midpoint = {\r\n      x: (leftNose.x + rightNose.x) / 2,\r\n      y: (leftNose.y + rightNose.y) / 2,\r\n      z: (leftNose.z + rightNose.z) / 2,\r\n    };\r\n    \r\n    const perpendicularUp = { \r\n      x: midpoint.x, \r\n      y: midpoint.y - 50, \r\n      z: midpoint.z \r\n    };\r\n\r\n    // Calculate angles\r\n    const yaw = this.getAngleBetweenLines(midpoint, noseTip, perpendicularUp);\r\n    const turn = this.getAngleBetweenLines(midpoint, rightNose, noseTip);\r\n\r\n    if (this.options.showDirection) {\r\n      // Draw the direction indicators on the canvas for visualization\r\n      this.drawDirectionIndicators(ctx, noseTip, leftNose, rightNose, midpoint, perpendicularUp, yaw, turn);\r\n    }\r\n\r\n    // Calculate distance between nose tip and midpoint, and left and right nose points\r\n    const zDistance = this.getDistanceBetweenPoints(noseTip, midpoint);\r\n    const xDistance = this.getDistanceBetweenPoints(leftNose, rightNose);\r\n\r\n    return { yaw, turn, zDistance, xDistance };\r\n  }\r\n\r\n  /**\r\n   * Draw direction indicators on canvas\r\n   */\r\n  drawDirectionIndicators(ctx, noseTip, leftNose, rightNose, midpoint, perpendicularUp, yaw, turn) {\r\n    // Draw the nose points for reference\r\n    ctx.fillStyle = \"red\";\r\n    ctx.beginPath();\r\n    ctx.arc(noseTip.x, noseTip.y, 5, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    \r\n    ctx.fillStyle = \"blue\";\r\n    ctx.beginPath();\r\n    ctx.arc(leftNose.x, leftNose.y, 3, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    \r\n    ctx.fillStyle = \"green\";\r\n    ctx.beginPath();\r\n    ctx.arc(rightNose.x, rightNose.y, 3, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    \r\n    // Draw the midpoint\r\n    ctx.fillStyle = \"purple\";\r\n    ctx.beginPath();\r\n    ctx.arc(midpoint.x, midpoint.y, 3, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between two points\r\n   * @param {Object} point1 - First point with x, y, z coordinates\r\n   * @param {Object} point2 - Second point with x, y, z coordinates\r\n   * @returns {number} Distance between the points\r\n   */\r\n  getDistanceBetweenPoints(point1, point2) {\r\n    const dx = point1.x - point2.x;\r\n    const dy = point1.y - point2.y;\r\n    const dz = (point1.z || 0) - (point2.z || 0);\r\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n  }\r\n\r\n  /**\r\n   * Calculate angle between two lines with a common point\r\n   * @param {Object} midpoint - Common point for both lines\r\n   * @param {Object} point1 - End point of first line\r\n   * @param {Object} point2 - End point of second line\r\n   * @returns {number} Angle in degrees\r\n   */\r\n  getAngleBetweenLines(midpoint, point1, point2) {\r\n    const angle1 = Math.atan2(point1.y - midpoint.y, point1.x - midpoint.x);\r\n    const angle2 = Math.atan2(point2.y - midpoint.y, point2.x - midpoint.x);\r\n    let angle = (angle1 - angle2) * (180 / Math.PI);\r\n    \r\n    // Normalize the angle\r\n    if (angle < 0) {\r\n      angle += 360;\r\n    }\r\n    if (angle > 180) {\r\n      angle = 360 - angle;\r\n    }\r\n    \r\n    return angle;\r\n  }\r\n}\r\n\r\nexport default FaceDirectionDetector; "],"mappings":"AAAA,OAAO,KAAKA,sBAAsB,MAAM,6CAA6C;;AAErF;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3B,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAC1E,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAC3E,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAC5E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAC3E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAC3E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAC1E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC5E,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAC3E,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAC3E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAC5E,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAC5E,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC3E,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC7E,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC5E,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC7E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EACzzE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAC7E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC7E,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC3E,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC3E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAC3E,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC5E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAC3E,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAC1E,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAC3E,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC3E,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAC1E,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC3E,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAC1E,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAC1E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAC5E,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}