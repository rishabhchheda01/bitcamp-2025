{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\n\n// This component uses various methods to control the Spline cursor\nconst SplineScript = ({\n  position\n}) => {\n  _s();\n  const lastUpdateTimeRef = useRef(0);\n  const prevPositionRef = useRef(null);\n  const throttleThresholdRef = useRef(16); // Dynamic threshold in ms (starts at ~60fps)\n  const performanceMetricsRef = useRef({\n    frameCount: 0,\n    lastFpsCheck: 0,\n    fps: 60\n  });\n\n  // Main cursor position update effect\n  useEffect(() => {\n    if (!position) return;\n    const now = performance.now();\n    const timeSinceLastUpdate = now - lastUpdateTimeRef.current;\n\n    // Skip if we're updating too frequently or position hasn't changed enough\n    if (timeSinceLastUpdate < throttleThresholdRef.current) {\n      return;\n    }\n\n    // First-time initialization of previous position\n    if (!prevPositionRef.current) {\n      prevPositionRef.current = {\n        ...position\n      };\n      lastUpdateTimeRef.current = now;\n      return;\n    }\n\n    // Check if position has changed enough to warrant an update\n    const distanceSquared = Math.pow(position.x - prevPositionRef.current.x, 2) + Math.pow(position.y - prevPositionRef.current.y, 2);\n\n    // Skip tiny movements (< 1px) to reduce unnecessary updates\n    const minMovementThreshold = 1;\n    if (distanceSquared < minMovementThreshold && timeSinceLastUpdate < 100) {\n      return;\n    }\n\n    // Progressive update frequency - more frequent for faster movements\n    const movementMagnitude = Math.sqrt(distanceSquared);\n    const speedFactor = Math.min(1, movementMagnitude / 50);\n    const currentThreshold = Math.max(8, throttleThresholdRef.current * (1 - speedFactor * 0.8));\n    if (timeSinceLastUpdate >= currentThreshold) {\n      // Update the cursor position\n      moveSplineCursor(position);\n\n      // Update references\n      prevPositionRef.current = {\n        ...position\n      };\n      lastUpdateTimeRef.current = now;\n\n      // Update frame count for FPS calculation\n      performanceMetricsRef.current.frameCount++;\n    }\n  }, [position]);\n\n  // Function to move Spline cursor using multiple fallback approaches\n  const moveSplineCursor = position => {\n    try {\n      const {\n        x,\n        y\n      } = position;\n      const splineApp = document.querySelector('spline-viewer');\n      if (!splineApp) return;\n\n      // Try different methods to update cursor position\n\n      // Method 1: Use global function if available\n      if (typeof window.moveSplineCursor === 'function') {\n        window.moveSplineCursor(x, y);\n        return;\n      }\n\n      // Method 2: Try to dispatch pointer events\n      const eventOptions = {\n        clientX: x,\n        clientY: y,\n        bubbles: true,\n        cancelable: true\n      };\n\n      // Try multiple event types for better compatibility\n      try {\n        // Try MouseEvent first (widely supported)\n        const mouseEvent = new MouseEvent('mousemove', eventOptions);\n        splineApp.dispatchEvent(mouseEvent);\n\n        // Also try PointerEvent for newer browsers\n        if (typeof PointerEvent !== 'undefined') {\n          const pointerEvent = new PointerEvent('pointermove', {\n            ...eventOptions,\n            pointerId: 1,\n            pointerType: 'mouse'\n          });\n          splineApp.dispatchEvent(pointerEvent);\n        }\n      } catch (error) {\n        console.warn('Error dispatching events:', error);\n        // Fallback for older browsers\n        const evt = document.createEvent('MouseEvents');\n        evt.initMouseEvent('mousemove', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null);\n        splineApp.dispatchEvent(evt);\n      }\n\n      // Method 3: Try to directly modify properties or call functions\n      if (splineApp.app && typeof splineApp.app.updateCursor === 'function') {\n        splineApp.app.updateCursor(x, y);\n      }\n\n      // Method 4: Try to access the shadow DOM if available\n      if (splineApp.shadowRoot) {\n        const cursor = splineApp.shadowRoot.querySelector('.cursor') || splineApp.shadowRoot.querySelector('[data-name=\"cursor\"]') || splineApp.shadowRoot.querySelector('[id*=\"cursor\"]');\n        if (cursor && cursor.style) {\n          cursor.style.transform = `translate(${x}px, ${y}px)`;\n        }\n      }\n\n      // Method 5: Set inline styles to force cursor position\n      splineApp.style.setProperty('--cursor-x', `${x}px`);\n      splineApp.style.setProperty('--cursor-y', `${y}px`);\n    } catch (error) {\n      console.error('Error moving Spline cursor:', error);\n    }\n  };\n\n  // Performance monitoring effect for adaptive throttling\n  useEffect(() => {\n    const checkPerformance = () => {\n      const now = performance.now();\n      const metrics = performanceMetricsRef.current;\n\n      // Calculate FPS every second\n      if (now - metrics.lastFpsCheck >= 1000) {\n        metrics.fps = metrics.frameCount;\n\n        // Adjust throttle threshold based on performance\n        // If FPS is low, increase throttle to reduce updates\n        if (metrics.fps < 30 && throttleThresholdRef.current < 50) {\n          throttleThresholdRef.current = Math.min(50, throttleThresholdRef.current * 1.2);\n        }\n        // If FPS is high, decrease throttle for more responsive updates\n        else if (metrics.fps > 55 && throttleThresholdRef.current > 8) {\n          throttleThresholdRef.current = Math.max(8, throttleThresholdRef.current * 0.9);\n        }\n\n        // Reset for next second\n        metrics.frameCount = 0;\n        metrics.lastFpsCheck = now;\n      }\n      requestAnimationFrame(checkPerformance);\n    };\n\n    // Start performance monitoring\n    const animationId = requestAnimationFrame(checkPerformance);\n    return () => cancelAnimationFrame(animationId);\n  }, []);\n\n  // Initialize the global function that the index.html script can use\n  useEffect(() => {\n    // Create a global function to update the cursor\n    window._updateSplineCursor = (x, y) => {\n      const splineElement = document.querySelector('spline-viewer');\n      if (splineElement) {\n        try {\n          // Dispatch mouse event\n          const event = new MouseEvent('mousemove', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n            clientX: x,\n            clientY: y\n          });\n          splineElement.dispatchEvent(event);\n        } catch (e) {\n          console.error(\"Error updating Spline cursor:\", e);\n        }\n      }\n    };\n    return () => {\n      // Clean up the global function\n      delete window._updateSplineCursor;\n    };\n  }, []);\n  return null; // This component doesn't render anything visible\n};\n_s(SplineScript, \"Gi9/MzNBOph6KqJLA4iFJKC+cTs=\");\n_c = SplineScript;\nexport default SplineScript;\nvar _c;\n$RefreshReg$(_c, \"SplineScript\");","map":{"version":3,"names":["React","useEffect","useRef","SplineScript","position","_s","lastUpdateTimeRef","prevPositionRef","throttleThresholdRef","performanceMetricsRef","frameCount","lastFpsCheck","fps","now","performance","timeSinceLastUpdate","current","distanceSquared","Math","pow","x","y","minMovementThreshold","movementMagnitude","sqrt","speedFactor","min","currentThreshold","max","moveSplineCursor","splineApp","document","querySelector","window","eventOptions","clientX","clientY","bubbles","cancelable","mouseEvent","MouseEvent","dispatchEvent","PointerEvent","pointerEvent","pointerId","pointerType","error","console","warn","evt","createEvent","initMouseEvent","app","updateCursor","shadowRoot","cursor","style","transform","setProperty","checkPerformance","metrics","requestAnimationFrame","animationId","cancelAnimationFrame","_updateSplineCursor","splineElement","event","view","e","_c","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/SplineScript.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\n// This component uses various methods to control the Spline cursor\r\nconst SplineScript = ({ position }) => {\r\n  const lastUpdateTimeRef = useRef(0);\r\n  const prevPositionRef = useRef(null);\r\n  const throttleThresholdRef = useRef(16); // Dynamic threshold in ms (starts at ~60fps)\r\n  const performanceMetricsRef = useRef({\r\n    frameCount: 0,\r\n    lastFpsCheck: 0,\r\n    fps: 60,\r\n  });\r\n  \r\n  // Main cursor position update effect\r\n  useEffect(() => {\r\n    if (!position) return;\r\n    \r\n    const now = performance.now();\r\n    const timeSinceLastUpdate = now - lastUpdateTimeRef.current;\r\n    \r\n    // Skip if we're updating too frequently or position hasn't changed enough\r\n    if (timeSinceLastUpdate < throttleThresholdRef.current) {\r\n      return;\r\n    }\r\n    \r\n    // First-time initialization of previous position\r\n    if (!prevPositionRef.current) {\r\n      prevPositionRef.current = { ...position };\r\n      lastUpdateTimeRef.current = now;\r\n      return;\r\n    }\r\n    \r\n    // Check if position has changed enough to warrant an update\r\n    const distanceSquared = \r\n      Math.pow(position.x - prevPositionRef.current.x, 2) + \r\n      Math.pow(position.y - prevPositionRef.current.y, 2);\r\n    \r\n    // Skip tiny movements (< 1px) to reduce unnecessary updates\r\n    const minMovementThreshold = 1;\r\n    if (distanceSquared < minMovementThreshold && timeSinceLastUpdate < 100) {\r\n      return;\r\n    }\r\n    \r\n    // Progressive update frequency - more frequent for faster movements\r\n    const movementMagnitude = Math.sqrt(distanceSquared);\r\n    const speedFactor = Math.min(1, movementMagnitude / 50);\r\n    const currentThreshold = Math.max(8, throttleThresholdRef.current * (1 - speedFactor * 0.8));\r\n    \r\n    if (timeSinceLastUpdate >= currentThreshold) {\r\n      // Update the cursor position\r\n      moveSplineCursor(position);\r\n      \r\n      // Update references\r\n      prevPositionRef.current = { ...position };\r\n      lastUpdateTimeRef.current = now;\r\n      \r\n      // Update frame count for FPS calculation\r\n      performanceMetricsRef.current.frameCount++;\r\n    }\r\n  }, [position]);\r\n  \r\n  // Function to move Spline cursor using multiple fallback approaches\r\n  const moveSplineCursor = (position) => {\r\n    try {\r\n      const { x, y } = position;\r\n      const splineApp = document.querySelector('spline-viewer');\r\n      \r\n      if (!splineApp) return;\r\n      \r\n      // Try different methods to update cursor position\r\n      \r\n      // Method 1: Use global function if available\r\n      if (typeof window.moveSplineCursor === 'function') {\r\n        window.moveSplineCursor(x, y);\r\n        return;\r\n      }\r\n      \r\n      // Method 2: Try to dispatch pointer events\r\n      const eventOptions = {\r\n        clientX: x,\r\n        clientY: y,\r\n        bubbles: true,\r\n        cancelable: true,\r\n      };\r\n      \r\n      // Try multiple event types for better compatibility\r\n      try {\r\n        // Try MouseEvent first (widely supported)\r\n        const mouseEvent = new MouseEvent('mousemove', eventOptions);\r\n        splineApp.dispatchEvent(mouseEvent);\r\n        \r\n        // Also try PointerEvent for newer browsers\r\n        if (typeof PointerEvent !== 'undefined') {\r\n          const pointerEvent = new PointerEvent('pointermove', {\r\n            ...eventOptions,\r\n            pointerId: 1,\r\n            pointerType: 'mouse',\r\n          });\r\n          splineApp.dispatchEvent(pointerEvent);\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error dispatching events:', error);\r\n        // Fallback for older browsers\r\n        const evt = document.createEvent('MouseEvents');\r\n        evt.initMouseEvent(\r\n          'mousemove', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null\r\n        );\r\n        splineApp.dispatchEvent(evt);\r\n      }\r\n      \r\n      // Method 3: Try to directly modify properties or call functions\r\n      if (splineApp.app && typeof splineApp.app.updateCursor === 'function') {\r\n        splineApp.app.updateCursor(x, y);\r\n      }\r\n      \r\n      // Method 4: Try to access the shadow DOM if available\r\n      if (splineApp.shadowRoot) {\r\n        const cursor = splineApp.shadowRoot.querySelector('.cursor') || \r\n                       splineApp.shadowRoot.querySelector('[data-name=\"cursor\"]') ||\r\n                       splineApp.shadowRoot.querySelector('[id*=\"cursor\"]');\r\n                       \r\n        if (cursor && cursor.style) {\r\n          cursor.style.transform = `translate(${x}px, ${y}px)`;\r\n        }\r\n      }\r\n      \r\n      // Method 5: Set inline styles to force cursor position\r\n      splineApp.style.setProperty('--cursor-x', `${x}px`);\r\n      splineApp.style.setProperty('--cursor-y', `${y}px`);\r\n      \r\n    } catch (error) {\r\n      console.error('Error moving Spline cursor:', error);\r\n    }\r\n  };\r\n  \r\n  // Performance monitoring effect for adaptive throttling\r\n  useEffect(() => {\r\n    const checkPerformance = () => {\r\n      const now = performance.now();\r\n      const metrics = performanceMetricsRef.current;\r\n      \r\n      // Calculate FPS every second\r\n      if (now - metrics.lastFpsCheck >= 1000) {\r\n        metrics.fps = metrics.frameCount;\r\n        \r\n        // Adjust throttle threshold based on performance\r\n        // If FPS is low, increase throttle to reduce updates\r\n        if (metrics.fps < 30 && throttleThresholdRef.current < 50) {\r\n          throttleThresholdRef.current = Math.min(50, throttleThresholdRef.current * 1.2);\r\n        } \r\n        // If FPS is high, decrease throttle for more responsive updates\r\n        else if (metrics.fps > 55 && throttleThresholdRef.current > 8) {\r\n          throttleThresholdRef.current = Math.max(8, throttleThresholdRef.current * 0.9);\r\n        }\r\n        \r\n        // Reset for next second\r\n        metrics.frameCount = 0;\r\n        metrics.lastFpsCheck = now;\r\n      }\r\n      \r\n      requestAnimationFrame(checkPerformance);\r\n    };\r\n    \r\n    // Start performance monitoring\r\n    const animationId = requestAnimationFrame(checkPerformance);\r\n    \r\n    return () => cancelAnimationFrame(animationId);\r\n  }, []);\r\n  \r\n  // Initialize the global function that the index.html script can use\r\n  useEffect(() => {\r\n    // Create a global function to update the cursor\r\n    window._updateSplineCursor = (x, y) => {\r\n      const splineElement = document.querySelector('spline-viewer');\r\n      if (splineElement) {\r\n        try {\r\n          // Dispatch mouse event\r\n          const event = new MouseEvent('mousemove', {\r\n            bubbles: true,\r\n            cancelable: true,\r\n            view: window,\r\n            clientX: x,\r\n            clientY: y\r\n          });\r\n          splineElement.dispatchEvent(event);\r\n        } catch (e) {\r\n          console.error(\"Error updating Spline cursor:\", e);\r\n        }\r\n      }\r\n    };\r\n    \r\n    return () => {\r\n      // Clean up the global function\r\n      delete window._updateSplineCursor;\r\n    };\r\n  }, []);\r\n  \r\n  return null; // This component doesn't render anything visible\r\n};\r\n\r\nexport default SplineScript; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}