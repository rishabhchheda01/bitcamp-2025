{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nfunction unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape = new Array(rank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n  const outs = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice({\n      inputs: {\n        x: value\n      },\n      attrs: {\n        begin,\n        size\n      },\n      backend\n    });\n  }\n  return outs.map(({\n    dataId,\n    dtype\n  }) => ({\n    dataId,\n    dtype,\n    shape: outShape\n  }));\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'wasm',\n  kernelFunc: unpack\n};","map":{"version":3,"names":["Unpack","slice","unpack","args","inputs","backend","attrs","value","axis","shape","length","numOutputs","rank","outShape","Array","outIndex","i","outs","begin","fill","size","x","map","dataId","dtype","unpackConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {slice} from './Slice';\n\nfunction unpack(\n    args: {inputs: UnpackInputs, backend: BackendWasm, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape: number[] = new Array(rank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n  const outs: TensorInfo[] = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice({inputs: {x: value}, attrs: {begin, size}, backend});\n  }\n  return outs.map(({dataId, dtype}) => ({dataId, dtype, shape: outShape}));\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'wasm',\n  kernelFunc: unpack as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,MAAM,QAAkC,uBAAuB;AAI7G,SAAQC,KAAK,QAAO,SAAS;AAE7B,SAASC,MAAMA,CACXC,IAAsE;EAExE,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAK,CAAC,GAAGH,MAAM;EACtB,IAAI;IAACI;EAAI,CAAC,GAAGF,KAAK;EAElB,IAAIE,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,IAAID,KAAK,CAACE,KAAK,CAACC,MAAM;;EAG5B,MAAMC,UAAU,GAAGJ,KAAK,CAACE,KAAK,CAACD,IAAI,CAAC;EACpC,MAAMI,IAAI,GAAGL,KAAK,CAACE,KAAK,CAACC,MAAM;EAC/B,MAAMG,QAAQ,GAAa,IAAIC,KAAK,CAACF,IAAI,GAAG,CAAC,CAAC;EAC9C,IAAIG,QAAQ,GAAG,CAAC;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;IAC7B,IAAIA,CAAC,KAAKR,IAAI,EAAE;MACdK,QAAQ,CAACE,QAAQ,EAAE,CAAC,GAAGR,KAAK,CAACE,KAAK,CAACO,CAAC,CAAC;;;EAGzC,MAAMC,IAAI,GAAiB,IAAIH,KAAK,CAACH,UAAU,CAAC;EAChD,MAAMO,KAAK,GAAG,IAAIJ,KAAK,CAACF,IAAI,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC;EACrC,MAAMC,IAAI,GAAGb,KAAK,CAACE,KAAK,CAACR,KAAK,EAAE;EAChCmB,IAAI,CAACZ,IAAI,CAAC,GAAG,CAAC;EACd,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACP,MAAM,EAAEM,CAAC,EAAE,EAAE;IACpCE,KAAK,CAACV,IAAI,CAAC,GAAGQ,CAAC;IACfC,IAAI,CAACD,CAAC,CAAC,GAAGf,KAAK,CAAC;MAACG,MAAM,EAAE;QAACiB,CAAC,EAAEd;MAAK,CAAC;MAAED,KAAK,EAAE;QAACY,KAAK;QAAEE;MAAI,CAAC;MAAEf;IAAO,CAAC,CAAC;;EAEtE,OAAOY,IAAI,CAACK,GAAG,CAAC,CAAC;IAACC,MAAM;IAAEC;EAAK,CAAC,MAAM;IAACD,MAAM;IAAEC,KAAK;IAAEf,KAAK,EAAEI;EAAQ,CAAC,CAAC,CAAC;AAC1E;AAEA,OAAO,MAAMY,YAAY,GAAiB;EACxCC,UAAU,EAAE1B,MAAM;EAClB2B,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}