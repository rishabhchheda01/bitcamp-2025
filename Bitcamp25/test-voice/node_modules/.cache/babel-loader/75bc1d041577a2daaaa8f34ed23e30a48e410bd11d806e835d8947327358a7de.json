{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, util } from '@tensorflow/tfjs-core';\nlet wasmSelect;\nfunction setup(backend) {\n  wasmSelect = backend.wasm.cwrap('SelectV2', null, ['number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  const conditionId = backend.dataIdMap.get(condition.dataId).id;\n  const tId = backend.dataIdMap.get(t.dataId).id;\n  const eId = backend.dataIdMap.get(e.dataId).id;\n  const out = backend.makeOutput(t.shape, t.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const cRank = condition.shape.length;\n  const tRank = t.shape.length;\n  const offset = cRank === 0 || cRank > 1 || tRank === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n  wasmSelect(conditionId, tId, eId, offset, outId);\n  return out;\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'wasm',\n  kernelFunc: select,\n  setupFunc: setup\n};","map":{"version":3,"names":["Select","util","wasmSelect","setup","backend","wasm","cwrap","select","args","inputs","condition","t","e","conditionId","dataIdMap","get","dataId","id","tId","eId","out","makeOutput","shape","dtype","outId","cRank","length","tRank","offset","sizeFromShape","slice","selectConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Select.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmSelect: (\n    conditionId: number, tId: number, eId: number, offset: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmSelect = backend.wasm.cwrap('SelectV2', null, [\n    'number',  // conditionId\n    'number',  // tId\n    'number',  // eId\n    'number',  // offset\n    'number',  // outId\n  ]);\n}\n\nfunction select(args: {inputs: SelectInputs, backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const conditionId = backend.dataIdMap.get(condition.dataId).id;\n  const tId = backend.dataIdMap.get(t.dataId).id;\n  const eId = backend.dataIdMap.get(e.dataId).id;\n  const out = backend.makeOutput(t.shape, t.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const cRank = condition.shape.length;\n  const tRank = t.shape.length;\n\n  const offset = cRank === 0 || cRank > 1 || tRank === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  wasmSelect(conditionId, tId, eId, offset, outId);\n  return out;\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'wasm',\n  kernelFunc: select as unknown as KernelFunc,\n  setupFunc: setup\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAM,EAAgBC,IAAI,QAAO,uBAAuB;AAI1F,IAAIC,UAEsB;AAE1B,SAASC,KAAKA,CAACC,OAAoB;EACjCF,UAAU,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,CAChD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASC,MAAMA,CAACC,IAAkD;EAChE,MAAM;IAACC,MAAM;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC9B,MAAM;IAACE,SAAS;IAAEC,CAAC;IAAEC;EAAC,CAAC,GAAGH,MAAM;EAEhC,MAAMI,WAAW,GAAGT,OAAO,CAACU,SAAS,CAACC,GAAG,CAACL,SAAS,CAACM,MAAM,CAAC,CAACC,EAAE;EAC9D,MAAMC,GAAG,GAAGd,OAAO,CAACU,SAAS,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC,CAACC,EAAE;EAC9C,MAAME,GAAG,GAAGf,OAAO,CAACU,SAAS,CAACC,GAAG,CAACH,CAAC,CAACI,MAAM,CAAC,CAACC,EAAE;EAC9C,MAAMG,GAAG,GAAGhB,OAAO,CAACiB,UAAU,CAACV,CAAC,CAACW,KAAK,EAAEX,CAAC,CAACY,KAAK,CAAC;EAChD,MAAMC,KAAK,GAAGpB,OAAO,CAACU,SAAS,CAACC,GAAG,CAACK,GAAG,CAACJ,MAAM,CAAC,CAACC,EAAE;EAElD,MAAMQ,KAAK,GAAGf,SAAS,CAACY,KAAK,CAACI,MAAM;EACpC,MAAMC,KAAK,GAAGhB,CAAC,CAACW,KAAK,CAACI,MAAM;EAE5B,MAAME,MAAM,GAAGH,KAAK,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIE,KAAK,KAAK,CAAC,GAClD,CAAC,GACD1B,IAAI,CAAC4B,aAAa,CAAClB,CAAC,CAACW,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;EAExC5B,UAAU,CAACW,WAAW,EAAEK,GAAG,EAAEC,GAAG,EAAES,MAAM,EAAEJ,KAAK,CAAC;EAChD,OAAOJ,GAAG;AACZ;AAEA,OAAO,MAAMW,YAAY,GAAiB;EACxCC,UAAU,EAAEhC,MAAM;EAClBiC,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAE3B,MAA+B;EAC3C4B,SAAS,EAAEhC;CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}