{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmDiag;\nfunction setup(backend) {\n  wasmDiag = backend.wasm.cwrap('Diag', null, ['number', 'number', 'number', 'number' // outId\n  ]);\n}\nexport function diag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xSize = util.sizeFromShape(x.shape);\n  const out = backend.makeOutput([...x.shape, ...x.shape], x.dtype);\n  wasmDiag(backend.dataIdMap.get(x.dataId).id, CppDType[x.dtype], xSize, backend.dataIdMap.get(out.dataId).id);\n  return out;\n}\nexport const diagConfig = {\n  kernelName: Diag,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: diag\n};","map":{"version":3,"names":["Diag","util","CppDType","wasmDiag","setup","backend","wasm","cwrap","diag","args","inputs","x","xSize","sizeFromShape","shape","out","makeOutput","dtype","dataIdMap","get","dataId","id","diagConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Diag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmDiag: (xId: number, xDType: CppDType, xSize: number, outId: number) =>\n    void;\n\nfunction setup(backend: BackendWasm) {\n  wasmDiag = backend.wasm.cwrap('Diag', null, [\n    'number',  // xId\n    'number',  // xDType,\n    'number',  // xSize,\n    'number',  // outId\n  ]);\n}\n\nexport function diag(args: {inputs: DiagInputs, backend: BackendWasm}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const out = backend.makeOutput([...x.shape, ...x.shape], x.dtype);\n\n  wasmDiag(\n      backend.dataIdMap.get(x.dataId).id, CppDType[x.dtype], xSize,\n      backend.dataIdMap.get(out.dataId).id);\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: diag as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,EAAoDC,IAAI,QAAO,uBAAuB;AAIlG,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,QACI;AAER,SAASC,KAAKA,CAACC,OAAoB;EACjCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,CAC1C,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUC,IAAIA,CAACC,IAAgD;EAEnE,MAAM;IAACC,MAAM;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC9B,MAAM;IAACE;EAAC,CAAC,GAAGD,MAAM;EAElB,MAAME,KAAK,GAAGX,IAAI,CAACY,aAAa,CAACF,CAAC,CAACG,KAAK,CAAC;EACzC,MAAMC,GAAG,GAAGV,OAAO,CAACW,UAAU,CAAC,CAAC,GAAGL,CAAC,CAACG,KAAK,EAAE,GAAGH,CAAC,CAACG,KAAK,CAAC,EAAEH,CAAC,CAACM,KAAK,CAAC;EAEjEd,QAAQ,CACJE,OAAO,CAACa,SAAS,CAACC,GAAG,CAACR,CAAC,CAACS,MAAM,CAAC,CAACC,EAAE,EAAEnB,QAAQ,CAACS,CAAC,CAACM,KAAK,CAAC,EAAEL,KAAK,EAC5DP,OAAO,CAACa,SAAS,CAACC,GAAG,CAACJ,GAAG,CAACK,MAAM,CAAC,CAACC,EAAE,CAAC;EACzC,OAAON,GAAG;AACZ;AAEA,OAAO,MAAMO,UAAU,GAAiB;EACtCC,UAAU,EAAEvB,IAAI;EAChBwB,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAErB,KAAK;EAChBsB,UAAU,EAAElB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}