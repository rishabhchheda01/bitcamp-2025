{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(AddN, null /* void */, ['array', 'number', 'number', 'number' // out_id\n  ]);\n}\nfunction addn(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n  const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n  return out;\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: addn\n};","map":{"version":3,"names":["AddN","util","CppDType","wasmFunc","setupFunc","backend","wasm","cwrap","addn","args","inputs","out","makeOutput","shape","dtype","sizeFromShape","inputIds","map","x","dataIdMap","get","dataId","id","inputIdsBytes","Uint8Array","Int32Array","buffer","outId","length","addNConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\AddN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmFunc:\n    (inputIds: Uint8Array, inputIdsLen: number, dtype: number, outId: number) =>\n        void;\n\nfunction setupFunc(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(AddN, null /* void */, [\n    'array',   // input_ids\n    'number',  // input_ids.length\n    'number',  // dtype\n    'number',  // out_id\n  ]);\n}\n\nfunction addn(args: {inputs: TensorInfo[], backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);\n\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n\n  return out;\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: addn as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,EAAwCC,IAAI,QAAO,uBAAuB;AAItF,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,QAEQ;AAEZ,SAASC,SAASA,CAACC,OAAoB;EACrCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,IAAI,EAAE,IAAI,CAAC,YAAY,CACnD,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASQ,IAAIA,CAACC,IAAkD;EAC9D,MAAM;IAACC,MAAM;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC9B,MAAME,GAAG,GAAGN,OAAO,CAACO,UAAU,CAACF,MAAM,CAAC,CAAC,CAAC,CAACG,KAAK,EAAEH,MAAM,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC;EAEhE;EACA,IAAIb,IAAI,CAACc,aAAa,CAACJ,GAAG,CAACE,KAAK,CAAC,KAAK,CAAC,EAAE;IACvC,OAAOF,GAAG;;EAGZ,MAAMK,QAAQ,GAAGN,MAAM,CAACO,GAAG,CAACC,CAAC,IAAIb,OAAO,CAACc,SAAS,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,EAAE,CAAC;EACpE,MAAMC,aAAa,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACT,QAAQ,CAAC,CAACU,MAAM,CAAC;EACrE,MAAMC,KAAK,GAAGtB,OAAO,CAACc,SAAS,CAACC,GAAG,CAACT,GAAG,CAACU,MAAM,CAAC,CAACC,EAAE;EAClDnB,QAAQ,CAACoB,aAAa,EAAEP,QAAQ,CAACY,MAAM,EAAE1B,QAAQ,CAACS,GAAG,CAACG,KAAK,CAAC,EAAEa,KAAK,CAAC;EAEpE,OAAOhB,GAAG;AACZ;AAEA,OAAO,MAAMkB,UAAU,GAAiB;EACtCC,UAAU,EAAE9B,IAAI;EAChB+B,WAAW,EAAE,MAAM;EACnB3B,SAAS;EACT4B,UAAU,EAAExB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}