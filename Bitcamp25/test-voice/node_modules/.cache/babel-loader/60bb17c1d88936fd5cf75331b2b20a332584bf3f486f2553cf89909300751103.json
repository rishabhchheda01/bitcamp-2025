{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmDilation2D;\nfunction setup(backend) {\n  wasmDilation2D = backend.wasm.cwrap(Dilation2D, null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // padLeft\n  ]);\n}\nexport function dilation2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  if (x.dtype !== filter.dtype) {\n    throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${x.dtype} and ${filter.dtype}`);\n  }\n  const dilationInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, /*dataFormat=*/'NHWC', dilations);\n  const out = backend.makeOutput(dilationInfo.outShape, x.dtype);\n  wasmDilation2D(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(out.dataId).id, CppDType[x.dtype], dilationInfo.batchSize, /*depth=*/dilationInfo.inChannels, dilationInfo.inHeight, dilationInfo.inWidth, dilationInfo.outHeight, dilationInfo.outWidth, dilationInfo.strideHeight, dilationInfo.strideWidth, dilationInfo.dilationHeight, dilationInfo.dilationWidth, dilationInfo.filterHeight, dilationInfo.filterWidth, dilationInfo.padInfo.top, dilationInfo.padInfo.left);\n  return out;\n}\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: dilation2D\n};","map":{"version":3,"names":["backend_util","Dilation2D","CppDType","wasmDilation2D","setup","backend","wasm","cwrap","dilation2D","args","inputs","attrs","x","filter","strides","pad","dilations","dtype","Error","dilationInfo","computeDilation2DInfo","shape","out","makeOutput","outShape","dataIdMap","get","dataId","id","batchSize","inChannels","inHeight","inWidth","outHeight","outWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","filterHeight","filterWidth","padInfo","top","left","dilation2DConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Dilation2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {CppDType} from './types';\n\nlet wasmDilation2D: (\n    xId: number, filterId: number, outId: number, dtype: number, batch: number,\n    depth: number, inHeight: number, inWidth: number, outHeight: number,\n    outWidth: number, strideHeight: number, strideWidth: number,\n    dilationHeight: number, dilationWidth: number, filterHeight: number,\n    filterWidth: number, padTop: number, padLeft: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmDilation2D = backend.wasm.cwrap(Dilation2D, null, [\n    'number',  // xId\n    'number',  // filterId\n    'number',  // outId\n    'number',  // dtype\n    'number',  // batch\n    'number',  // depth\n    'number',  // inHeight\n    'number',  // inWidth\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // padTop\n    'number',  // padLeft\n  ]);\n}\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  if (x.dtype !== filter.dtype) {\n    throw new Error(\n        `Dilation2D error: x must have the same dtype as filter. Got ${\n            x.dtype} and ${filter.dtype}`);\n  }\n\n  const dilationInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      /*dataFormat=*/'NHWC', dilations);\n\n  const out = backend.makeOutput(dilationInfo.outShape, x.dtype);\n\n  wasmDilation2D(\n      backend.dataIdMap.get(x.dataId).id,\n      backend.dataIdMap.get(filter.dataId).id,\n      backend.dataIdMap.get(out.dataId).id,\n      CppDType[x.dtype],\n      dilationInfo.batchSize,\n      /*depth=*/dilationInfo.inChannels,\n      dilationInfo.inHeight,\n      dilationInfo.inWidth,\n      dilationInfo.outHeight,\n      dilationInfo.outWidth,\n      dilationInfo.strideHeight,\n      dilationInfo.strideWidth,\n      dilationInfo.dilationHeight,\n      dilationInfo.dilationWidth,\n      dilationInfo.filterHeight,\n      dilationInfo.filterWidth,\n      dilationInfo.padInfo.top,\n      dilationInfo.padInfo.left,\n  );\n  return out;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: dilation2D as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,UAAU,QAAgF,uBAAuB;AAGvI,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,cAK6D;AAEjE,SAASC,KAAKA,CAACC,OAAoB;EACjCF,cAAc,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,UAAU,EAAE,IAAI,EAAE,CACpD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUO,UAAUA,CAACC,IAI1B;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,CAAC;IAAEC;EAAM,CAAC,GAAGH,MAAM;EAC1B,MAAM;IAACI,OAAO;IAAEC,GAAG;IAAEC;EAAS,CAAC,GAAGL,KAAK;EAEvC,IAAIC,CAAC,CAACK,KAAK,KAAKJ,MAAM,CAACI,KAAK,EAAE;IAC5B,MAAM,IAAIC,KAAK,CACX,+DACIN,CAAC,CAACK,KAAK,QAAQJ,MAAM,CAACI,KAAK,EAAE,CAAC;;EAGxC,MAAME,YAAY,GAAGnB,YAAY,CAACoB,qBAAqB,CACnDR,CAAC,CAACS,KAAyC,EAC3CR,MAAM,CAACQ,KAAiC,EAAEP,OAAO,EAAEC,GAAG,EACtD,eAAe,MAAM,EAAEC,SAAS,CAAC;EAErC,MAAMM,GAAG,GAAGjB,OAAO,CAACkB,UAAU,CAACJ,YAAY,CAACK,QAAQ,EAAEZ,CAAC,CAACK,KAAK,CAAC;EAE9Dd,cAAc,CACVE,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACd,CAAC,CAACe,MAAM,CAAC,CAACC,EAAE,EAClCvB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACb,MAAM,CAACc,MAAM,CAAC,CAACC,EAAE,EACvCvB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACJ,GAAG,CAACK,MAAM,CAAC,CAACC,EAAE,EACpC1B,QAAQ,CAACU,CAAC,CAACK,KAAK,CAAC,EACjBE,YAAY,CAACU,SAAS,EACtB,UAAUV,YAAY,CAACW,UAAU,EACjCX,YAAY,CAACY,QAAQ,EACrBZ,YAAY,CAACa,OAAO,EACpBb,YAAY,CAACc,SAAS,EACtBd,YAAY,CAACe,QAAQ,EACrBf,YAAY,CAACgB,YAAY,EACzBhB,YAAY,CAACiB,WAAW,EACxBjB,YAAY,CAACkB,cAAc,EAC3BlB,YAAY,CAACmB,aAAa,EAC1BnB,YAAY,CAACoB,YAAY,EACzBpB,YAAY,CAACqB,WAAW,EACxBrB,YAAY,CAACsB,OAAO,CAACC,GAAG,EACxBvB,YAAY,CAACsB,OAAO,CAACE,IAAI,CAC5B;EACD,OAAOrB,GAAG;AACZ;AAEA,OAAO,MAAMsB,gBAAgB,GAAiB;EAC5CC,UAAU,EAAE5C,UAAU;EACtB6C,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE3C,KAAK;EAChB4C,UAAU,EAAExC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}