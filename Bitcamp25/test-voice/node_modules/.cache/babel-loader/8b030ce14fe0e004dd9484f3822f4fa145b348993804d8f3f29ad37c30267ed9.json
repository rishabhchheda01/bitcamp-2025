{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kheri\\\\Downloads\\\\Bitcamp\\\\bitcamp-2025\\\\Bitcamp25\\\\test-voice\\\\src\\\\FaceDirectionComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport \"@tensorflow/tfjs\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@mediapipe/face_mesh\";\nimport Webcam from \"react-webcam\";\nimport FaceDirectionDetector from \"./face_detection/FaceDirectionDetector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputResolution = {\n  width: 640,\n  height: 480\n};\nconst videoConstraints = {\n  width: inputResolution.width,\n  height: inputResolution.height,\n  facingMode: \"user\"\n};\nfunction FaceDirectionComponent() {\n  _s();\n  const canvasRef = useRef(null);\n  const webcamRef = useRef(null);\n  const [loaded, setLoaded] = useState(false);\n  const [detector, setDetector] = useState(null);\n  const [faceData, setFaceData] = useState({\n    position: {\n      x: 0,\n      y: 0\n    },\n    direction: {\n      yaw: 0,\n      turn: 0\n    },\n    horizontalDirection: \"center\",\n    verticalDirection: \"center\"\n  });\n  const lastDirectionRef = useRef({\n    horizontal: \"center\",\n    vertical: \"center\"\n  });\n  const keyPressTimerRef = useRef({\n    horizontal: null,\n    vertical: null\n  });\n\n  // Initialize the detector\n  useEffect(() => {\n    const initializeDetector = async () => {\n      const options = {\n        showMesh: false,\n        showTagNumbers: false,\n        showDirection: false\n      };\n      const faceDetector = new FaceDirectionDetector(options);\n      setDetector(faceDetector);\n    };\n    initializeDetector();\n\n    // Cleanup on unmount\n    return () => {\n      if (detector) {\n        detector.stop();\n      }\n      // Clear any active timers\n      if (keyPressTimerRef.current.horizontal) {\n        clearInterval(keyPressTimerRef.current.horizontal);\n      }\n      if (keyPressTimerRef.current.vertical) {\n        clearInterval(keyPressTimerRef.current.vertical);\n      }\n    };\n  }, []);\n\n  // Determine horizontal direction based on x coordinate\n  const determineHorizontalDirection = x => {\n    if (x < 250) {\n      return \"left\";\n    } else if (x > 450) {\n      return \"right\";\n    } else {\n      return \"center\";\n    }\n  };\n\n  // Determine vertical direction based on y coordinate\n  const determineVerticalDirection = y => {\n    if (y < 200) {\n      return \"up\";\n    } else if (y > 350) {\n      return \"down\";\n    } else {\n      return \"center\";\n    }\n  };\n\n  // Simulate keyboard press\n  const simulateKeyPress = key => {\n    try {\n      // Create keydown event\n      const keyDownEvent = new KeyboardEvent('keydown', {\n        key: key,\n        code: `Key${key.toUpperCase()}`,\n        keyCode: key.charCodeAt(0),\n        which: key.charCodeAt(0),\n        bubbles: true,\n        cancelable: true\n      });\n\n      // Dispatch the event\n      document.dispatchEvent(keyDownEvent);\n\n      // Log the key press\n      console.log(`Key ${key} pressed based on face direction`);\n\n      // Create and dispatch keyup event after a short delay\n      setTimeout(() => {\n        const keyUpEvent = new KeyboardEvent('keyup', {\n          key: key,\n          code: `Key${key.toUpperCase()}`,\n          keyCode: key.charCodeAt(0),\n          which: key.charCodeAt(0),\n          bubbles: true,\n          cancelable: true\n        });\n        document.dispatchEvent(keyUpEvent);\n      }, 100);\n    } catch (error) {\n      console.error(\"Error simulating key press:\", error);\n    }\n  };\n\n  // Handle direction changes and trigger key presses\n  const handleDirectionChanges = () => {\n    // Check if we have any direction to handle\n    const horizontalDir = faceData.horizontalDirection;\n    const verticalDir = faceData.verticalDirection;\n\n    // Store current directions to ref for next comparison\n    lastDirectionRef.current = {\n      horizontal: horizontalDir,\n      vertical: verticalDir\n    };\n\n    // Handle horizontal direction changes\n    if (horizontalDir !== lastDirectionRef.current.horizontal) {\n      // Clear existing horizontal timer\n      if (keyPressTimerRef.current.horizontal) {\n        clearInterval(keyPressTimerRef.current.horizontal);\n        keyPressTimerRef.current.horizontal = null;\n      }\n\n      // If not center, start pressing the corresponding key\n      if (horizontalDir !== \"center\") {\n        const horizontalKey = horizontalDir === \"left\" ? 'l' : 'r';\n        simulateKeyPress(horizontalKey);\n        keyPressTimerRef.current.horizontal = setInterval(() => {\n          simulateKeyPress(horizontalKey);\n        }, 300);\n      }\n    }\n\n    // Handle vertical direction changes\n    if (verticalDir !== lastDirectionRef.current.vertical) {\n      // Clear existing vertical timer\n      if (keyPressTimerRef.current.vertical) {\n        clearInterval(keyPressTimerRef.current.vertical);\n        keyPressTimerRef.current.vertical = null;\n      }\n\n      // If not center, start pressing the corresponding key\n      if (verticalDir !== \"center\") {\n        const verticalKey = verticalDir === \"up\" ? 'u' : 'd';\n        simulateKeyPress(verticalKey);\n        keyPressTimerRef.current.vertical = setInterval(() => {\n          simulateKeyPress(verticalKey);\n        }, 300);\n      }\n    }\n  };\n\n  // Effect to handle direction changes and trigger key presses\n  useEffect(() => {\n    // Check if either direction has changed\n    if (faceData.horizontalDirection !== lastDirectionRef.current.horizontal || faceData.verticalDirection !== lastDirectionRef.current.vertical) {\n      handleDirectionChanges();\n    }\n  }, [faceData.horizontalDirection, faceData.verticalDirection]);\n\n  // Handle video load\n  const handleVideoLoad = async videoNode => {\n    const video = videoNode.target;\n    if (video.readyState !== 4) return;\n    if (loaded) return;\n    if (detector && webcamRef.current && canvasRef.current) {\n      await detector.start(webcamRef.current.video, canvasRef.current, data => {\n        // Update face data when detection occurs\n        if (data && data.keypoints && data.keypoints[1]) {\n          const x = Math.round(data.keypoints[1].x);\n          const y = Math.round(data.keypoints[1].y);\n          const horizontalDirection = determineHorizontalDirection(x);\n          const verticalDirection = determineVerticalDirection(y);\n          setFaceData({\n            position: {\n              x,\n              y\n            },\n            direction: {\n              yaw: Math.round(data.yaw || 0),\n              turn: Math.round(data.turn || 0)\n            },\n            horizontalDirection,\n            verticalDirection\n          });\n        }\n      });\n      setLoaded(true);\n    }\n  };\n\n  // Helper function to get active key display text\n  const getActiveKeyText = () => {\n    const {\n      horizontalDirection,\n      verticalDirection\n    } = faceData;\n    const hasHorizontal = horizontalDirection !== \"center\";\n    const hasVertical = verticalDirection !== \"center\";\n    let keyText = [];\n    if (hasHorizontal) {\n      keyText.push(horizontalDirection === \"left\" ? \"'l'\" : \"'r'\");\n    }\n    if (hasVertical) {\n      keyText.push(verticalDirection === \"up\" ? \"'u'\" : \"'d'\");\n    }\n    if (keyText.length > 0) {\n      return `(pressing ${keyText.join(\" & \")})`;\n    } else {\n      return \"(no key press)\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        visibility: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        width: inputResolution.width,\n        height: inputResolution.height,\n        videoConstraints: videoConstraints,\n        onLoadedData: handleVideoLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: inputResolution.width,\n        height: inputResolution.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        bottom: \"20px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n        color: \"#00f2fe\",\n        padding: \"8px 16px\",\n        borderRadius: \"8px\",\n        fontFamily: \"monospace\",\n        fontSize: \"14px\",\n        zIndex: 1000,\n        display: \"flex\",\n        gap: \"16px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Position: x=\", faceData.position.x, \", y=\", faceData.position.y]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Direction: H:\", faceData.horizontalDirection.toUpperCase(), \" V:\", faceData.verticalDirection.toUpperCase(), \" \", getActiveKeyText()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Angles: yaw=\", faceData.direction.yaw, \"\\xB0, turn=\", faceData.direction.turn, \"\\xB0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_s(FaceDirectionComponent, \"kv9TYnwr55aIqfvIvyrjziW4VLQ=\");\n_c = FaceDirectionComponent;\nexport default FaceDirectionComponent;\nvar _c;\n$RefreshReg$(_c, \"FaceDirectionComponent\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Webcam","FaceDirectionDetector","jsxDEV","_jsxDEV","inputResolution","width","height","videoConstraints","facingMode","FaceDirectionComponent","_s","canvasRef","webcamRef","loaded","setLoaded","detector","setDetector","faceData","setFaceData","position","x","y","direction","yaw","turn","horizontalDirection","verticalDirection","lastDirectionRef","horizontal","vertical","keyPressTimerRef","initializeDetector","options","showMesh","showTagNumbers","showDirection","faceDetector","stop","current","clearInterval","determineHorizontalDirection","determineVerticalDirection","simulateKeyPress","key","keyDownEvent","KeyboardEvent","code","toUpperCase","keyCode","charCodeAt","which","bubbles","cancelable","document","dispatchEvent","console","log","setTimeout","keyUpEvent","error","handleDirectionChanges","horizontalDir","verticalDir","horizontalKey","setInterval","verticalKey","handleVideoLoad","videoNode","video","target","readyState","start","data","keypoints","Math","round","getActiveKeyText","hasHorizontal","hasVertical","keyText","push","length","join","children","style","visibility","ref","onLoadedData","fileName","_jsxFileName","lineNumber","columnNumber","bottom","left","transform","backgroundColor","color","padding","borderRadius","fontFamily","fontSize","zIndex","display","gap","_c","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/FaceDirectionComponent.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport \"@tensorflow/tfjs\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport \"@mediapipe/face_mesh\";\nimport Webcam from \"react-webcam\";\nimport FaceDirectionDetector from \"./face_detection/FaceDirectionDetector\";\n\nconst inputResolution = {\n  width: 640,\n  height: 480,\n};\n\nconst videoConstraints = {\n  width: inputResolution.width,\n  height: inputResolution.height,\n  facingMode: \"user\",\n};\n\nfunction FaceDirectionComponent() {\n  const canvasRef = useRef(null);\n  const webcamRef = useRef(null);\n  const [loaded, setLoaded] = useState(false);\n  const [detector, setDetector] = useState(null);\n  const [faceData, setFaceData] = useState({\n    position: { x: 0, y: 0 },\n    direction: { yaw: 0, turn: 0 },\n    horizontalDirection: \"center\",\n    verticalDirection: \"center\"\n  });\n  const lastDirectionRef = useRef({ horizontal: \"center\", vertical: \"center\" });\n  const keyPressTimerRef = useRef({\n    horizontal: null,\n    vertical: null\n  });\n\n  // Initialize the detector\n  useEffect(() => {\n    const initializeDetector = async () => {\n      const options = {\n        showMesh: false,\n        showTagNumbers: false,\n        showDirection: false\n      };\n      const faceDetector = new FaceDirectionDetector(options);\n      setDetector(faceDetector);\n    };\n\n    initializeDetector();\n\n    // Cleanup on unmount\n    return () => {\n      if (detector) {\n        detector.stop();\n      }\n      // Clear any active timers\n      if (keyPressTimerRef.current.horizontal) {\n        clearInterval(keyPressTimerRef.current.horizontal);\n      }\n      if (keyPressTimerRef.current.vertical) {\n        clearInterval(keyPressTimerRef.current.vertical);\n      }\n    };\n  }, []);\n\n  // Determine horizontal direction based on x coordinate\n  const determineHorizontalDirection = (x) => {\n    if (x < 250) {\n      return \"left\";\n    } else if (x > 450) {\n      return \"right\";\n    } else {\n      return \"center\";\n    }\n  };\n\n  // Determine vertical direction based on y coordinate\n  const determineVerticalDirection = (y) => {\n    if (y < 200) {\n      return \"up\";\n    } else if (y > 350) {\n      return \"down\";\n    } else {\n      return \"center\";\n    }\n  };\n\n  // Simulate keyboard press\n  const simulateKeyPress = (key) => {\n    try {\n      // Create keydown event\n      const keyDownEvent = new KeyboardEvent('keydown', {\n        key: key,\n        code: `Key${key.toUpperCase()}`,\n        keyCode: key.charCodeAt(0),\n        which: key.charCodeAt(0),\n        bubbles: true,\n        cancelable: true\n      });\n      \n      // Dispatch the event\n      document.dispatchEvent(keyDownEvent);\n      \n      // Log the key press\n      console.log(`Key ${key} pressed based on face direction`);\n      \n      // Create and dispatch keyup event after a short delay\n      setTimeout(() => {\n        const keyUpEvent = new KeyboardEvent('keyup', {\n          key: key,\n          code: `Key${key.toUpperCase()}`,\n          keyCode: key.charCodeAt(0),\n          which: key.charCodeAt(0),\n          bubbles: true,\n          cancelable: true\n        });\n        document.dispatchEvent(keyUpEvent);\n      }, 100);\n    } catch (error) {\n      console.error(\"Error simulating key press:\", error);\n    }\n  };\n\n  // Handle direction changes and trigger key presses\n  const handleDirectionChanges = () => {\n    // Check if we have any direction to handle\n    const horizontalDir = faceData.horizontalDirection;\n    const verticalDir = faceData.verticalDirection;\n    \n    // Store current directions to ref for next comparison\n    lastDirectionRef.current = {\n      horizontal: horizontalDir,\n      vertical: verticalDir\n    };\n    \n    // Handle horizontal direction changes\n    if (horizontalDir !== lastDirectionRef.current.horizontal) {\n      // Clear existing horizontal timer\n      if (keyPressTimerRef.current.horizontal) {\n        clearInterval(keyPressTimerRef.current.horizontal);\n        keyPressTimerRef.current.horizontal = null;\n      }\n      \n      // If not center, start pressing the corresponding key\n      if (horizontalDir !== \"center\") {\n        const horizontalKey = horizontalDir === \"left\" ? 'l' : 'r';\n        simulateKeyPress(horizontalKey);\n        \n        keyPressTimerRef.current.horizontal = setInterval(() => {\n          simulateKeyPress(horizontalKey);\n        }, 300);\n      }\n    }\n    \n    // Handle vertical direction changes\n    if (verticalDir !== lastDirectionRef.current.vertical) {\n      // Clear existing vertical timer\n      if (keyPressTimerRef.current.vertical) {\n        clearInterval(keyPressTimerRef.current.vertical);\n        keyPressTimerRef.current.vertical = null;\n      }\n      \n      // If not center, start pressing the corresponding key\n      if (verticalDir !== \"center\") {\n        const verticalKey = verticalDir === \"up\" ? 'u' : 'd';\n        simulateKeyPress(verticalKey);\n        \n        keyPressTimerRef.current.vertical = setInterval(() => {\n          simulateKeyPress(verticalKey);\n        }, 300);\n      }\n    }\n  };\n\n  // Effect to handle direction changes and trigger key presses\n  useEffect(() => {\n    // Check if either direction has changed\n    if (faceData.horizontalDirection !== lastDirectionRef.current.horizontal || \n        faceData.verticalDirection !== lastDirectionRef.current.vertical) {\n      \n      handleDirectionChanges();\n    }\n  }, [faceData.horizontalDirection, faceData.verticalDirection]);\n\n  // Handle video load\n  const handleVideoLoad = async (videoNode) => {\n    const video = videoNode.target;\n    if (video.readyState !== 4) return;\n    if (loaded) return;\n\n    if (detector && webcamRef.current && canvasRef.current) {\n      await detector.start(\n        webcamRef.current.video, \n        canvasRef.current, \n        (data) => {\n          // Update face data when detection occurs\n          if (data && data.keypoints && data.keypoints[1]) {\n            const x = Math.round(data.keypoints[1].x);\n            const y = Math.round(data.keypoints[1].y);\n            const horizontalDirection = determineHorizontalDirection(x);\n            const verticalDirection = determineVerticalDirection(y);\n            \n            setFaceData({\n              position: { x, y },\n              direction: {\n                yaw: Math.round(data.yaw || 0),\n                turn: Math.round(data.turn || 0)\n              },\n              horizontalDirection,\n              verticalDirection\n            });\n          }\n        }\n      );\n      setLoaded(true);\n    }\n  };\n\n  // Helper function to get active key display text\n  const getActiveKeyText = () => {\n    const { horizontalDirection, verticalDirection } = faceData;\n    const hasHorizontal = horizontalDirection !== \"center\";\n    const hasVertical = verticalDirection !== \"center\";\n    \n    let keyText = [];\n    \n    if (hasHorizontal) {\n      keyText.push(horizontalDirection === \"left\" ? \"'l'\" : \"'r'\");\n    }\n    \n    if (hasVertical) {\n      keyText.push(verticalDirection === \"up\" ? \"'u'\" : \"'d'\");\n    }\n    \n    if (keyText.length > 0) {\n      return `(pressing ${keyText.join(\" & \")})`;\n    } else {\n      return \"(no key press)\";\n    }\n  };\n\n  return (\n    <div>\n      {/* Hidden webcam and canvas for detection */}\n      <div style={{ position: \"absolute\", visibility: \"hidden\" }}>\n        <Webcam\n          ref={webcamRef}\n          width={inputResolution.width}\n          height={inputResolution.height}\n          videoConstraints={videoConstraints}\n          onLoadedData={handleVideoLoad}\n        />\n        \n        <canvas\n          ref={canvasRef}\n          width={inputResolution.width}\n          height={inputResolution.height}\n        />\n      </div>\n\n      {/* Simple display of face data */}\n      <div style={{ \n        position: \"fixed\", \n        bottom: \"20px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n        color: \"#00f2fe\",\n        padding: \"8px 16px\",\n        borderRadius: \"8px\",\n        fontFamily: \"monospace\",\n        fontSize: \"14px\",\n        zIndex: 1000,\n        display: \"flex\",\n        gap: \"16px\"\n      }}>\n        <div>\n          Position: x={faceData.position.x}, y={faceData.position.y}\n        </div>\n        <div>\n          Direction: H:{faceData.horizontalDirection.toUpperCase()} V:{faceData.verticalDirection.toUpperCase()} {getActiveKeyText()}\n        </div>\n        <div>\n          Angles: yaw={faceData.direction.yaw}°, turn={faceData.direction.turn}°\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FaceDirectionComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}