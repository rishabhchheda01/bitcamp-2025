{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nlet wasmDepthwiseConv2d;\nfunction setup(backend) {\n  wasmDepthwiseConv2d = backend.wasm.cwrap(DepthwiseConv2dNative, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction depthwiseConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const $dilations = dilations == null ? [1, 1] : dilations;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthwiseConv2d\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNative","wasmDepthwiseConv2d","setup","backend","wasm","cwrap","depthwiseConv2d","args","inputs","attrs","x","filter","xId","dataIdMap","get","dataId","id","filterId","strides","dilations","pad","dimRoundingMode","$dilations","convInfo","computeConv2DInfo","shape","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","dilationHeight","dilationWidth","strideHeight","strideWidth","inputChannels","inChannels","outputChannels","outChannels","isSamePad","type","dataFormat","Error","out","makeOutput","outShape","outId","depthwiseConv2dNativeConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\DepthwiseConv2dNative.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmDepthwiseConv2d: (\n    xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n    filterId: number, filterHeight: number, filterWidth: number, padTop: number,\n    padRight: number, padBottom: number, padLeft: number, isSamePad: number,\n    dilationHeight: number, dilationWidth: number, strideHeight: number,\n    strideWidth: number, inputChannels: number, outputChannels: number,\n    outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmDepthwiseConv2d =\n      backend.wasm.cwrap(DepthwiseConv2dNative, null /* void */, [\n        'number',  // xId\n        'number',  // batchSize\n        'number',  // inputHeight\n        'number',  // inputWidth\n        'number',  // filterId\n        'number',  // filterHeight\n        'number',  // filterWidth\n        'number',  // padTop\n        'number',  // padRight\n        'number',  // padBottom\n        'number',  // padLeft\n        'number',  // isSamePad\n        'number',  // dilationHeight\n        'number',  // dilationWidth\n        'number',  // strideHeight\n        'number',  // strideWidth\n        'number',  // inputChannels\n        'number',  // outputChannels\n        'number',  // outId\n      ]);\n}\n\nfunction depthwiseConv2d(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: BackendWasm,\n  attrs: DepthwiseConv2dNativeAttrs\n}) {\n  const {inputs, attrs, backend} = args;\n\n  const {x, filter} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n\n  const {strides, dilations, pad, dimRoundingMode} = attrs;\n\n  const $dilations = dilations == null ? [1, 1] : dilations;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      (x as Tensor4D).shape, (filter as Tensor4D).shape, strides,\n      ($dilations as number | [number, number]), pad, dimRoundingMode,\n      true /* depthwise */);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(\n        `wasm backend DepthwiseConv2dNative does not support dataFormat:'` +\n        `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(\n      xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight,\n      filterWidth, padTop, padRight, padBottom, padLeft, isSamePad,\n      dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels,\n      outputChannels, outId);\n  return out;\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthwiseConv2d as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}