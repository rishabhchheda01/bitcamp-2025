{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform, util } from '@tensorflow/tfjs-core';\nlet wasmTransform;\nfunction setup(backend) {\n  wasmTransform = backend.wasm.cwrap(Transform, null /*void*/, ['number', 'number', 'bool', 'number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'array', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction transform(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    image,\n    transforms\n  } = inputs;\n  const {\n    interpolation,\n    fillMode,\n    fillValue,\n    outputShape\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const inputStrides = new Uint8Array(new Int32Array(util.computeStrides(image.shape)).buffer);\n  const outputStrides = new Uint8Array(new Int32Array(util.computeStrides(outShape)).buffer);\n  const out = backend.makeOutput(outShape, image.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const imageData = backend.dataIdMap.get(image.dataId);\n  const imageId = imageData.id;\n  const transformsData = backend.dataIdMap.get(transforms.dataId);\n  const transformsId = transformsData.id;\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  wasmTransform(imageId, transformsId, transforms.shape[0] > 1, batch, outHeight, outWidth, numChannels, imageWidth, imageHeight, inputStrides, image.shape.length - 1, outputStrides, outShape.length - 1, interpolationModeId, fillModeId, fillValue, outId);\n  return out;\n}\nexport const transformConfig = {\n  kernelName: Transform,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: transform\n};","map":{"version":3,"names":["Transform","util","wasmTransform","setup","backend","wasm","cwrap","transform","args","inputs","attrs","image","transforms","interpolation","fillMode","fillValue","outputShape","batch","imageHeight","imageWidth","numChannels","shape","outHeight","outWidth","outShape","inputStrides","Uint8Array","Int32Array","computeStrides","buffer","outputStrides","out","makeOutput","dtype","outId","dataIdMap","get","dataId","id","imageData","imageId","transformsData","transformsId","interpolationModeId","fillModeId","length","transformConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Transform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmTransform: (\n    imageId: number, transformsId: number, isBatchTransform: boolean,\n    batch: number, outHeight: number, outWidth: number, numChannels: number,\n    imageWidth: number, imageHeight: number, inputStrides: Uint8Array,\n    inputStridesLength: number, outputStrides: Uint8Array,\n    outputStridesLength: number, interpolationModeId: number,\n    fillModeId: number, fillValue: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmTransform = backend.wasm.cwrap(Transform, null /*void*/, [\n    'number',  // imageId\n    'number',  // transformsId\n    'bool',    // isBatchTransform\n    'number',  // batch\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // numChannels\n    'number',  // imageWidth\n    'number',  // imageHeight\n    'array',   // inputStrides\n    'number',  // inputStridesLength\n    'array',   // outputStrides\n    'number',  // outputStridesLength\n    'number',  // interpolationModeId\n    'number',  // fillModeId\n    'number',  // fillValue\n    'number'   // outId\n  ]);\n}\n\nfunction transform(\n    args:\n        {backend: BackendWasm, inputs: TransformInputs, attrs: TransformAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n  const inputStrides =\n      new Uint8Array(new Int32Array(util.computeStrides(image.shape)).buffer);\n\n  const outputStrides =\n      new Uint8Array(new Int32Array(util.computeStrides(outShape)).buffer);\n\n  const out = backend.makeOutput(outShape, image.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const imageData = backend.dataIdMap.get(image.dataId);\n  const imageId = imageData.id;\n\n  const transformsData = backend.dataIdMap.get(transforms.dataId);\n  const transformsId = transformsData.id;\n\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n\n  wasmTransform(\n      imageId, transformsId, (transforms.shape[0] > 1), batch, outHeight,\n      outWidth, numChannels, imageWidth, imageHeight, inputStrides,\n      image.shape.length - 1, outputStrides, outShape.length - 1,\n      interpolationModeId, fillModeId, fillValue, outId);\n\n  return out;\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: transform as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}