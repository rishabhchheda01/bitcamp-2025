{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmDenseBincount;\nfunction setup(backend) {\n  wasmDenseBincount = backend.wasm.cwrap('DenseBincount', null /*void*/, ['number', 'array', 'number', 'number', 'boolean', 'number', 'number', 'boolean', 'number' // outId\n  ]);\n}\nfunction denseBincount(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n  const hasWeights = weights.shape.reduce((p, v) => p * v, 1) !== 0;\n  const outShape = x.shape.length === 1 ? [size] : [x.shape[0], size];\n  const out = backend.makeOutput(outShape, weights.dtype);\n  function tensorId(x) {\n    return backend.dataIdMap.get(x.dataId).id;\n  }\n  wasmDenseBincount(tensorId(x), new Uint8Array(new Int32Array(x.shape).buffer), x.shape.length, size, hasWeights, tensorId(weights), CppDType[weights.dtype], binaryOutput, tensorId(out));\n  return out;\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: denseBincount\n};","map":{"version":3,"names":["DenseBincount","CppDType","wasmDenseBincount","setup","backend","wasm","cwrap","denseBincount","args","inputs","attrs","x","weights","size","binaryOutput","hasWeights","shape","reduce","p","v","outShape","length","out","makeOutput","dtype","tensorId","dataIdMap","get","dataId","id","Uint8Array","Int32Array","buffer","denseBincountConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\DenseBincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmDenseBincount: (\n    xId: number, xShape: Uint8Array, xShapeLen: number, size: number,\n    hasWeights: boolean, weightsId: number, weightsDType: CppDType,\n    binaryOutput: boolean, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmDenseBincount = backend.wasm.cwrap('DenseBincount', null /*void*/, [\n    'number',   // xId\n    'array',    // xShape\n    'number',   // xShapeLen\n    'number',   // size\n    'boolean',  // hasWeights\n    'number',   // weightsId\n    'number',   // weightsDType\n    'boolean',  // binaryOutput\n    'number',   // outId\n  ]);\n}\n\nfunction denseBincount(args: {\n  backend: BackendWasm,\n  inputs: DenseBincountInputs,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  const hasWeights = weights.shape.reduce((p, v) => p * v, 1) !== 0;\n  const outShape = x.shape.length === 1 ? [size] : [x.shape[0], size];\n  const out = backend.makeOutput(outShape, weights.dtype);\n\n  function tensorId(x: TensorInfo) {\n    return backend.dataIdMap.get(x.dataId).id;\n  }\n  wasmDenseBincount(\n      tensorId(x), new Uint8Array(new Int32Array(x.shape).buffer),\n      x.shape.length, size, hasWeights, tensorId(weights),\n      CppDType[weights.dtype], binaryOutput, tensorId(out));\n\n  return out;\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,aAAa,QAAsF,uBAAuB;AAIlI,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,iBAG6C;AAEjD,SAASC,KAAKA,CAACC,OAAoB;EACjCF,iBAAiB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CACrE,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,QAAQ,CAAI;EAAA,CACb,CAAC;AACJ;AAEA,SAASC,aAAaA,CAACC,IAItB;EACC,MAAM;IAACJ,OAAO;IAAEK,MAAM;IAAEC;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,CAAC;IAAEC;EAAO,CAAC,GAAGH,MAAM;EAC3B,MAAM;IAACI,IAAI;IAAEC;EAAY,CAAC,GAAGJ,KAAK;EAElC,MAAMK,UAAU,GAAGH,OAAO,CAACI,KAAK,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;EACjE,MAAMC,QAAQ,GAAGT,CAAC,CAACK,KAAK,CAACK,MAAM,KAAK,CAAC,GAAG,CAACR,IAAI,CAAC,GAAG,CAACF,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEH,IAAI,CAAC;EACnE,MAAMS,GAAG,GAAGlB,OAAO,CAACmB,UAAU,CAACH,QAAQ,EAAER,OAAO,CAACY,KAAK,CAAC;EAEvD,SAASC,QAAQA,CAACd,CAAa;IAC7B,OAAOP,OAAO,CAACsB,SAAS,CAACC,GAAG,CAAChB,CAAC,CAACiB,MAAM,CAAC,CAACC,EAAE;EAC3C;EACA3B,iBAAiB,CACbuB,QAAQ,CAACd,CAAC,CAAC,EAAE,IAAImB,UAAU,CAAC,IAAIC,UAAU,CAACpB,CAAC,CAACK,KAAK,CAAC,CAACgB,MAAM,CAAC,EAC3DrB,CAAC,CAACK,KAAK,CAACK,MAAM,EAAER,IAAI,EAAEE,UAAU,EAAEU,QAAQ,CAACb,OAAO,CAAC,EACnDX,QAAQ,CAACW,OAAO,CAACY,KAAK,CAAC,EAAEV,YAAY,EAAEW,QAAQ,CAACH,GAAG,CAAC,CAAC;EAEzD,OAAOA,GAAG;AACZ;AAEA,OAAO,MAAMW,mBAAmB,GAAiB;EAC/CC,UAAU,EAAElC,aAAa;EACzBmC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEjC,KAAK;EAChBkC,UAAU,EAAE9B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}