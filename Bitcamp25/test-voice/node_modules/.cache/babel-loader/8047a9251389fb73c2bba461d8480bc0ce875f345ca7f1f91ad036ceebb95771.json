{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nlet wasmMaxPool;\nfunction setup(backend) {\n  wasmMaxPool = backend.wasm.cwrap(MaxPool, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction maxPool(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const x = inputs.x;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  // TF API supports int32 input. CPU and WebGL backend also support int32\n  // input. WASM backend doesn't support it because it uses xnnpack which only\n  // supports float32.\n  //\n  // Add the following assert only for the WASM backend instead of at core op\n  // level.\n  //\n  // TODO: add support for int32 input.\n  util.assert(x.dtype === 'float32', () => `Error in MaxPool: only float32 input is supported. Got ${x.dtype}.`);\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmMaxPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPool\n};","map":{"version":3,"names":["backend_util","MaxPool","util","wasmMaxPool","setup","backend","wasm","cwrap","maxPool","args","inputs","attrs","x","xId","dataIdMap","get","dataId","id","assert","dtype","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","dilationHeight","dilationWidth","strideHeight","strideWidth","inputChannels","inChannels","outputChannels","outChannels","dataFormat","Error","out","makeOutput","outShape","outId","maxPoolConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\MaxPool.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, Tensor4D, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmMaxPool: (\n    xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n    filterHeight: number, filterWidth: number, padTop: number, padRight: number,\n    padBottom: number, padLeft: number, dilationHeight: number,\n    dilationWidth: number, strideHeight: number, strideWidth: number,\n    inputChannels: number, outputChannels: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmMaxPool = backend.wasm.cwrap(MaxPool, null /* void */, [\n    'number',  // xId\n    'number',  // batchSize\n    'number',  // inputHeight\n    'number',  // inputWidth\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // padTop\n    'number',  // padRight\n    'number',  // padBottom\n    'number',  // padLeft\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // inputChannels\n    'number',  // outputChannels\n    'number',  // outId\n  ]);\n}\n\nfunction maxPool(\n    args: {inputs: MaxPoolInputs, backend: BackendWasm, attrs: MaxPoolAttrs}) {\n  const {inputs, attrs, backend} = args;\n\n  const x = inputs.x as Tensor4D;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n\n  // TF API supports int32 input. CPU and WebGL backend also support int32\n  // input. WASM backend doesn't support it because it uses xnnpack which only\n  // supports float32.\n  //\n  // Add the following assert only for the WASM backend instead of at core op\n  // level.\n  //\n  // TODO: add support for int32 input.\n  util.assert(\n      x.dtype === 'float32',\n      () =>\n          `Error in MaxPool: only float32 input is supported. Got ${x.dtype}.`);\n\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(\n        `wasm backend does not support dataFormat:'` +\n        `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmMaxPool(\n      xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth,\n      padTop, padRight, padBottom, padLeft, dilationHeight, dilationWidth,\n      strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}