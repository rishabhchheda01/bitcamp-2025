{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nlet wasmRotate;\nfunction setup(backend) {\n  wasmRotate = backend.wasm.cwrap(RotateWithOffset, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'number' // outId\n  ]);\n}\nexport function rotateWithOffset(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image\n  } = inputs;\n  const {\n    radians,\n    fillValue,\n    center\n  } = attrs;\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n  const fillIsBlack = fillValue === 0;\n  const fullOpacityValue = 255;\n  const fillValues = typeof fillValue === 'number' ? [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] : [...fillValue, fullOpacityValue];\n  const fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);\n  wasmRotate(imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX, centerY, fillBytes, fillValues.length, outId);\n  return out;\n}\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'wasm',\n  kernelFunc: rotateWithOffset,\n  setupFunc: setup\n};","map":{"version":3,"names":["RotateWithOffset","backend_util","wasmRotate","setup","backend","wasm","cwrap","rotateWithOffset","args","inputs","attrs","image","radians","fillValue","center","out","makeOutput","shape","dtype","imageId","dataIdMap","get","dataId","id","outId","batch","imageHeight","imageWidth","numChannels","centerX","centerY","getImageCenter","fillIsBlack","fullOpacityValue","fillValues","fillBytes","Uint8Array","Int32Array","buffer","length","rotateWithOffsetConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\RotateWithOffset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmRotate: (\n    xId: number, batch: number, imageHeight: number, imageWidth: number,\n    numChannels: number, radians: number, centerX: number, centerY: number,\n    fillBytes: Uint8Array, fillLength: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmRotate = backend.wasm.cwrap(RotateWithOffset, null /* void */, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // imageHeight\n    'number',  // imageWidth\n    'number',  // numChannels\n    'number',  // radians\n    'number',  // centerX\n    'number',  // centerY\n    'array',   // fillBytes\n    'number',  // fillLength\n    'number',  // outId\n  ]);\n}\n\nexport function rotateWithOffset(args: {\n  inputs: RotateWithOffsetInputs,\n  backend: BackendWasm,\n  attrs: RotateWithOffsetAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {radians, fillValue, center} = attrs;\n\n  const out = backend.makeOutput(image.shape, image.dtype);\n  const imageId = backend.dataIdMap.get(image.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n  const [centerX, centerY] =\n      backend_util.getImageCenter(center, imageHeight, imageWidth);\n\n  const fillIsBlack = fillValue === 0;\n  const fullOpacityValue = 255;\n\n  const fillValues = typeof fillValue === 'number' ?\n      [fillValue, fillValue, fillValue, fillIsBlack ? 0 : fullOpacityValue] :\n      [...fillValue, fullOpacityValue];\n  const fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);\n\n  wasmRotate(\n      imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX,\n      centerY, fillBytes, fillValues.length, outId);\n  return out;\n}\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'wasm',\n  kernelFunc: rotateWithOffset as unknown as KernelFunc,\n  setupFunc: setup\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,gBAAgB,QAAkE,uBAAuB;AAC3I,SAAQC,YAAY,QAAO,uBAAuB;AAIlD,IAAIC,UAGiE;AAErE,SAASC,KAAKA,CAACC,OAAoB;EACjCF,UAAU,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,gBAAgB,EAAE,IAAI,CAAC,YAAY,CACjE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUO,gBAAgBA,CAACC,IAIhC;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAK,CAAC,GAAGF,MAAM;EACtB,MAAM;IAACG,OAAO;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAGJ,KAAK;EAE1C,MAAMK,GAAG,GAAGX,OAAO,CAACY,UAAU,CAACL,KAAK,CAACM,KAAK,EAAEN,KAAK,CAACO,KAAK,CAAC;EACxD,MAAMC,OAAO,GAAGf,OAAO,CAACgB,SAAS,CAACC,GAAG,CAACV,KAAK,CAACW,MAAM,CAAC,CAACC,EAAE;EACtD,MAAMC,KAAK,GAAGpB,OAAO,CAACgB,SAAS,CAACC,GAAG,CAACN,GAAG,CAACO,MAAM,CAAC,CAACC,EAAE;EAElD,MAAM,CAACE,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,CAAC,GAAGjB,KAAK,CAACM,KAAK;EAEjE,MAAM,CAACY,OAAO,EAAEC,OAAO,CAAC,GACpB7B,YAAY,CAAC8B,cAAc,CAACjB,MAAM,EAAEY,WAAW,EAAEC,UAAU,CAAC;EAEhE,MAAMK,WAAW,GAAGnB,SAAS,KAAK,CAAC;EACnC,MAAMoB,gBAAgB,GAAG,GAAG;EAE5B,MAAMC,UAAU,GAAG,OAAOrB,SAAS,KAAK,QAAQ,GAC5C,CAACA,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEmB,WAAW,GAAG,CAAC,GAAGC,gBAAgB,CAAC,GACrE,CAAC,GAAGpB,SAAS,EAAEoB,gBAAgB,CAAC;EACpC,MAAME,SAAS,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACH,UAAU,CAAC,CAACI,MAAM,CAAC;EAEnEpC,UAAU,CACNiB,OAAO,EAAEM,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEhB,OAAO,EAAEiB,OAAO,EACtEC,OAAO,EAAEK,SAAS,EAAED,UAAU,CAACK,MAAM,EAAEf,KAAK,CAAC;EACjD,OAAOT,GAAG;AACZ;AAEA,OAAO,MAAMyB,sBAAsB,GAAiB;EAClDC,UAAU,EAAEzC,gBAAgB;EAC5B0C,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAEpC,gBAAyC;EACrDqC,SAAS,EAAEzC;CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}