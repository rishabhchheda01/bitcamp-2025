{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN } from '@tensorflow/tfjs-core';\nlet wasmLRN;\nfunction setup(backend) {\n  wasmLRN = backend.wasm.cwrap(LRN, null, ['number', 'number', 'number', 'number', 'number', 'number', 'number' // beta\n  ]);\n}\nexport function lrn(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  if (x.dtype !== 'float32') {\n    throw new Error('LRN error: x must have dtype float32');\n  }\n  const out = backend.makeOutput(x.shape, x.dtype);\n  wasmLRN(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(out.dataId).id, /*channels=*/x.shape[3], depthRadius, bias, alpha, beta);\n  return out;\n}\nexport const lrnConfig = {\n  kernelName: LRN,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: lrn\n};","map":{"version":3,"names":["LRN","wasmLRN","setup","backend","wasm","cwrap","lrn","args","inputs","attrs","x","depthRadius","bias","alpha","beta","dtype","Error","out","makeOutput","shape","dataIdMap","get","dataId","id","lrnConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\LRN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmLRN: (\n    xId: number, outId: number, channels: number, depthRadius: number,\n    bias: number, alpha: number, beta: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmLRN = backend.wasm.cwrap(LRN, null, [\n    'number',  // xId\n    'number',  // outId\n    'number',  // channels\n    'number',  // depthRadius\n    'number',  // bias\n    'number',  // alpha\n    'number',  // beta\n  ]);\n}\n\nexport function lrn(args: {\n  inputs: LRNInputs,\n  attrs: LRNAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  if (x.dtype !== 'float32') {\n    throw new Error('LRN error: x must have dtype float32');\n  }\n\n  const out = backend.makeOutput(x.shape, x.dtype);\n\n  wasmLRN(\n      backend.dataIdMap.get(x.dataId).id,\n      backend.dataIdMap.get(out.dataId).id,\n      /*channels=*/x.shape[3],\n      depthRadius,\n      bias,\n      alpha,\n      beta,\n  );\n  return out;\n}\n\nexport const lrnConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: lrn as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,GAAG,QAAwC,uBAAuB;AAIpG,IAAIC,OAEkD;AAEtD,SAASC,KAAKA,CAACC,OAAoB;EACjCF,OAAO,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACL,GAAG,EAAE,IAAI,EAAE,CACtC,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUM,GAAGA,CAACC,IAInB;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAClB,MAAM;IAACG,WAAW;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGL,KAAK;EAE9C,IAAIC,CAAC,CAACK,KAAK,KAAK,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;;EAGzD,MAAMC,GAAG,GAAGd,OAAO,CAACe,UAAU,CAACR,CAAC,CAACS,KAAK,EAAET,CAAC,CAACK,KAAK,CAAC;EAEhDd,OAAO,CACHE,OAAO,CAACiB,SAAS,CAACC,GAAG,CAACX,CAAC,CAACY,MAAM,CAAC,CAACC,EAAE,EAClCpB,OAAO,CAACiB,SAAS,CAACC,GAAG,CAACJ,GAAG,CAACK,MAAM,CAAC,CAACC,EAAE,EACpC,aAAab,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,EACvBR,WAAW,EACXC,IAAI,EACJC,KAAK,EACLC,IAAI,CACP;EACD,OAAOG,GAAG;AACZ;AAEA,OAAO,MAAMO,SAAS,GAAiB;EACrCC,UAAU,EAAEzB,GAAG;EACf0B,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEzB,KAAK;EAChB0B,UAAU,EAAEtB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}