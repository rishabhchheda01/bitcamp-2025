{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmTile;\nfunction setup(backend) {\n  wasmTile = backend.wasm.cwrap(Tile, null /* void */, ['number', 'array', 'number', 'array', 'number', 'number' // out_id\n  ]);\n}\nfunction tile(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const {\n    reps\n  } = attrs;\n  const newShape = new Array(x.shape.length);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[i] * reps[i];\n  }\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const newShapeBytes = new Uint8Array(new Int32Array(newShape).buffer);\n  const out = backend.makeOutput(newShape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmTile(xId, xShapeBytes, x.shape.length, newShapeBytes, newShape.length, CppDType[out.dtype], outId);\n  return out;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: tile\n};","map":{"version":3,"names":["Tile","CppDType","wasmTile","setup","backend","wasm","cwrap","tile","args","inputs","attrs","x","xId","dataIdMap","get","dataId","id","reps","newShape","Array","shape","length","i","xShapeBytes","Uint8Array","Int32Array","buffer","newShapeBytes","out","makeOutput","dtype","outId","tileConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Tile.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmTile: (\n    xId: number, xShape: Uint8Array, xShapeSize: number, newShape: Uint8Array,\n    newShapeSize: number, dtype: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmTile = backend.wasm.cwrap(Tile, null /* void */, [\n    'number',  // x_id\n    'array',   // x_shape\n    'number',  // x_shape.length\n    'array',   // new_shape\n    'number',  // new_shape.length\n    'number'   // out_id\n  ]);\n}\n\nfunction tile(\n    args: {inputs: TileInputs, backend: BackendWasm, attrs: TileAttrs}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const {reps} = attrs;\n\n  const newShape: number[] = new Array(x.shape.length);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[i] * reps[i];\n  }\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const newShapeBytes = new Uint8Array(new Int32Array(newShape).buffer);\n\n  const out = backend.makeOutput(newShape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmTile(\n      xId, xShapeBytes, x.shape.length, newShapeBytes, newShape.length,\n      CppDType[out.dtype], outId);\n  return out;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: tile as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,IAAI,QAA8B,uBAAuB;AAI3F,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,QAE2D;AAE/D,SAASC,KAAKA,CAACC,OAAoB;EACjCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,IAAI,EAAE,IAAI,CAAC,YAAY,CACnD,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASO,IAAIA,CACTC,IAAkE;EACpE,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAClB,MAAMG,GAAG,GAAGR,OAAO,CAACS,SAAS,CAACC,GAAG,CAACH,CAAC,CAACI,MAAM,CAAC,CAACC,EAAE;EAC9C,MAAM;IAACC;EAAI,CAAC,GAAGP,KAAK;EAEpB,MAAMQ,QAAQ,GAAa,IAAIC,KAAK,CAACR,CAAC,CAACS,KAAK,CAACC,MAAM,CAAC;EACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACxCJ,QAAQ,CAACI,CAAC,CAAC,GAAGX,CAAC,CAACS,KAAK,CAACE,CAAC,CAAC,GAAGL,IAAI,CAACK,CAAC,CAAC;;EAEpC,MAAMC,WAAW,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACd,CAAC,CAACS,KAAK,CAAC,CAACM,MAAM,CAAC;EAClE,MAAMC,aAAa,GAAG,IAAIH,UAAU,CAAC,IAAIC,UAAU,CAACP,QAAQ,CAAC,CAACQ,MAAM,CAAC;EAErE,MAAME,GAAG,GAAGxB,OAAO,CAACyB,UAAU,CAACX,QAAQ,EAAEP,CAAC,CAACmB,KAAK,CAAC;EACjD,MAAMC,KAAK,GAAG3B,OAAO,CAACS,SAAS,CAACC,GAAG,CAACc,GAAG,CAACb,MAAM,CAAC,CAACC,EAAE;EAClDd,QAAQ,CACJU,GAAG,EAAEW,WAAW,EAAEZ,CAAC,CAACS,KAAK,CAACC,MAAM,EAAEM,aAAa,EAAET,QAAQ,CAACG,MAAM,EAChEpB,QAAQ,CAAC2B,GAAG,CAACE,KAAK,CAAC,EAAEC,KAAK,CAAC;EAC/B,OAAOH,GAAG;AACZ;AAEA,OAAO,MAAMI,UAAU,GAAiB;EACtCC,UAAU,EAAEjC,IAAI;EAChBkC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEhC,KAAK;EAChBiC,UAAU,EAAE7B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}