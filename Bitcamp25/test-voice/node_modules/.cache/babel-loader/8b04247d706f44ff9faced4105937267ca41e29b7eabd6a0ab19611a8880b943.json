{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmBincount;\nfunction setup(backend) {\n  wasmBincount = backend.wasm.cwrap(Bincount, null /*void*/, ['number', 'number', 'boolean', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction bincount(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size\n  } = attrs;\n  const hasWeights = weights.shape.reduce((p, v) => p * v, 1) !== 0;\n  const outShape = x.shape.length === 1 ? [size] : [x.shape[0], size];\n  const out = backend.makeOutput(outShape, weights.dtype);\n  function tensorId(x) {\n    return backend.dataIdMap.get(x.dataId).id;\n  }\n  wasmBincount(tensorId(x), size, hasWeights, tensorId(weights), CppDType[weights.dtype], tensorId(out));\n  return out;\n}\nexport const bincountConfig = {\n  kernelName: Bincount,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: bincount\n};","map":{"version":3,"names":["Bincount","CppDType","wasmBincount","setup","backend","wasm","cwrap","bincount","args","inputs","attrs","x","weights","size","hasWeights","shape","reduce","p","v","outShape","length","out","makeOutput","dtype","tensorId","dataIdMap","get","dataId","id","bincountConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Bincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmBincount: (\n    xId: number, size: number, hasWeights: boolean, weightsId: number,\n    weightsDType: CppDType, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmBincount = backend.wasm.cwrap(Bincount, null /*void*/, [\n    'number',   // xId\n    'number',   // size\n    'boolean',  // hasWeights\n    'number',   // weightsId\n    'number',   // weightsDType\n    'number',   // outId\n  ]);\n}\n\nfunction bincount(\n    args: {backend: BackendWasm, inputs: BincountInputs, attrs: BincountAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const hasWeights = weights.shape.reduce((p, v) => p * v, 1) !== 0;\n  const outShape = x.shape.length === 1 ? [size] : [x.shape[0], size];\n  const out = backend.makeOutput(outShape, weights.dtype);\n\n  function tensorId(x: TensorInfo) {\n    return backend.dataIdMap.get(x.dataId).id;\n  }\n  wasmBincount(\n      tensorId(x), size, hasWeights, tensorId(weights), CppDType[weights.dtype],\n      tensorId(out));\n\n  return out;\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: bincount as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,QAAQ,QAA4E,uBAAuB;AAInH,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,YAE8C;AAElD,SAASC,KAAKA,CAACC,OAAoB;EACjCF,YAAY,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,QAAQ,EAAE,IAAI,CAAC,UAAU,CACzD,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAI;EAAA,CACb,CAAC;AACJ;AAEA,SAASO,QAAQA,CACbC,IAA0E;EAE5E,MAAM;IAACJ,OAAO;IAAEK,MAAM;IAAEC;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,CAAC;IAAEC;EAAO,CAAC,GAAGH,MAAM;EAC3B,MAAM;IAACI;EAAI,CAAC,GAAGH,KAAK;EAEpB,MAAMI,UAAU,GAAGF,OAAO,CAACG,KAAK,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;EACjE,MAAMC,QAAQ,GAAGR,CAAC,CAACI,KAAK,CAACK,MAAM,KAAK,CAAC,GAAG,CAACP,IAAI,CAAC,GAAG,CAACF,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,EAAEF,IAAI,CAAC;EACnE,MAAMQ,GAAG,GAAGjB,OAAO,CAACkB,UAAU,CAACH,QAAQ,EAAEP,OAAO,CAACW,KAAK,CAAC;EAEvD,SAASC,QAAQA,CAACb,CAAa;IAC7B,OAAOP,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACf,CAAC,CAACgB,MAAM,CAAC,CAACC,EAAE;EAC3C;EACA1B,YAAY,CACRsB,QAAQ,CAACb,CAAC,CAAC,EAAEE,IAAI,EAAEC,UAAU,EAAEU,QAAQ,CAACZ,OAAO,CAAC,EAAEX,QAAQ,CAACW,OAAO,CAACW,KAAK,CAAC,EACzEC,QAAQ,CAACH,GAAG,CAAC,CAAC;EAElB,OAAOA,GAAG;AACZ;AAEA,OAAO,MAAMQ,cAAc,GAAiB;EAC1CC,UAAU,EAAE9B,QAAQ;EACpB+B,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE7B,KAAK;EAChB8B,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}