{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeNearestNeighbor;\nfunction setup(backend) {\n  wasmResizeNearestNeighbor = backend.wasm.cwrap(ResizeNearestNeighbor, null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction resizeNearestNeighbor(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: images\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const xId = xData.id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmResizeNearestNeighbor(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n  return out;\n}\nexport const resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeNearestNeighbor\n};","map":{"version":3,"names":["ResizeNearestNeighbor","util","cast","wasmResizeNearestNeighbor","setup","backend","wasm","cwrap","resizeNearestNeighbor","args","inputs","attrs","images","alignCorners","halfPixelCenters","size","newHeight","newWidth","batch","oldHeight","oldWidth","numChannels","shape","outShape","out","makeOutput","sizeFromShape","xData","dataIdMap","get","dataId","castedData","dtype","x","xId","id","outId","disposeData","resizeNearestNeighborConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\ResizeNearestNeighbor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {\n  KernelConfig,\n  KernelFunc,\n  ResizeNearestNeighbor,\n  ResizeNearestNeighborAttrs,\n  ResizeNearestNeighborInputs,\n  TensorInfo,\n  util,\n} from '@tensorflow/tfjs-core';\n\nimport { BackendWasm } from '../backend_wasm';\n\nimport { cast } from './Cast';\n\nlet wasmResizeNearestNeighbor: (\n  xId: number,\n  batch: number,\n  oldHeight: number,\n  oldWidth: number,\n  numChannels: number,\n  newHeight: number,\n  newWidth: number,\n  alignCorners: number,\n  halfPixelCenters: number,\n  outId: number\n) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmResizeNearestNeighbor = backend.wasm.cwrap(\n    ResizeNearestNeighbor,\n    null /*void*/,\n    [\n      'number', // xId\n      'number', // batch\n      'number', // oldHeight\n      'number', // oldWidth\n      'number', // numChannels\n      'number', // newHeight\n      'number', // newWidth\n      'number', // alignCorners\n      'number', // halfPixelCenters\n      'number', // outId\n    ]\n  );\n}\n\nfunction resizeNearestNeighbor(args: {\n  backend: BackendWasm;\n  inputs: ResizeNearestNeighborInputs;\n  attrs: ResizeNearestNeighborAttrs;\n}): TensorInfo {\n  const { backend, inputs, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: { x: images },\n      attrs: { dtype: 'float32' },\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const xId = xData.id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmResizeNearestNeighbor(\n    xId,\n    batch,\n    oldHeight,\n    oldWidth,\n    numChannels,\n    newHeight,\n    newWidth,\n    alignCorners ? 1 : 0,\n    halfPixelCenters ? 1 : 0,\n    outId\n  );\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAGEA,qBAAqB,EAIrBC,IAAI,QACC,uBAAuB;AAI9B,SAASC,IAAI,QAAQ,QAAQ;AAE7B,IAAIC,yBAWK;AAET,SAASC,KAAKA,CAACC,OAAoB;EACjCF,yBAAyB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAC5CP,qBAAqB,EACrB,IAAI,CAAC,UACL,CACE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAE;EAAA,CACX,CACF;AACH;AAEA,SAASQ,qBAAqBA,CAACC,IAI9B;EACC,MAAM;IAAEJ,OAAO;IAAEK,MAAM;IAAEC;EAAK,CAAE,GAAGF,IAAI;EACvC,MAAM;IAAEG;EAAM,CAAE,GAAGF,MAAM;EACzB,MAAM;IAAEG,YAAY;IAAEC,gBAAgB;IAAEC;EAAI,CAAE,GAAGJ,KAAK;EAEtD,MAAM,CAACK,SAAS,EAAEC,QAAQ,CAAC,GAAGF,IAAI;EAElC,MAAM,CAACG,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,MAAM,CAACU,KAAK;EAC9D,MAAMC,QAAQ,GAAG,CAACL,KAAK,EAAEF,SAAS,EAAEC,QAAQ,EAAEI,WAAW,CAAC;EAE1D,MAAMG,GAAG,GAAGnB,OAAO,CAACoB,UAAU,CAACF,QAAQ,EAAE,SAAS,CAAC;EACnD,IAAItB,IAAI,CAACyB,aAAa,CAACd,MAAM,CAACU,KAAK,CAAC,KAAK,CAAC,EAAE;IAC1C,OAAOE,GAAG;;EAGZ,IAAIG,KAAK,GAAGtB,OAAO,CAACuB,SAAS,CAACC,GAAG,CAACjB,MAAM,CAACkB,MAAM,CAAC;EAChD,IAAIC,UAAU;EACd,IAAIJ,KAAK,CAACK,KAAK,KAAK,SAAS,EAAE;IAC7BD,UAAU,GAAG7B,IAAI,CAAC;MAChBG,OAAO;MACPK,MAAM,EAAE;QAAEuB,CAAC,EAAErB;MAAM,CAAE;MACrBD,KAAK,EAAE;QAAEqB,KAAK,EAAE;MAAS;KAC1B,CAAC;IACFL,KAAK,GAAGtB,OAAO,CAACuB,SAAS,CAACC,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;;EAGlD,MAAMI,GAAG,GAAGP,KAAK,CAACQ,EAAE;EACpB,MAAMC,KAAK,GAAG/B,OAAO,CAACuB,SAAS,CAACC,GAAG,CAACL,GAAG,CAACM,MAAM,CAAC,CAACK,EAAE;EAElDhC,yBAAyB,CACvB+B,GAAG,EACHhB,KAAK,EACLC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXL,SAAS,EACTC,QAAQ,EACRJ,YAAY,GAAG,CAAC,GAAG,CAAC,EACpBC,gBAAgB,GAAG,CAAC,GAAG,CAAC,EACxBsB,KAAK,CACN;EAED,IAAIL,UAAU,IAAI,IAAI,EAAE;IACtB1B,OAAO,CAACgC,WAAW,CAACN,UAAU,CAACD,MAAM,CAAC;;EAGxC,OAAON,GAAG;AACZ;AAEA,OAAO,MAAMc,2BAA2B,GAAiB;EACvDC,UAAU,EAAEvC,qBAAqB;EACjCwC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAErC,KAAK;EAChBsC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}