{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util } from '@tensorflow/tfjs-core';\nlet wasmAvgPool3D;\nfunction setup(backend) {\n  wasmAvgPool3D = backend.wasm.cwrap('AvgPool3D', null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // padLeft\n  ]);\n}\nexport function avgPool3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat\n  } = attrs;\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, /*dilations=*/1, pad, dimRoundingMode, dataFormat);\n  const out = backend.makeOutput(convInfo.outShape, x.dtype);\n  wasmAvgPool3D(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(out.dataId).id, convInfo.batchSize,\n  // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in\n  // channels should always equal to out channels.\n  /*channelSize=*/\n  convInfo.inChannels, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);\n  return out;\n}\nexport const avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool3D\n};","map":{"version":3,"names":["AvgPool3D","backend_util","wasmAvgPool3D","setup","backend","wasm","cwrap","avgPool3D","args","inputs","attrs","x","filterSize","strides","pad","dimRoundingMode","dataFormat","convInfo","computePool3DInfo","shape","out","makeOutput","outShape","dtype","dataIdMap","get","dataId","id","batchSize","inChannels","inDepth","inHeight","inWidth","outDepth","outHeight","outWidth","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padInfo","front","top","left","avgPool3DConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\AvgPool3D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmAvgPool3D: (\n    xId: number, outId: number, batchSize: number, channelSize: number,\n    inDepth: number, inHeight: number, inWidth: number, outDepth: number,\n    outHeight: number, outWidth: number, strideDepth: number,\n    strideHeight: number, strideWidth: number, dilationDepth: number,\n    dilationHeight: number, dilationWidth: number, effectiveFilterDepth: number,\n    effectiveFilterHeight: number, effectiveFilterWidth: number,\n    padFront: number, padTop: number, padLeft: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmAvgPool3D = backend.wasm.cwrap('AvgPool3D', null, [\n    'number',  // xId\n    'number',  // outId\n    'number',  // batchSize\n    'number',  // channelSize\n    'number',  // inDepth\n    'number',  // inHeight\n    'number',  // inWidth\n    'number',  // outDepth\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // strideDepth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // dilationDepth\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // effectiveFilterDepth\n    'number',  // effectiveFilterHeight\n    'number',  // effectiveFilterWidth\n    'number',  // padFront\n    'number',  // padTop\n    'number',  // padLeft\n  ]);\n}\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  attrs: AvgPool3DAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      /*dilations=*/1, pad, dimRoundingMode, dataFormat);\n  const out = backend.makeOutput(convInfo.outShape, x.dtype);\n\n  wasmAvgPool3D(\n      backend.dataIdMap.get(x.dataId).id,\n      backend.dataIdMap.get(out.dataId).id,\n      convInfo.batchSize,\n      // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in\n      // channels should always equal to out channels.\n      /*channelSize=*/convInfo.inChannels,\n      convInfo.inDepth,\n      convInfo.inHeight,\n      convInfo.inWidth,\n      convInfo.outDepth,\n      convInfo.outHeight,\n      convInfo.outWidth,\n      convInfo.strideDepth,\n      convInfo.strideHeight,\n      convInfo.strideWidth,\n      convInfo.dilationDepth,\n      convInfo.dilationHeight,\n      convInfo.dilationWidth,\n      convInfo.effectiveFilterDepth,\n      convInfo.effectiveFilterHeight,\n      convInfo.effectiveFilterWidth,\n      convInfo.padInfo.front,\n      convInfo.padInfo.top,\n      convInfo.padInfo.left,\n  );\n  return out;\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,SAAS,EAAmCC,YAAY,QAA6C,uBAAuB;AAIpI,IAAIC,aAO0D;AAE9D,SAASC,KAAKA,CAACC,OAAoB;EACjCF,aAAa,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,CACpD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUC,SAASA,CAACC,IAIzB;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAClB,MAAM;IAACG,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC,eAAe;IAAEC;EAAU,CAAC,GAAGN,KAAK;EAErE,MAAMO,QAAQ,GAAGhB,YAAY,CAACiB,iBAAiB,CAC3CP,CAAC,CAACQ,KAAiD,EAAEP,UAAU,EAAEC,OAAO,EACxE,cAAc,CAAC,EAAEC,GAAG,EAAEC,eAAe,EAAEC,UAAU,CAAC;EACtD,MAAMI,GAAG,GAAGhB,OAAO,CAACiB,UAAU,CAACJ,QAAQ,CAACK,QAAQ,EAAEX,CAAC,CAACY,KAAK,CAAC;EAE1DrB,aAAa,CACTE,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACd,CAAC,CAACe,MAAM,CAAC,CAACC,EAAE,EAClCvB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACL,GAAG,CAACM,MAAM,CAAC,CAACC,EAAE,EACpCV,QAAQ,CAACW,SAAS;EAClB;EACA;EACA;EAAgBX,QAAQ,CAACY,UAAU,EACnCZ,QAAQ,CAACa,OAAO,EAChBb,QAAQ,CAACc,QAAQ,EACjBd,QAAQ,CAACe,OAAO,EAChBf,QAAQ,CAACgB,QAAQ,EACjBhB,QAAQ,CAACiB,SAAS,EAClBjB,QAAQ,CAACkB,QAAQ,EACjBlB,QAAQ,CAACmB,WAAW,EACpBnB,QAAQ,CAACoB,YAAY,EACrBpB,QAAQ,CAACqB,WAAW,EACpBrB,QAAQ,CAACsB,aAAa,EACtBtB,QAAQ,CAACuB,cAAc,EACvBvB,QAAQ,CAACwB,aAAa,EACtBxB,QAAQ,CAACyB,oBAAoB,EAC7BzB,QAAQ,CAAC0B,qBAAqB,EAC9B1B,QAAQ,CAAC2B,oBAAoB,EAC7B3B,QAAQ,CAAC4B,OAAO,CAACC,KAAK,EACtB7B,QAAQ,CAAC4B,OAAO,CAACE,GAAG,EACpB9B,QAAQ,CAAC4B,OAAO,CAACG,IAAI,CACxB;EACD,OAAO5B,GAAG;AACZ;AAEA,OAAO,MAAM6B,eAAe,GAAiB;EAC3CC,UAAU,EAAElD,SAAS;EACrBmD,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEjD,KAAK;EAChBkD,UAAU,EAAE9C;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}