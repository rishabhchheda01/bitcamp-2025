{"ast":null,"code":"const API_KEY = 'f1fbb5f9a7bfdc1597fafdf76476cfa7';\nconst BASE_URL = 'https://api.nessieisreal.com';\n// Default ID to use if no specific ID is provided\nconst DEFAULT_ID = '67fb040c9683f20dd5195559';\n\n// Helper function to handle fetch requests\nconst apiRequest = async (endpoint, method = 'GET', body = null) => {\n  // Fix: First check if the endpoint already contains the DEFAULT_ID to prevent duplication\n  if (endpoint.includes(DEFAULT_ID)) {\n    // If the endpoint already has the DEFAULT_ID, don't attempt further replacement\n    console.log(`🔄 Endpoint already contains default ID: ${endpoint}`);\n  } else {\n    // Check for placeholder ID patterns like /{id} or short ID patterns  \n    const placeholderPatterns = ['/\\\\{id\\\\}', '/:id', '/\\\\d{1,8}'];\n\n    // Replace each placeholder pattern with the default ID\n    placeholderPatterns.forEach(pattern => {\n      const regex = new RegExp(pattern, 'g');\n      if (regex.test(endpoint)) {\n        endpoint = endpoint.replace(regex, `/${DEFAULT_ID}`);\n      }\n    });\n  }\n  const url = `${BASE_URL}${endpoint}${endpoint.includes('?') ? '&' : '?'}key=${API_KEY}`;\n  console.log(`📡 API REQUEST: ${method} ${endpoint}`);\n  if (body) {\n    console.log('📦 Request data:', JSON.stringify(body, null, 2));\n  }\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    mode: 'cors',\n    // Try explicit CORS mode\n    credentials: 'same-origin'\n  };\n  if (body && (method === 'POST' || method === 'PUT')) {\n    options.body = JSON.stringify(body);\n  }\n  try {\n    const response = await fetch(url, options);\n\n    // Log the response status\n    console.log(`🔄 Response from ${endpoint}: Status ${response.status}`);\n\n    // Special handling for 404s which might be API endpoints that don't exist\n    if (response.status === 404) {\n      console.warn(`⚠️ Endpoint not found: ${endpoint}`);\n      // Return empty array for lists, null for single objects\n      const mockResult = endpoint.includes('accounts') || endpoint.includes('customers') || endpoint.includes('deposits') || endpoint.includes('transfers') || endpoint.includes('withdrawals') ? [] : null;\n      console.log('🔄 Using mock data instead:', mockResult);\n      return mockResult;\n    }\n    if (!response.ok) {\n      try {\n        const errorData = await response.json();\n        console.error(`❌ API Error for ${endpoint}:`, errorData);\n        throw new Error(errorData.message || `API request failed with status ${response.status}`);\n      } catch (jsonError) {\n        // If we can't parse the error as JSON, just throw a basic error\n        console.error(`❌ Error parsing error response from ${endpoint}`);\n        throw new Error(`API request failed with status ${response.status}`);\n      }\n    }\n    if (response.status === 204) {\n      console.log(`✅ Success (no content) from ${endpoint}`);\n      return {\n        success: true\n      };\n    }\n    try {\n      // For debugging - try to get response text\n      const respText = await response.text();\n\n      // Try to parse the text as JSON\n      const result = respText ? JSON.parse(respText) : {};\n      console.log(`✅ Response from ${endpoint}:`, Array.isArray(result) ? `Array with ${result.length} items` : JSON.stringify(result, null, 2).substring(0, 300) + (JSON.stringify(result).length > 300 ? '...' : ''));\n      return result;\n    } catch (jsonError) {\n      console.error(`❌ Error parsing JSON response from ${endpoint}:`, jsonError);\n      throw new Error('Invalid response format from API');\n    }\n  } catch (error) {\n    console.error(`❌ API request error for ${endpoint}:`, error);\n\n    // If this is a network error, show a more helpful message\n    if (error.message === 'Failed to fetch') {\n      console.error(`🔒 CORS or network issue detected with ${endpoint}`);\n      throw new Error(`Network error: Could not connect to Capital One API endpoint ${endpoint}. This may be due to a CORS restriction.`);\n    }\n    throw error;\n  }\n};\n\n// Mock data functions - use these when API requests fail\nconst createMockData = () => {\n  const customerId = \"mock-customer-id-\" + Math.floor(Math.random() * 1000000);\n  const customer = {\n    \"_id\": customerId,\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"address\": {\n      \"street_number\": \"123\",\n      \"street_name\": \"Main St\",\n      \"city\": \"Washington\",\n      \"state\": \"DC\",\n      \"zip\": \"20001\"\n    }\n  };\n  const accounts = [{\n    \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n    \"type\": \"Checking\",\n    \"nickname\": \"Primary Checking\",\n    \"rewards\": 10,\n    \"balance\": 5000,\n    \"account_number\": \"123456789\",\n    \"customer_id\": customerId\n  }, {\n    \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n    \"type\": \"Savings\",\n    \"nickname\": \"Emergency Fund\",\n    \"rewards\": 25,\n    \"balance\": 10000,\n    \"account_number\": \"987654321\",\n    \"customer_id\": customerId\n  }, {\n    \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n    \"type\": \"Credit Card\",\n    \"nickname\": \"Rewards Card\",\n    \"rewards\": 100,\n    \"balance\": 1500,\n    \"account_number\": \"555555555\",\n    \"customer_id\": customerId\n  }];\n  return {\n    customer,\n    accounts\n  };\n};\n\n// API Functions for Accounts with fallback to mock data\nexport const getAccounts = async (type = '') => {\n  try {\n    const queryParam = type ? `?type=${type}` : '';\n    return await apiRequest(`/accounts${queryParam}`);\n  } catch (error) {\n    console.error(\"Error in getAccounts, using mock data:\", error);\n    return createMockData().accounts;\n  }\n};\nexport const getAccountById = async accountId => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}`);\n  } catch (error) {\n    console.error(\"Error in getAccountById, using mock data:\", error);\n    return createMockData().accounts[0];\n  }\n};\nexport const getCustomerAccounts = async customerId => {\n  try {\n    // Use default ID if customerId is not provided\n    const id = customerId || DEFAULT_ID;\n    return await apiRequest(`/customers/${id}/accounts`);\n  } catch (error) {\n    console.error(\"Error in getCustomerAccounts, using mock data:\", error);\n    return createMockData().accounts;\n  }\n};\nexport const createAccount = async (customerId, accountData) => {\n  try {\n    // Use default ID if customerId is not provided\n    const id = customerId || DEFAULT_ID;\n    return await apiRequest(`/customers/${id}/accounts`, 'POST', accountData);\n  } catch (error) {\n    console.error(\"Error in createAccount, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...accountData,\n        \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n        \"customer_id\": id\n      }\n    };\n  }\n};\nexport const updateAccount = (accountId, accountData) => {\n  // Use default ID if accountId is not provided\n  const id = accountId || DEFAULT_ID;\n  return apiRequest(`/accounts/${id}`, 'PUT', accountData);\n};\nexport const deleteAccount = accountId => {\n  // Use default ID if accountId is not provided\n  const id = accountId || DEFAULT_ID;\n  return apiRequest(`/accounts/${id}`, 'DELETE');\n};\n\n// API Functions for Customers with fallback to mock data\nexport const getCustomers = async () => {\n  try {\n    return await apiRequest('/customers');\n  } catch (error) {\n    console.error(\"Error in getCustomers, using mock data:\", error);\n    return [createMockData().customer];\n  }\n};\nexport const getCustomerById = async customerId => {\n  try {\n    // Use default ID if customerId is not provided\n    const id = customerId || DEFAULT_ID;\n    return await apiRequest(`/customers/${id}`);\n  } catch (error) {\n    console.error(\"Error in getCustomerById, using mock data:\", error);\n    return createMockData().customer;\n  }\n};\nexport const getCustomerByAccount = async accountId => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/customer`);\n  } catch (error) {\n    console.error(\"Error in getCustomerByAccount, using mock data:\", error);\n    return createMockData().customer;\n  }\n};\nexport const createCustomer = async customerData => {\n  try {\n    return await apiRequest('/customers', 'POST', customerData);\n  } catch (error) {\n    console.error(\"Error in createCustomer, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...customerData,\n        \"_id\": \"mock-customer-id-\" + Math.floor(Math.random() * 1000000)\n      }\n    };\n  }\n};\nexport const updateCustomer = (customerId, customerData) => {\n  // Use default ID if customerId is not provided\n  const id = customerId || DEFAULT_ID;\n  return apiRequest(`/customers/${id}`, 'PUT', customerData);\n};\n\n// API Functions for Deposits with mock data fallback\nexport const getAccountDeposits = async accountId => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/deposits`);\n  } catch (error) {\n    console.error(\"Error in getAccountDeposits, using mock data:\", error);\n    // Return mock deposit\n    return [{\n      \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\n      \"type\": \"deposit\",\n      \"transaction_date\": new Date().toISOString().split('T')[0],\n      \"status\": \"completed\",\n      \"medium\": \"balance\",\n      \"amount\": 1000,\n      \"description\": \"Salary deposit (mock)\"\n    }];\n  }\n};\nexport const getDepositById = depositId => {\n  // Use default ID if depositId is not provided\n  const id = depositId || DEFAULT_ID;\n  return apiRequest(`/deposits/${id}`);\n};\nexport const createDeposit = async (accountId, depositData) => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/deposits`, 'POST', depositData);\n  } catch (error) {\n    console.error(\"Error in createDeposit, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...depositData,\n        \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\n        \"account_id\": id\n      }\n    };\n  }\n};\nexport const updateDeposit = (depositId, depositData) => {\n  // Use default ID if depositId is not provided\n  const id = depositId || DEFAULT_ID;\n  return apiRequest(`/deposits/${id}`, 'PUT', depositData);\n};\nexport const deleteDeposit = depositId => {\n  // Use default ID if depositId is not provided\n  const id = depositId || DEFAULT_ID;\n  return apiRequest(`/deposits/${id}`, 'DELETE');\n};\n\n// API Functions for Withdrawals with mock data fallback\nexport const getAccountWithdrawals = async accountId => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/withdrawals`);\n  } catch (error) {\n    console.error(\"Error in getAccountWithdrawals, using mock data:\", error);\n    // Return mock withdrawal\n    return [{\n      \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\n      \"type\": \"withdrawal\",\n      \"transaction_date\": new Date().toISOString().split('T')[0],\n      \"status\": \"completed\",\n      \"medium\": \"balance\",\n      \"amount\": 250,\n      \"description\": \"ATM withdrawal (mock)\"\n    }];\n  }\n};\nexport const getWithdrawalById = withdrawalId => {\n  // Use default ID if withdrawalId is not provided\n  const id = withdrawalId || DEFAULT_ID;\n  return apiRequest(`/withdrawals/${id}`);\n};\nexport const createWithdrawal = async (accountId, withdrawalData) => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/withdrawals`, 'POST', withdrawalData);\n  } catch (error) {\n    console.error(\"Error in createWithdrawal, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...withdrawalData,\n        \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\n        \"account_id\": id\n      }\n    };\n  }\n};\nexport const updateWithdrawal = (withdrawalId, withdrawalData) => {\n  // Use default ID if withdrawalId is not provided\n  const id = withdrawalId || DEFAULT_ID;\n  return apiRequest(`/withdrawals/${id}`, 'PUT', withdrawalData);\n};\nexport const deleteWithdrawal = withdrawalId => {\n  // Use default ID if withdrawalId is not provided\n  const id = withdrawalId || DEFAULT_ID;\n  return apiRequest(`/withdrawals/${id}`, 'DELETE');\n};\n\n// API Functions for Transfers with mock data fallback\nexport const getAccountTransfers = async accountId => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/transfers`);\n  } catch (error) {\n    console.error(\"Error in getAccountTransfers, using mock data:\", error);\n    // Return mock transfer\n    return [{\n      \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\n      \"type\": \"transfer\",\n      \"transaction_date\": new Date().toISOString().split('T')[0],\n      \"status\": \"completed\",\n      \"medium\": \"balance\",\n      \"payer_id\": id,\n      \"payee_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n      \"amount\": 500,\n      \"description\": \"Transfer to savings (mock)\"\n    }];\n  }\n};\nexport const getTransferById = transferId => {\n  // Use default ID if transferId is not provided\n  const id = transferId || DEFAULT_ID;\n  return apiRequest(`/transfers/${id}`);\n};\nexport const createTransfer = async (accountId, transferData) => {\n  try {\n    // Use default ID if accountId is not provided\n    const id = accountId || DEFAULT_ID;\n    return await apiRequest(`/accounts/${id}/transfers`, 'POST', transferData);\n  } catch (error) {\n    console.error(\"Error in createTransfer, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...transferData,\n        \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\n        \"payer_id\": id\n      }\n    };\n  }\n};\nexport const updateTransfer = (transferId, transferData) => {\n  // Use default ID if transferId is not provided\n  const id = transferId || DEFAULT_ID;\n  return apiRequest(`/transfers/${id}`, 'PUT', transferData);\n};\nexport const deleteTransfer = transferId => {\n  // Use default ID if transferId is not provided\n  const id = transferId || DEFAULT_ID;\n  return apiRequest(`/transfers/${id}`, 'DELETE');\n};\n\n// API Functions for ATMs and Branches with mock data fallback\nexport const getATMs = async (lat, lng, rad) => {\n  try {\n    return await apiRequest(`/atms?lat=${lat}&lng=${lng}&rad=${rad}`);\n  } catch (error) {\n    console.error(\"Error in getATMs, using mock data:\", error);\n    // Return mock ATMs\n    return [{\n      \"_id\": \"mock-atm-id-1\",\n      \"name\": \"Downtown ATM\",\n      \"language_list\": [\"English\", \"Spanish\"],\n      \"geocode\": {\n        \"lat\": lat + 0.01,\n        \"lng\": lng + 0.01\n      },\n      \"hours\": [\"24/7\"],\n      \"accessibility\": true,\n      \"amount_left\": 2500\n    }, {\n      \"_id\": \"mock-atm-id-2\",\n      \"name\": \"Shopping Mall ATM\",\n      \"language_list\": [\"English\", \"Spanish\", \"French\"],\n      \"geocode\": {\n        \"lat\": lat - 0.01,\n        \"lng\": lng - 0.01\n      },\n      \"hours\": [\"9:00-21:00\"],\n      \"accessibility\": true,\n      \"amount_left\": 1800\n    }];\n  }\n};\nexport const getATMById = atmId => {\n  // Use default ID if atmId is not provided\n  const id = atmId || DEFAULT_ID;\n  return apiRequest(`/atms/${id}`);\n};\nexport const getBranches = async () => {\n  try {\n    return await apiRequest('/branches');\n  } catch (error) {\n    console.error(\"Error in getBranches, using mock data:\", error);\n    // Return mock branches\n    return [{\n      \"_id\": \"mock-branch-id-1\",\n      \"name\": \"Capital One Main Branch\",\n      \"hours\": [\"Mon-Fri: 9:00-17:00\", \"Sat: 10:00-14:00\"],\n      \"phone_number\": \"202-555-0123\",\n      \"address\": {\n        \"street_number\": \"123\",\n        \"street_name\": \"Financial Ave\",\n        \"city\": \"Washington\",\n        \"state\": \"DC\",\n        \"zip\": \"20001\"\n      }\n    }, {\n      \"_id\": \"mock-branch-id-2\",\n      \"name\": \"Capital One Downtown Branch\",\n      \"hours\": [\"Mon-Fri: 9:00-18:00\"],\n      \"phone_number\": \"202-555-0187\",\n      \"address\": {\n        \"street_number\": \"456\",\n        \"street_name\": \"Market St\",\n        \"city\": \"Washington\",\n        \"state\": \"DC\",\n        \"zip\": \"20002\"\n      }\n    }];\n  }\n};\nexport const getBranchById = branchId => {\n  // Use default ID if branchId is not provided\n  const id = branchId || DEFAULT_ID;\n  return apiRequest(`/branches/${id}`);\n};\nexport default {\n  getAccounts,\n  getAccountById,\n  getCustomerAccounts,\n  createAccount,\n  updateAccount,\n  deleteAccount,\n  getCustomers,\n  getCustomerById,\n  getCustomerByAccount,\n  createCustomer,\n  updateCustomer,\n  getAccountDeposits,\n  getDepositById,\n  createDeposit,\n  updateDeposit,\n  deleteDeposit,\n  getAccountWithdrawals,\n  getWithdrawalById,\n  createWithdrawal,\n  updateWithdrawal,\n  deleteWithdrawal,\n  getAccountTransfers,\n  getTransferById,\n  createTransfer,\n  updateTransfer,\n  deleteTransfer,\n  getATMs,\n  getATMById,\n  getBranches,\n  getBranchById\n};","map":{"version":3,"names":["API_KEY","BASE_URL","DEFAULT_ID","apiRequest","endpoint","method","body","includes","console","log","placeholderPatterns","forEach","pattern","regex","RegExp","test","replace","url","JSON","stringify","options","headers","mode","credentials","response","fetch","status","warn","mockResult","ok","errorData","json","error","Error","message","jsonError","success","respText","text","result","parse","Array","isArray","length","substring","createMockData","customerId","Math","floor","random","customer","accounts","getAccounts","type","queryParam","getAccountById","accountId","id","getCustomerAccounts","createAccount","accountData","objectCreated","updateAccount","deleteAccount","getCustomers","getCustomerById","getCustomerByAccount","createCustomer","customerData","updateCustomer","getAccountDeposits","Date","toISOString","split","getDepositById","depositId","createDeposit","depositData","updateDeposit","deleteDeposit","getAccountWithdrawals","getWithdrawalById","withdrawalId","createWithdrawal","withdrawalData","updateWithdrawal","deleteWithdrawal","getAccountTransfers","getTransferById","transferId","createTransfer","transferData","updateTransfer","deleteTransfer","getATMs","lat","lng","rad","getATMById","atmId","getBranches","getBranchById","branchId"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/services/capitalOneService.js"],"sourcesContent":["const API_KEY = 'f1fbb5f9a7bfdc1597fafdf76476cfa7';\r\nconst BASE_URL = 'https://api.nessieisreal.com';\r\n// Default ID to use if no specific ID is provided\r\nconst DEFAULT_ID = '67fb040c9683f20dd5195559';\r\n\r\n// Helper function to handle fetch requests\r\nconst apiRequest = async (endpoint, method = 'GET', body = null) => {\r\n  // Fix: First check if the endpoint already contains the DEFAULT_ID to prevent duplication\r\n  if (endpoint.includes(DEFAULT_ID)) {\r\n    // If the endpoint already has the DEFAULT_ID, don't attempt further replacement\r\n    console.log(`🔄 Endpoint already contains default ID: ${endpoint}`);\r\n  } else {\r\n    // Check for placeholder ID patterns like /{id} or short ID patterns  \r\n    const placeholderPatterns = ['/\\\\{id\\\\}', '/:id', '/\\\\d{1,8}'];\r\n    \r\n    // Replace each placeholder pattern with the default ID\r\n    placeholderPatterns.forEach(pattern => {\r\n      const regex = new RegExp(pattern, 'g');\r\n      if (regex.test(endpoint)) {\r\n        endpoint = endpoint.replace(regex, `/${DEFAULT_ID}`);\r\n      }\r\n    });\r\n  }\r\n  \r\n  const url = `${BASE_URL}${endpoint}${endpoint.includes('?') ? '&' : '?'}key=${API_KEY}`;\r\n  \r\n  console.log(`📡 API REQUEST: ${method} ${endpoint}`);\r\n  if (body) {\r\n    console.log('📦 Request data:', JSON.stringify(body, null, 2));\r\n  }\r\n\r\n  const options = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    },\r\n    mode: 'cors', // Try explicit CORS mode\r\n    credentials: 'same-origin'\r\n  };\r\n\r\n  if (body && (method === 'POST' || method === 'PUT')) {\r\n    options.body = JSON.stringify(body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, options);\r\n    \r\n    // Log the response status\r\n    console.log(`🔄 Response from ${endpoint}: Status ${response.status}`);\r\n    \r\n    // Special handling for 404s which might be API endpoints that don't exist\r\n    if (response.status === 404) {\r\n      console.warn(`⚠️ Endpoint not found: ${endpoint}`);\r\n      // Return empty array for lists, null for single objects\r\n      const mockResult = endpoint.includes('accounts') || \r\n             endpoint.includes('customers') || \r\n             endpoint.includes('deposits') || \r\n             endpoint.includes('transfers') || \r\n             endpoint.includes('withdrawals') ? [] : null;\r\n      console.log('🔄 Using mock data instead:', mockResult);\r\n      return mockResult;\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      try {\r\n        const errorData = await response.json();\r\n        console.error(`❌ API Error for ${endpoint}:`, errorData);\r\n        throw new Error(errorData.message || `API request failed with status ${response.status}`);\r\n      } catch (jsonError) {\r\n        // If we can't parse the error as JSON, just throw a basic error\r\n        console.error(`❌ Error parsing error response from ${endpoint}`);\r\n        throw new Error(`API request failed with status ${response.status}`);\r\n      }\r\n    }\r\n    \r\n    if (response.status === 204) {\r\n      console.log(`✅ Success (no content) from ${endpoint}`);\r\n      return { success: true };\r\n    }\r\n    \r\n    try {\r\n      // For debugging - try to get response text\r\n      const respText = await response.text();\r\n      \r\n      // Try to parse the text as JSON\r\n      const result = respText ? JSON.parse(respText) : {};\r\n      console.log(`✅ Response from ${endpoint}:`, \r\n                  Array.isArray(result) \r\n                    ? `Array with ${result.length} items` \r\n                    : JSON.stringify(result, null, 2).substring(0, 300) + (JSON.stringify(result).length > 300 ? '...' : ''));\r\n      return result;\r\n    } catch (jsonError) {\r\n      console.error(`❌ Error parsing JSON response from ${endpoint}:`, jsonError);\r\n      throw new Error('Invalid response format from API');\r\n    }\r\n  } catch (error) {\r\n    console.error(`❌ API request error for ${endpoint}:`, error);\r\n    \r\n    // If this is a network error, show a more helpful message\r\n    if (error.message === 'Failed to fetch') {\r\n      console.error(`🔒 CORS or network issue detected with ${endpoint}`);\r\n      throw new Error(`Network error: Could not connect to Capital One API endpoint ${endpoint}. This may be due to a CORS restriction.`);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mock data functions - use these when API requests fail\r\nconst createMockData = () => {\r\n  const customerId = \"mock-customer-id-\" + Math.floor(Math.random() * 1000000);\r\n  \r\n  const customer = {\r\n    \"_id\": customerId,\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Doe\",\r\n    \"address\": {\r\n      \"street_number\": \"123\",\r\n      \"street_name\": \"Main St\",\r\n      \"city\": \"Washington\",\r\n      \"state\": \"DC\",\r\n      \"zip\": \"20001\"\r\n    }\r\n  };\r\n  \r\n  const accounts = [\r\n    {\r\n      \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n      \"type\": \"Checking\",\r\n      \"nickname\": \"Primary Checking\",\r\n      \"rewards\": 10,\r\n      \"balance\": 5000,\r\n      \"account_number\": \"123456789\",\r\n      \"customer_id\": customerId\r\n    },\r\n    {\r\n      \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n      \"type\": \"Savings\",\r\n      \"nickname\": \"Emergency Fund\",\r\n      \"rewards\": 25,\r\n      \"balance\": 10000,\r\n      \"account_number\": \"987654321\",\r\n      \"customer_id\": customerId\r\n    },\r\n    {\r\n      \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n      \"type\": \"Credit Card\",\r\n      \"nickname\": \"Rewards Card\",\r\n      \"rewards\": 100,\r\n      \"balance\": 1500,\r\n      \"account_number\": \"555555555\",\r\n      \"customer_id\": customerId\r\n    }\r\n  ];\r\n  \r\n  return { customer, accounts };\r\n};\r\n\r\n// API Functions for Accounts with fallback to mock data\r\nexport const getAccounts = async (type = '') => {\r\n  try {\r\n    const queryParam = type ? `?type=${type}` : '';\r\n    return await apiRequest(`/accounts${queryParam}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccounts, using mock data:\", error);\r\n    return createMockData().accounts;\r\n  }\r\n};\r\n\r\nexport const getAccountById = async (accountId) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountById, using mock data:\", error);\r\n    return createMockData().accounts[0];\r\n  }\r\n};\r\n\r\nexport const getCustomerAccounts = async (customerId) => {\r\n  try {\r\n    // Use default ID if customerId is not provided\r\n    const id = customerId || DEFAULT_ID;\r\n    return await apiRequest(`/customers/${id}/accounts`);\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomerAccounts, using mock data:\", error);\r\n    return createMockData().accounts;\r\n  }\r\n};\r\n\r\nexport const createAccount = async (customerId, accountData) => {\r\n  try {\r\n    // Use default ID if customerId is not provided\r\n    const id = customerId || DEFAULT_ID;\r\n    return await apiRequest(`/customers/${id}/accounts`, 'POST', accountData);\r\n  } catch (error) {\r\n    console.error(\"Error in createAccount, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...accountData, \r\n        \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"customer_id\": id\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateAccount = (accountId, accountData) => {\r\n  // Use default ID if accountId is not provided\r\n  const id = accountId || DEFAULT_ID;\r\n  return apiRequest(`/accounts/${id}`, 'PUT', accountData);\r\n};\r\n\r\nexport const deleteAccount = (accountId) => {\r\n  // Use default ID if accountId is not provided\r\n  const id = accountId || DEFAULT_ID;\r\n  return apiRequest(`/accounts/${id}`, 'DELETE');\r\n};\r\n\r\n// API Functions for Customers with fallback to mock data\r\nexport const getCustomers = async () => {\r\n  try {\r\n    return await apiRequest('/customers');\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomers, using mock data:\", error);\r\n    return [createMockData().customer];\r\n  }\r\n};\r\n\r\nexport const getCustomerById = async (customerId) => {\r\n  try {\r\n    // Use default ID if customerId is not provided\r\n    const id = customerId || DEFAULT_ID;\r\n    return await apiRequest(`/customers/${id}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomerById, using mock data:\", error);\r\n    return createMockData().customer;\r\n  }\r\n};\r\n\r\nexport const getCustomerByAccount = async (accountId) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/customer`);\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomerByAccount, using mock data:\", error);\r\n    return createMockData().customer;\r\n  }\r\n};\r\n\r\nexport const createCustomer = async (customerData) => {\r\n  try {\r\n    return await apiRequest('/customers', 'POST', customerData);\r\n  } catch (error) {\r\n    console.error(\"Error in createCustomer, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...customerData, \r\n        \"_id\": \"mock-customer-id-\" + Math.floor(Math.random() * 1000000) \r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateCustomer = (customerId, customerData) => {\r\n  // Use default ID if customerId is not provided\r\n  const id = customerId || DEFAULT_ID;\r\n  return apiRequest(`/customers/${id}`, 'PUT', customerData);\r\n};\r\n\r\n// API Functions for Deposits with mock data fallback\r\nexport const getAccountDeposits = async (accountId) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/deposits`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountDeposits, using mock data:\", error);\r\n    // Return mock deposit\r\n    return [\r\n      {\r\n        \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"type\": \"deposit\",\r\n        \"transaction_date\": new Date().toISOString().split('T')[0],\r\n        \"status\": \"completed\",\r\n        \"medium\": \"balance\",\r\n        \"amount\": 1000,\r\n        \"description\": \"Salary deposit (mock)\"\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getDepositById = (depositId) => {\r\n  // Use default ID if depositId is not provided\r\n  const id = depositId || DEFAULT_ID;\r\n  return apiRequest(`/deposits/${id}`);\r\n};\r\n\r\nexport const createDeposit = async (accountId, depositData) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/deposits`, 'POST', depositData);\r\n  } catch (error) {\r\n    console.error(\"Error in createDeposit, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...depositData, \r\n        \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"account_id\": id\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateDeposit = (depositId, depositData) => {\r\n  // Use default ID if depositId is not provided\r\n  const id = depositId || DEFAULT_ID;\r\n  return apiRequest(`/deposits/${id}`, 'PUT', depositData);\r\n};\r\n\r\nexport const deleteDeposit = (depositId) => {\r\n  // Use default ID if depositId is not provided\r\n  const id = depositId || DEFAULT_ID;\r\n  return apiRequest(`/deposits/${id}`, 'DELETE');\r\n};\r\n\r\n// API Functions for Withdrawals with mock data fallback\r\nexport const getAccountWithdrawals = async (accountId) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/withdrawals`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountWithdrawals, using mock data:\", error);\r\n    // Return mock withdrawal\r\n    return [\r\n      {\r\n        \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"type\": \"withdrawal\",\r\n        \"transaction_date\": new Date().toISOString().split('T')[0],\r\n        \"status\": \"completed\",\r\n        \"medium\": \"balance\",\r\n        \"amount\": 250,\r\n        \"description\": \"ATM withdrawal (mock)\"\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getWithdrawalById = (withdrawalId) => {\r\n  // Use default ID if withdrawalId is not provided\r\n  const id = withdrawalId || DEFAULT_ID;\r\n  return apiRequest(`/withdrawals/${id}`);\r\n};\r\n\r\nexport const createWithdrawal = async (accountId, withdrawalData) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/withdrawals`, 'POST', withdrawalData);\r\n  } catch (error) {\r\n    console.error(\"Error in createWithdrawal, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...withdrawalData, \r\n        \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"account_id\": id\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateWithdrawal = (withdrawalId, withdrawalData) => {\r\n  // Use default ID if withdrawalId is not provided\r\n  const id = withdrawalId || DEFAULT_ID;\r\n  return apiRequest(`/withdrawals/${id}`, 'PUT', withdrawalData);\r\n};\r\n\r\nexport const deleteWithdrawal = (withdrawalId) => {\r\n  // Use default ID if withdrawalId is not provided\r\n  const id = withdrawalId || DEFAULT_ID;\r\n  return apiRequest(`/withdrawals/${id}`, 'DELETE');\r\n};\r\n\r\n// API Functions for Transfers with mock data fallback\r\nexport const getAccountTransfers = async (accountId) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/transfers`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountTransfers, using mock data:\", error);\r\n    // Return mock transfer\r\n    return [\r\n      {\r\n        \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"type\": \"transfer\",\r\n        \"transaction_date\": new Date().toISOString().split('T')[0],\r\n        \"status\": \"completed\",\r\n        \"medium\": \"balance\",\r\n        \"payer_id\": id,\r\n        \"payee_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"amount\": 500,\r\n        \"description\": \"Transfer to savings (mock)\"\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getTransferById = (transferId) => {\r\n  // Use default ID if transferId is not provided\r\n  const id = transferId || DEFAULT_ID;\r\n  return apiRequest(`/transfers/${id}`);\r\n};\r\n\r\nexport const createTransfer = async (accountId, transferData) => {\r\n  try {\r\n    // Use default ID if accountId is not provided\r\n    const id = accountId || DEFAULT_ID;\r\n    return await apiRequest(`/accounts/${id}/transfers`, 'POST', transferData);\r\n  } catch (error) {\r\n    console.error(\"Error in createTransfer, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...transferData,\r\n        \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"payer_id\": id\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateTransfer = (transferId, transferData) => {\r\n  // Use default ID if transferId is not provided\r\n  const id = transferId || DEFAULT_ID;\r\n  return apiRequest(`/transfers/${id}`, 'PUT', transferData);\r\n};\r\n\r\nexport const deleteTransfer = (transferId) => {\r\n  // Use default ID if transferId is not provided\r\n  const id = transferId || DEFAULT_ID;\r\n  return apiRequest(`/transfers/${id}`, 'DELETE');\r\n};\r\n\r\n// API Functions for ATMs and Branches with mock data fallback\r\nexport const getATMs = async (lat, lng, rad) => {\r\n  try {\r\n    return await apiRequest(`/atms?lat=${lat}&lng=${lng}&rad=${rad}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getATMs, using mock data:\", error);\r\n    // Return mock ATMs\r\n    return [\r\n      {\r\n        \"_id\": \"mock-atm-id-1\",\r\n        \"name\": \"Downtown ATM\",\r\n        \"language_list\": [\"English\", \"Spanish\"],\r\n        \"geocode\": { \"lat\": lat + 0.01, \"lng\": lng + 0.01 },\r\n        \"hours\": [\"24/7\"],\r\n        \"accessibility\": true,\r\n        \"amount_left\": 2500\r\n      },\r\n      {\r\n        \"_id\": \"mock-atm-id-2\",\r\n        \"name\": \"Shopping Mall ATM\",\r\n        \"language_list\": [\"English\", \"Spanish\", \"French\"],\r\n        \"geocode\": { \"lat\": lat - 0.01, \"lng\": lng - 0.01 },\r\n        \"hours\": [\"9:00-21:00\"],\r\n        \"accessibility\": true,\r\n        \"amount_left\": 1800\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getATMById = (atmId) => {\r\n  // Use default ID if atmId is not provided\r\n  const id = atmId || DEFAULT_ID;\r\n  return apiRequest(`/atms/${id}`);\r\n};\r\n\r\nexport const getBranches = async () => {\r\n  try {\r\n    return await apiRequest('/branches');\r\n  } catch (error) {\r\n    console.error(\"Error in getBranches, using mock data:\", error);\r\n    // Return mock branches\r\n    return [\r\n      {\r\n        \"_id\": \"mock-branch-id-1\",\r\n        \"name\": \"Capital One Main Branch\",\r\n        \"hours\": [\"Mon-Fri: 9:00-17:00\", \"Sat: 10:00-14:00\"],\r\n        \"phone_number\": \"202-555-0123\",\r\n        \"address\": {\r\n          \"street_number\": \"123\",\r\n          \"street_name\": \"Financial Ave\",\r\n          \"city\": \"Washington\",\r\n          \"state\": \"DC\",\r\n          \"zip\": \"20001\"\r\n        }\r\n      },\r\n      {\r\n        \"_id\": \"mock-branch-id-2\",\r\n        \"name\": \"Capital One Downtown Branch\",\r\n        \"hours\": [\"Mon-Fri: 9:00-18:00\"],\r\n        \"phone_number\": \"202-555-0187\",\r\n        \"address\": {\r\n          \"street_number\": \"456\",\r\n          \"street_name\": \"Market St\",\r\n          \"city\": \"Washington\",\r\n          \"state\": \"DC\",\r\n          \"zip\": \"20002\"\r\n        }\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getBranchById = (branchId) => {\r\n  // Use default ID if branchId is not provided\r\n  const id = branchId || DEFAULT_ID;\r\n  return apiRequest(`/branches/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAccounts,\r\n  getAccountById,\r\n  getCustomerAccounts,\r\n  createAccount,\r\n  updateAccount,\r\n  deleteAccount,\r\n  getCustomers,\r\n  getCustomerById,\r\n  getCustomerByAccount,\r\n  createCustomer,\r\n  updateCustomer,\r\n  getAccountDeposits,\r\n  getDepositById,\r\n  createDeposit,\r\n  updateDeposit,\r\n  deleteDeposit,\r\n  getAccountWithdrawals,\r\n  getWithdrawalById,\r\n  createWithdrawal,\r\n  updateWithdrawal,\r\n  deleteWithdrawal,\r\n  getAccountTransfers,\r\n  getTransferById,\r\n  createTransfer,\r\n  updateTransfer,\r\n  deleteTransfer,\r\n  getATMs,\r\n  getATMById,\r\n  getBranches,\r\n  getBranchById\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}