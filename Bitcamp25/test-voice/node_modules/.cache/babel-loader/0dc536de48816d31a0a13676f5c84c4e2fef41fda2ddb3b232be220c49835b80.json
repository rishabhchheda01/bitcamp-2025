{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kheri\\\\Downloads\\\\Bitcamp\\\\bitcamp-2025\\\\Bitcamp25\\\\test-voice\\\\src\\\\SplineLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SplineViewer from './SplineViewer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingTexts = [\"Loading up bot\", \"Initialising AI brain\", \"Connecting all nerves\", \"Booting up essential organs\"];\nconst SplineLoader = ({\n  onLoadingComplete\n}) => {\n  _s();\n  const initialSplineRef = useRef(null);\n  const [currentLoadingPhase, setCurrentLoadingPhase] = useState(0);\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n  const [loadingText, setLoadingText] = useState(LoadingTexts[0]);\n  const [textOpacity, setTextOpacity] = useState(1);\n\n  // Handle loading text animation\n  useEffect(() => {\n    if (!isInitialLoading) return;\n    const textInterval = setInterval(() => {\n      setTextOpacity(0);\n      setTimeout(() => {\n        setCurrentLoadingPhase(prev => {\n          const nextPhase = prev + 1;\n          if (nextPhase >= LoadingTexts.length) {\n            clearInterval(textInterval);\n            return prev;\n          }\n          setLoadingText(LoadingTexts[nextPhase]);\n          setTextOpacity(1);\n          return nextPhase;\n        });\n      }, 500); // Wait for fade out before changing text\n    }, 1200); // Change text every 1.2 seconds\n\n    // Handle transition to main scene after 5 seconds\n    const loadingTimer = setTimeout(() => {\n      setIsInitialLoading(false);\n      if (onLoadingComplete) onLoadingComplete();\n    }, 5000);\n    return () => {\n      clearInterval(textInterval);\n      clearTimeout(loadingTimer);\n    };\n  }, [isInitialLoading, onLoadingComplete]);\n\n  // For testing only - skip the loader immediately\n  useEffect(() => {\n    // Uncomment this to skip the loader for testing\n    // setTimeout(() => {\n    //   setIsInitialLoading(false);\n    //   if (onLoadingComplete) onLoadingComplete();\n    // }, 100);\n  }, [onLoadingComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader-container\",\n    children: [isInitialLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spline-container\",\n        children: /*#__PURE__*/_jsxDEV(SplineViewer, {\n          ref: initialSplineRef,\n          url: \"https://prod.spline.design/xpxDmF5OWl8sWQlZ/scene.splinecode\",\n          persistOnUpdate: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-text\",\n        style: {\n          opacity: textOpacity\n        },\n        children: loadingText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          style: {\n            width: `${(currentLoadingPhase + 1) / LoadingTexts.length * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !isInitialLoading && null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SplineLoader, \"GXCvXjA2+6S1DuT9ZpchcPGpxqQ=\");\n_c = SplineLoader;\nexport default SplineLoader;\nvar _c;\n$RefreshReg$(_c, \"SplineLoader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SplineViewer","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingTexts","SplineLoader","onLoadingComplete","_s","initialSplineRef","currentLoadingPhase","setCurrentLoadingPhase","isInitialLoading","setIsInitialLoading","loadingText","setLoadingText","textOpacity","setTextOpacity","textInterval","setInterval","setTimeout","prev","nextPhase","length","clearInterval","loadingTimer","clearTimeout","className","children","ref","url","persistOnUpdate","fileName","_jsxFileName","lineNumber","columnNumber","style","opacity","width","_c","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/SplineLoader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport SplineViewer from './SplineViewer';\r\n\r\nconst LoadingTexts = [\r\n  \"Loading up bot\",\r\n  \"Initialising AI brain\",\r\n  \"Connecting all nerves\",\r\n  \"Booting up essential organs\"\r\n];\r\n\r\nconst SplineLoader = ({ onLoadingComplete }) => {\r\n  const initialSplineRef = useRef(null);\r\n  const [currentLoadingPhase, setCurrentLoadingPhase] = useState(0);\r\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\r\n  const [loadingText, setLoadingText] = useState(LoadingTexts[0]);\r\n  const [textOpacity, setTextOpacity] = useState(1);\r\n\r\n  // Handle loading text animation\r\n  useEffect(() => {\r\n    if (!isInitialLoading) return;\r\n\r\n    const textInterval = setInterval(() => {\r\n      setTextOpacity(0);\r\n      \r\n      setTimeout(() => {\r\n        setCurrentLoadingPhase(prev => {\r\n          const nextPhase = prev + 1;\r\n          if (nextPhase >= LoadingTexts.length) {\r\n            clearInterval(textInterval);\r\n            return prev;\r\n          }\r\n          setLoadingText(LoadingTexts[nextPhase]);\r\n          setTextOpacity(1);\r\n          return nextPhase;\r\n        });\r\n      }, 500); // Wait for fade out before changing text\r\n    }, 1200); // Change text every 1.2 seconds\r\n    \r\n    // Handle transition to main scene after 5 seconds\r\n    const loadingTimer = setTimeout(() => {\r\n      setIsInitialLoading(false);\r\n      if (onLoadingComplete) onLoadingComplete();\r\n    }, 5000);\r\n    \r\n    return () => {\r\n      clearInterval(textInterval);\r\n      clearTimeout(loadingTimer);\r\n    };\r\n  }, [isInitialLoading, onLoadingComplete]);\r\n\r\n  // For testing only - skip the loader immediately\r\n  useEffect(() => {\r\n    // Uncomment this to skip the loader for testing\r\n    // setTimeout(() => {\r\n    //   setIsInitialLoading(false);\r\n    //   if (onLoadingComplete) onLoadingComplete();\r\n    // }, 100);\r\n  }, [onLoadingComplete]);\r\n\r\n  return (\r\n    <div className=\"loader-container\">\r\n      {/* Initial loading animation */}\r\n      {isInitialLoading && (\r\n        <>\r\n          <div className=\"spline-container\">\r\n            <SplineViewer \r\n              ref={initialSplineRef}\r\n              url=\"https://prod.spline.design/xpxDmF5OWl8sWQlZ/scene.splinecode\" \r\n              persistOnUpdate={true}\r\n            />\r\n          </div>\r\n          <div className=\"loading-text\" style={{ opacity: textOpacity }}>\r\n            {loadingText}\r\n          </div>\r\n          <div className=\"loading-progress\">\r\n            <div \r\n              className=\"progress-bar\" \r\n              style={{ \r\n                width: `${(currentLoadingPhase + 1) / LoadingTexts.length * 100}%` \r\n              }}\r\n            ></div>\r\n          </div>\r\n        </>\r\n      )}\r\n      \r\n      {/* Main scene after loading - we don't need to render this here anymore,\r\n          as it will be handled by the App component for persistence */}\r\n      {!isInitialLoading && null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SplineLoader; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}