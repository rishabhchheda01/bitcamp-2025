{"ast":null,"code":"const API_KEY = 'f1fbb5f9a7bfdc1597fafdf76476cfa7';\nconst BASE_URL = 'https://api.nessieisreal.com';\n\n// Helper function to handle fetch requests\nconst apiRequest = async (endpoint, method = 'GET', body = null) => {\n  const url = `${BASE_URL}${endpoint}${endpoint.includes('?') ? '&' : '?'}key=${API_KEY}`;\n  console.log(`Making ${method} request to: ${url}`);\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    mode: 'cors',\n    // Try explicit CORS mode\n    credentials: 'same-origin'\n  };\n  if (body && (method === 'POST' || method === 'PUT')) {\n    options.body = JSON.stringify(body);\n  }\n  try {\n    const response = await fetch(url, options);\n\n    // Log the response status\n    console.log(`Response status: ${response.status}`);\n\n    // For debugging - log full response\n    console.log('Response headers:', response.headers);\n\n    // Special handling for 404s which might be API endpoints that don't exist\n    if (response.status === 404) {\n      console.warn(`Endpoint not found: ${endpoint}`);\n      // Return empty array for lists, null for single objects\n      return endpoint.includes('accounts') || endpoint.includes('customers') || endpoint.includes('deposits') || endpoint.includes('transfers') || endpoint.includes('withdrawals') ? [] : null;\n    }\n    if (!response.ok) {\n      try {\n        const errorData = await response.json();\n        console.error('API error data:', errorData);\n        throw new Error(errorData.message || `API request failed with status ${response.status}`);\n      } catch (jsonError) {\n        // If we can't parse the error as JSON, just throw a basic error\n        throw new Error(`API request failed with status ${response.status}`);\n      }\n    }\n    if (response.status === 204) {\n      return {\n        success: true\n      };\n    }\n    try {\n      // For debugging - try to get response text\n      const respText = await response.text();\n      console.log('Response text:', respText.substring(0, 200) + (respText.length > 200 ? '...' : ''));\n\n      // Parse the text back to JSON\n      return respText ? JSON.parse(respText) : {};\n    } catch (jsonError) {\n      console.error('Error parsing JSON response:', jsonError);\n      throw new Error('Invalid response format from API');\n    }\n  } catch (error) {\n    console.error('API request error:', error);\n\n    // If this is a network error, show a more helpful message\n    if (error.message === 'Failed to fetch') {\n      throw new Error('Network error: Could not connect to Capital One API. This may be due to a CORS restriction.');\n    }\n    throw error;\n  }\n};\n\n// Mock data functions - use these when API requests fail\nconst createMockData = () => {\n  const customerId = \"mock-customer-id-\" + Math.floor(Math.random() * 1000000);\n  const customer = {\n    \"_id\": customerId,\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"address\": {\n      \"street_number\": \"123\",\n      \"street_name\": \"Main St\",\n      \"city\": \"Washington\",\n      \"state\": \"DC\",\n      \"zip\": \"20001\"\n    }\n  };\n  const accounts = [{\n    \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n    \"type\": \"Checking\",\n    \"nickname\": \"Primary Checking\",\n    \"rewards\": 10,\n    \"balance\": 5000,\n    \"account_number\": \"123456789\",\n    \"customer_id\": customerId\n  }, {\n    \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n    \"type\": \"Savings\",\n    \"nickname\": \"Emergency Fund\",\n    \"rewards\": 25,\n    \"balance\": 10000,\n    \"account_number\": \"987654321\",\n    \"customer_id\": customerId\n  }, {\n    \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n    \"type\": \"Credit Card\",\n    \"nickname\": \"Rewards Card\",\n    \"rewards\": 100,\n    \"balance\": 1500,\n    \"account_number\": \"555555555\",\n    \"customer_id\": customerId\n  }];\n  return {\n    customer,\n    accounts\n  };\n};\n\n// API Functions for Accounts with fallback to mock data\nexport const getAccounts = async (type = '') => {\n  try {\n    const queryParam = type ? `?type=${type}` : '';\n    return await apiRequest(`/accounts${queryParam}`);\n  } catch (error) {\n    console.error(\"Error in getAccounts, using mock data:\", error);\n    return createMockData().accounts;\n  }\n};\nexport const getAccountById = async accountId => {\n  try {\n    return await apiRequest(`/accounts/${accountId}`);\n  } catch (error) {\n    console.error(\"Error in getAccountById, using mock data:\", error);\n    return createMockData().accounts[0];\n  }\n};\nexport const getCustomerAccounts = async customerId => {\n  try {\n    return await apiRequest(`/customers/${customerId}/accounts`);\n  } catch (error) {\n    console.error(\"Error in getCustomerAccounts, using mock data:\", error);\n    return createMockData().accounts;\n  }\n};\nexport const createAccount = async (customerId, accountData) => {\n  try {\n    return await apiRequest(`/customers/${customerId}/accounts`, 'POST', accountData);\n  } catch (error) {\n    console.error(\"Error in createAccount, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...accountData,\n        \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n        \"customer_id\": customerId\n      }\n    };\n  }\n};\nexport const updateAccount = (accountId, accountData) => {\n  return apiRequest(`/accounts/${accountId}`, 'PUT', accountData);\n};\nexport const deleteAccount = accountId => {\n  return apiRequest(`/accounts/${accountId}`, 'DELETE');\n};\n\n// API Functions for Customers with fallback to mock data\nexport const getCustomers = async () => {\n  try {\n    return await apiRequest('/customers');\n  } catch (error) {\n    console.error(\"Error in getCustomers, using mock data:\", error);\n    return [createMockData().customer];\n  }\n};\nexport const getCustomerById = async customerId => {\n  try {\n    return await apiRequest(`/customers/${customerId}`);\n  } catch (error) {\n    console.error(\"Error in getCustomerById, using mock data:\", error);\n    return createMockData().customer;\n  }\n};\nexport const getCustomerByAccount = async accountId => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/customer`);\n  } catch (error) {\n    console.error(\"Error in getCustomerByAccount, using mock data:\", error);\n    return createMockData().customer;\n  }\n};\nexport const createCustomer = async customerData => {\n  try {\n    return await apiRequest('/customers', 'POST', customerData);\n  } catch (error) {\n    console.error(\"Error in createCustomer, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...customerData,\n        \"_id\": \"mock-customer-id-\" + Math.floor(Math.random() * 1000000)\n      }\n    };\n  }\n};\nexport const updateCustomer = (customerId, customerData) => {\n  return apiRequest(`/customers/${customerId}`, 'PUT', customerData);\n};\n\n// API Functions for Deposits with mock data fallback\nexport const getAccountDeposits = async accountId => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/deposits`);\n  } catch (error) {\n    console.error(\"Error in getAccountDeposits, using mock data:\", error);\n    // Return mock deposit\n    return [{\n      \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\n      \"type\": \"deposit\",\n      \"transaction_date\": new Date().toISOString().split('T')[0],\n      \"status\": \"completed\",\n      \"medium\": \"balance\",\n      \"amount\": 1000,\n      \"description\": \"Salary deposit (mock)\"\n    }];\n  }\n};\nexport const getDepositById = depositId => {\n  return apiRequest(`/deposits/${depositId}`);\n};\nexport const createDeposit = async (accountId, depositData) => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/deposits`, 'POST', depositData);\n  } catch (error) {\n    console.error(\"Error in createDeposit, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...depositData,\n        \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\n        \"account_id\": accountId\n      }\n    };\n  }\n};\nexport const updateDeposit = (depositId, depositData) => {\n  return apiRequest(`/deposits/${depositId}`, 'PUT', depositData);\n};\nexport const deleteDeposit = depositId => {\n  return apiRequest(`/deposits/${depositId}`, 'DELETE');\n};\n\n// API Functions for Withdrawals with mock data fallback\nexport const getAccountWithdrawals = async accountId => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/withdrawals`);\n  } catch (error) {\n    console.error(\"Error in getAccountWithdrawals, using mock data:\", error);\n    // Return mock withdrawal\n    return [{\n      \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\n      \"type\": \"withdrawal\",\n      \"transaction_date\": new Date().toISOString().split('T')[0],\n      \"status\": \"completed\",\n      \"medium\": \"balance\",\n      \"amount\": 250,\n      \"description\": \"ATM withdrawal (mock)\"\n    }];\n  }\n};\nexport const getWithdrawalById = withdrawalId => {\n  return apiRequest(`/withdrawals/${withdrawalId}`);\n};\nexport const createWithdrawal = async (accountId, withdrawalData) => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/withdrawals`, 'POST', withdrawalData);\n  } catch (error) {\n    console.error(\"Error in createWithdrawal, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...withdrawalData,\n        \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\n        \"account_id\": accountId\n      }\n    };\n  }\n};\nexport const updateWithdrawal = (withdrawalId, withdrawalData) => {\n  return apiRequest(`/withdrawals/${withdrawalId}`, 'PUT', withdrawalData);\n};\nexport const deleteWithdrawal = withdrawalId => {\n  return apiRequest(`/withdrawals/${withdrawalId}`, 'DELETE');\n};\n\n// API Functions for Transfers with mock data fallback\nexport const getAccountTransfers = async accountId => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/transfers`);\n  } catch (error) {\n    console.error(\"Error in getAccountTransfers, using mock data:\", error);\n    // Return mock transfer\n    return [{\n      \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\n      \"type\": \"transfer\",\n      \"transaction_date\": new Date().toISOString().split('T')[0],\n      \"status\": \"completed\",\n      \"medium\": \"balance\",\n      \"payer_id\": accountId,\n      \"payee_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\n      \"amount\": 500,\n      \"description\": \"Transfer to savings (mock)\"\n    }];\n  }\n};\nexport const getTransferById = transferId => {\n  return apiRequest(`/transfers/${transferId}`);\n};\nexport const createTransfer = async (accountId, transferData) => {\n  try {\n    return await apiRequest(`/accounts/${accountId}/transfers`, 'POST', transferData);\n  } catch (error) {\n    console.error(\"Error in createTransfer, returning mock success:\", error);\n    return {\n      success: true,\n      objectCreated: {\n        ...transferData,\n        \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\n        \"payer_id\": accountId\n      }\n    };\n  }\n};\nexport const updateTransfer = (transferId, transferData) => {\n  return apiRequest(`/transfers/${transferId}`, 'PUT', transferData);\n};\nexport const deleteTransfer = transferId => {\n  return apiRequest(`/transfers/${transferId}`, 'DELETE');\n};\n\n// API Functions for ATMs and Branches with mock data fallback\nexport const getATMs = async (lat, lng, rad) => {\n  try {\n    return await apiRequest(`/atms?lat=${lat}&lng=${lng}&rad=${rad}`);\n  } catch (error) {\n    console.error(\"Error in getATMs, using mock data:\", error);\n    // Return mock ATMs\n    return [{\n      \"_id\": \"mock-atm-id-1\",\n      \"name\": \"Downtown ATM\",\n      \"language_list\": [\"English\", \"Spanish\"],\n      \"geocode\": {\n        \"lat\": lat + 0.01,\n        \"lng\": lng + 0.01\n      },\n      \"hours\": [\"24/7\"],\n      \"accessibility\": true,\n      \"amount_left\": 2500\n    }, {\n      \"_id\": \"mock-atm-id-2\",\n      \"name\": \"Shopping Mall ATM\",\n      \"language_list\": [\"English\", \"Spanish\", \"French\"],\n      \"geocode\": {\n        \"lat\": lat - 0.01,\n        \"lng\": lng - 0.01\n      },\n      \"hours\": [\"9:00-21:00\"],\n      \"accessibility\": true,\n      \"amount_left\": 1800\n    }];\n  }\n};\nexport const getATMById = atmId => {\n  return apiRequest(`/atms/${atmId}`);\n};\nexport const getBranches = async () => {\n  try {\n    return await apiRequest('/branches');\n  } catch (error) {\n    console.error(\"Error in getBranches, using mock data:\", error);\n    // Return mock branches\n    return [{\n      \"_id\": \"mock-branch-id-1\",\n      \"name\": \"Capital One Main Branch\",\n      \"hours\": [\"Mon-Fri: 9:00-17:00\", \"Sat: 10:00-14:00\"],\n      \"phone_number\": \"202-555-0123\",\n      \"address\": {\n        \"street_number\": \"123\",\n        \"street_name\": \"Financial Ave\",\n        \"city\": \"Washington\",\n        \"state\": \"DC\",\n        \"zip\": \"20001\"\n      }\n    }, {\n      \"_id\": \"mock-branch-id-2\",\n      \"name\": \"Capital One Downtown Branch\",\n      \"hours\": [\"Mon-Fri: 9:00-18:00\"],\n      \"phone_number\": \"202-555-0187\",\n      \"address\": {\n        \"street_number\": \"456\",\n        \"street_name\": \"Market St\",\n        \"city\": \"Washington\",\n        \"state\": \"DC\",\n        \"zip\": \"20002\"\n      }\n    }];\n  }\n};\nexport const getBranchById = branchId => {\n  return apiRequest(`/branches/${branchId}`);\n};\nexport default {\n  getAccounts,\n  getAccountById,\n  getCustomerAccounts,\n  createAccount,\n  updateAccount,\n  deleteAccount,\n  getCustomers,\n  getCustomerById,\n  getCustomerByAccount,\n  createCustomer,\n  updateCustomer,\n  getAccountDeposits,\n  getDepositById,\n  createDeposit,\n  updateDeposit,\n  deleteDeposit,\n  getAccountWithdrawals,\n  getWithdrawalById,\n  createWithdrawal,\n  updateWithdrawal,\n  deleteWithdrawal,\n  getAccountTransfers,\n  getTransferById,\n  createTransfer,\n  updateTransfer,\n  deleteTransfer,\n  getATMs,\n  getATMById,\n  getBranches,\n  getBranchById\n};","map":{"version":3,"names":["API_KEY","BASE_URL","apiRequest","endpoint","method","body","url","includes","console","log","options","headers","mode","credentials","JSON","stringify","response","fetch","status","warn","ok","errorData","json","error","Error","message","jsonError","success","respText","text","substring","length","parse","createMockData","customerId","Math","floor","random","customer","accounts","getAccounts","type","queryParam","getAccountById","accountId","getCustomerAccounts","createAccount","accountData","objectCreated","updateAccount","deleteAccount","getCustomers","getCustomerById","getCustomerByAccount","createCustomer","customerData","updateCustomer","getAccountDeposits","Date","toISOString","split","getDepositById","depositId","createDeposit","depositData","updateDeposit","deleteDeposit","getAccountWithdrawals","getWithdrawalById","withdrawalId","createWithdrawal","withdrawalData","updateWithdrawal","deleteWithdrawal","getAccountTransfers","getTransferById","transferId","createTransfer","transferData","updateTransfer","deleteTransfer","getATMs","lat","lng","rad","getATMById","atmId","getBranches","getBranchById","branchId"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/services/capitalOneService.js"],"sourcesContent":["const API_KEY = 'f1fbb5f9a7bfdc1597fafdf76476cfa7';\r\nconst BASE_URL = 'https://api.nessieisreal.com';\r\n\r\n// Helper function to handle fetch requests\r\nconst apiRequest = async (endpoint, method = 'GET', body = null) => {\r\n  const url = `${BASE_URL}${endpoint}${endpoint.includes('?') ? '&' : '?'}key=${API_KEY}`;\r\n  \r\n  console.log(`Making ${method} request to: ${url}`);\r\n\r\n  const options = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json'\r\n    },\r\n    mode: 'cors', // Try explicit CORS mode\r\n    credentials: 'same-origin'\r\n  };\r\n\r\n  if (body && (method === 'POST' || method === 'PUT')) {\r\n    options.body = JSON.stringify(body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, options);\r\n    \r\n    // Log the response status\r\n    console.log(`Response status: ${response.status}`);\r\n    \r\n    // For debugging - log full response\r\n    console.log('Response headers:', response.headers);\r\n    \r\n    // Special handling for 404s which might be API endpoints that don't exist\r\n    if (response.status === 404) {\r\n      console.warn(`Endpoint not found: ${endpoint}`);\r\n      // Return empty array for lists, null for single objects\r\n      return endpoint.includes('accounts') || \r\n             endpoint.includes('customers') || \r\n             endpoint.includes('deposits') || \r\n             endpoint.includes('transfers') || \r\n             endpoint.includes('withdrawals') ? [] : null;\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      try {\r\n        const errorData = await response.json();\r\n        console.error('API error data:', errorData);\r\n        throw new Error(errorData.message || `API request failed with status ${response.status}`);\r\n      } catch (jsonError) {\r\n        // If we can't parse the error as JSON, just throw a basic error\r\n        throw new Error(`API request failed with status ${response.status}`);\r\n      }\r\n    }\r\n    \r\n    if (response.status === 204) {\r\n      return { success: true };\r\n    }\r\n    \r\n    try {\r\n      // For debugging - try to get response text\r\n      const respText = await response.text();\r\n      console.log('Response text:', respText.substring(0, 200) + (respText.length > 200 ? '...' : ''));\r\n      \r\n      // Parse the text back to JSON\r\n      return respText ? JSON.parse(respText) : {};\r\n    } catch (jsonError) {\r\n      console.error('Error parsing JSON response:', jsonError);\r\n      throw new Error('Invalid response format from API');\r\n    }\r\n  } catch (error) {\r\n    console.error('API request error:', error);\r\n    \r\n    // If this is a network error, show a more helpful message\r\n    if (error.message === 'Failed to fetch') {\r\n      throw new Error('Network error: Could not connect to Capital One API. This may be due to a CORS restriction.');\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mock data functions - use these when API requests fail\r\nconst createMockData = () => {\r\n  const customerId = \"mock-customer-id-\" + Math.floor(Math.random() * 1000000);\r\n  \r\n  const customer = {\r\n    \"_id\": customerId,\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Doe\",\r\n    \"address\": {\r\n      \"street_number\": \"123\",\r\n      \"street_name\": \"Main St\",\r\n      \"city\": \"Washington\",\r\n      \"state\": \"DC\",\r\n      \"zip\": \"20001\"\r\n    }\r\n  };\r\n  \r\n  const accounts = [\r\n    {\r\n      \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n      \"type\": \"Checking\",\r\n      \"nickname\": \"Primary Checking\",\r\n      \"rewards\": 10,\r\n      \"balance\": 5000,\r\n      \"account_number\": \"123456789\",\r\n      \"customer_id\": customerId\r\n    },\r\n    {\r\n      \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n      \"type\": \"Savings\",\r\n      \"nickname\": \"Emergency Fund\",\r\n      \"rewards\": 25,\r\n      \"balance\": 10000,\r\n      \"account_number\": \"987654321\",\r\n      \"customer_id\": customerId\r\n    },\r\n    {\r\n      \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n      \"type\": \"Credit Card\",\r\n      \"nickname\": \"Rewards Card\",\r\n      \"rewards\": 100,\r\n      \"balance\": 1500,\r\n      \"account_number\": \"555555555\",\r\n      \"customer_id\": customerId\r\n    }\r\n  ];\r\n  \r\n  return { customer, accounts };\r\n};\r\n\r\n// API Functions for Accounts with fallback to mock data\r\nexport const getAccounts = async (type = '') => {\r\n  try {\r\n    const queryParam = type ? `?type=${type}` : '';\r\n    return await apiRequest(`/accounts${queryParam}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccounts, using mock data:\", error);\r\n    return createMockData().accounts;\r\n  }\r\n};\r\n\r\nexport const getAccountById = async (accountId) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountById, using mock data:\", error);\r\n    return createMockData().accounts[0];\r\n  }\r\n};\r\n\r\nexport const getCustomerAccounts = async (customerId) => {\r\n  try {\r\n    return await apiRequest(`/customers/${customerId}/accounts`);\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomerAccounts, using mock data:\", error);\r\n    return createMockData().accounts;\r\n  }\r\n};\r\n\r\nexport const createAccount = async (customerId, accountData) => {\r\n  try {\r\n    return await apiRequest(`/customers/${customerId}/accounts`, 'POST', accountData);\r\n  } catch (error) {\r\n    console.error(\"Error in createAccount, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...accountData, \r\n        \"_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"customer_id\": customerId\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateAccount = (accountId, accountData) => {\r\n  return apiRequest(`/accounts/${accountId}`, 'PUT', accountData);\r\n};\r\n\r\nexport const deleteAccount = (accountId) => {\r\n  return apiRequest(`/accounts/${accountId}`, 'DELETE');\r\n};\r\n\r\n// API Functions for Customers with fallback to mock data\r\nexport const getCustomers = async () => {\r\n  try {\r\n    return await apiRequest('/customers');\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomers, using mock data:\", error);\r\n    return [createMockData().customer];\r\n  }\r\n};\r\n\r\nexport const getCustomerById = async (customerId) => {\r\n  try {\r\n    return await apiRequest(`/customers/${customerId}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomerById, using mock data:\", error);\r\n    return createMockData().customer;\r\n  }\r\n};\r\n\r\nexport const getCustomerByAccount = async (accountId) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/customer`);\r\n  } catch (error) {\r\n    console.error(\"Error in getCustomerByAccount, using mock data:\", error);\r\n    return createMockData().customer;\r\n  }\r\n};\r\n\r\nexport const createCustomer = async (customerData) => {\r\n  try {\r\n    return await apiRequest('/customers', 'POST', customerData);\r\n  } catch (error) {\r\n    console.error(\"Error in createCustomer, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...customerData, \r\n        \"_id\": \"mock-customer-id-\" + Math.floor(Math.random() * 1000000) \r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateCustomer = (customerId, customerData) => {\r\n  return apiRequest(`/customers/${customerId}`, 'PUT', customerData);\r\n};\r\n\r\n// API Functions for Deposits with mock data fallback\r\nexport const getAccountDeposits = async (accountId) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/deposits`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountDeposits, using mock data:\", error);\r\n    // Return mock deposit\r\n    return [\r\n      {\r\n        \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"type\": \"deposit\",\r\n        \"transaction_date\": new Date().toISOString().split('T')[0],\r\n        \"status\": \"completed\",\r\n        \"medium\": \"balance\",\r\n        \"amount\": 1000,\r\n        \"description\": \"Salary deposit (mock)\"\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getDepositById = (depositId) => {\r\n  return apiRequest(`/deposits/${depositId}`);\r\n};\r\n\r\nexport const createDeposit = async (accountId, depositData) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/deposits`, 'POST', depositData);\r\n  } catch (error) {\r\n    console.error(\"Error in createDeposit, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...depositData, \r\n        \"_id\": \"mock-deposit-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"account_id\": accountId\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateDeposit = (depositId, depositData) => {\r\n  return apiRequest(`/deposits/${depositId}`, 'PUT', depositData);\r\n};\r\n\r\nexport const deleteDeposit = (depositId) => {\r\n  return apiRequest(`/deposits/${depositId}`, 'DELETE');\r\n};\r\n\r\n// API Functions for Withdrawals with mock data fallback\r\nexport const getAccountWithdrawals = async (accountId) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/withdrawals`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountWithdrawals, using mock data:\", error);\r\n    // Return mock withdrawal\r\n    return [\r\n      {\r\n        \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"type\": \"withdrawal\",\r\n        \"transaction_date\": new Date().toISOString().split('T')[0],\r\n        \"status\": \"completed\",\r\n        \"medium\": \"balance\",\r\n        \"amount\": 250,\r\n        \"description\": \"ATM withdrawal (mock)\"\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getWithdrawalById = (withdrawalId) => {\r\n  return apiRequest(`/withdrawals/${withdrawalId}`);\r\n};\r\n\r\nexport const createWithdrawal = async (accountId, withdrawalData) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/withdrawals`, 'POST', withdrawalData);\r\n  } catch (error) {\r\n    console.error(\"Error in createWithdrawal, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...withdrawalData, \r\n        \"_id\": \"mock-withdrawal-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"account_id\": accountId\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateWithdrawal = (withdrawalId, withdrawalData) => {\r\n  return apiRequest(`/withdrawals/${withdrawalId}`, 'PUT', withdrawalData);\r\n};\r\n\r\nexport const deleteWithdrawal = (withdrawalId) => {\r\n  return apiRequest(`/withdrawals/${withdrawalId}`, 'DELETE');\r\n};\r\n\r\n// API Functions for Transfers with mock data fallback\r\nexport const getAccountTransfers = async (accountId) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/transfers`);\r\n  } catch (error) {\r\n    console.error(\"Error in getAccountTransfers, using mock data:\", error);\r\n    // Return mock transfer\r\n    return [\r\n      {\r\n        \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"type\": \"transfer\",\r\n        \"transaction_date\": new Date().toISOString().split('T')[0],\r\n        \"status\": \"completed\",\r\n        \"medium\": \"balance\",\r\n        \"payer_id\": accountId,\r\n        \"payee_id\": \"mock-account-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"amount\": 500,\r\n        \"description\": \"Transfer to savings (mock)\"\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getTransferById = (transferId) => {\r\n  return apiRequest(`/transfers/${transferId}`);\r\n};\r\n\r\nexport const createTransfer = async (accountId, transferData) => {\r\n  try {\r\n    return await apiRequest(`/accounts/${accountId}/transfers`, 'POST', transferData);\r\n  } catch (error) {\r\n    console.error(\"Error in createTransfer, returning mock success:\", error);\r\n    return { \r\n      success: true, \r\n      objectCreated: { \r\n        ...transferData,\r\n        \"_id\": \"mock-transfer-id-\" + Math.floor(Math.random() * 1000000),\r\n        \"payer_id\": accountId\r\n      } \r\n    };\r\n  }\r\n};\r\n\r\nexport const updateTransfer = (transferId, transferData) => {\r\n  return apiRequest(`/transfers/${transferId}`, 'PUT', transferData);\r\n};\r\n\r\nexport const deleteTransfer = (transferId) => {\r\n  return apiRequest(`/transfers/${transferId}`, 'DELETE');\r\n};\r\n\r\n// API Functions for ATMs and Branches with mock data fallback\r\nexport const getATMs = async (lat, lng, rad) => {\r\n  try {\r\n    return await apiRequest(`/atms?lat=${lat}&lng=${lng}&rad=${rad}`);\r\n  } catch (error) {\r\n    console.error(\"Error in getATMs, using mock data:\", error);\r\n    // Return mock ATMs\r\n    return [\r\n      {\r\n        \"_id\": \"mock-atm-id-1\",\r\n        \"name\": \"Downtown ATM\",\r\n        \"language_list\": [\"English\", \"Spanish\"],\r\n        \"geocode\": { \"lat\": lat + 0.01, \"lng\": lng + 0.01 },\r\n        \"hours\": [\"24/7\"],\r\n        \"accessibility\": true,\r\n        \"amount_left\": 2500\r\n      },\r\n      {\r\n        \"_id\": \"mock-atm-id-2\",\r\n        \"name\": \"Shopping Mall ATM\",\r\n        \"language_list\": [\"English\", \"Spanish\", \"French\"],\r\n        \"geocode\": { \"lat\": lat - 0.01, \"lng\": lng - 0.01 },\r\n        \"hours\": [\"9:00-21:00\"],\r\n        \"accessibility\": true,\r\n        \"amount_left\": 1800\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getATMById = (atmId) => {\r\n  return apiRequest(`/atms/${atmId}`);\r\n};\r\n\r\nexport const getBranches = async () => {\r\n  try {\r\n    return await apiRequest('/branches');\r\n  } catch (error) {\r\n    console.error(\"Error in getBranches, using mock data:\", error);\r\n    // Return mock branches\r\n    return [\r\n      {\r\n        \"_id\": \"mock-branch-id-1\",\r\n        \"name\": \"Capital One Main Branch\",\r\n        \"hours\": [\"Mon-Fri: 9:00-17:00\", \"Sat: 10:00-14:00\"],\r\n        \"phone_number\": \"202-555-0123\",\r\n        \"address\": {\r\n          \"street_number\": \"123\",\r\n          \"street_name\": \"Financial Ave\",\r\n          \"city\": \"Washington\",\r\n          \"state\": \"DC\",\r\n          \"zip\": \"20001\"\r\n        }\r\n      },\r\n      {\r\n        \"_id\": \"mock-branch-id-2\",\r\n        \"name\": \"Capital One Downtown Branch\",\r\n        \"hours\": [\"Mon-Fri: 9:00-18:00\"],\r\n        \"phone_number\": \"202-555-0187\",\r\n        \"address\": {\r\n          \"street_number\": \"456\",\r\n          \"street_name\": \"Market St\",\r\n          \"city\": \"Washington\",\r\n          \"state\": \"DC\",\r\n          \"zip\": \"20002\"\r\n        }\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getBranchById = (branchId) => {\r\n  return apiRequest(`/branches/${branchId}`);\r\n};\r\n\r\nexport default {\r\n  getAccounts,\r\n  getAccountById,\r\n  getCustomerAccounts,\r\n  createAccount,\r\n  updateAccount,\r\n  deleteAccount,\r\n  getCustomers,\r\n  getCustomerById,\r\n  getCustomerByAccount,\r\n  createCustomer,\r\n  updateCustomer,\r\n  getAccountDeposits,\r\n  getDepositById,\r\n  createDeposit,\r\n  updateDeposit,\r\n  deleteDeposit,\r\n  getAccountWithdrawals,\r\n  getWithdrawalById,\r\n  createWithdrawal,\r\n  updateWithdrawal,\r\n  deleteWithdrawal,\r\n  getAccountTransfers,\r\n  getTransferById,\r\n  createTransfer,\r\n  updateTransfer,\r\n  deleteTransfer,\r\n  getATMs,\r\n  getATMById,\r\n  getBranches,\r\n  getBranchById\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}