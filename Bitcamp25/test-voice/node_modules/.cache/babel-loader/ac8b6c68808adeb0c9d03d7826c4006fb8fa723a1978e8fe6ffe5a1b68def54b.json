{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nexport function createArgMinMaxKernelConfig(kernelName) {\n  let wasmFunc;\n  function setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, ['number', 'number', 'number', 'number', 'number' // out_id\n    ]);\n  }\n  function kernelFunc(args) {\n    const {\n      backend,\n      inputs,\n      attrs\n    } = args;\n    const {\n      axis\n    } = attrs;\n    const {\n      x\n    } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    let inputId = xId;\n    let input = x;\n    const {\n      transposed,\n      axes,\n      inputWasTransposed\n    } = permuteAxesAndTranspose(x, axis, backend);\n    if (inputWasTransposed) {\n      const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n      if (transposedId !== xId) {\n        // transpose was not a no-op. We will need to dispose of this\n        // once we are done.\n        input = transposed;\n        inputId = transposedId;\n      }\n    }\n    const outShape = input.shape.slice(0, -1);\n    const out = backend.makeOutput(outShape, 'int32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const outerSize = util.sizeFromShape(out.shape);\n    const innerSize = input.shape[axes[0]];\n    wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n    if (inputWasTransposed) {\n      // dispose of the transposed tensor.\n      backend.disposeData(transposed.dataId);\n    }\n    return out;\n  }\n  return {\n    kernelName,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc: kernelFunc\n  };\n}","map":{"version":3,"names":["util","permuteAxesAndTranspose","CppDType","createArgMinMaxKernelConfig","kernelName","wasmFunc","setupFunc","backend","wasm","cwrap","kernelFunc","args","inputs","attrs","axis","x","xId","dataIdMap","get","dataId","id","inputId","input","transposed","axes","inputWasTransposed","transposedId","outShape","shape","slice","out","makeOutput","outId","outerSize","sizeFromShape","innerSize","dtype","disposeData","backendName"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\argminmax_kernel.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ArgMaxAttrs, ArgMaxInputs, ArgMinAttrs, ArgMinInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\nimport {CppDType} from './types';\n\nexport function createArgMinMaxKernelConfig(kernelName: 'ArgMin'|\n                                            'ArgMax'): KernelConfig {\n  let wasmFunc: (\n      xId: number, dtype: number, outerSize: number, innerSize: number,\n      outId: number) => void;\n\n  function setupFunc(backend: BackendWasm) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, [\n      'number',  // x_id\n      'number',  // dtype\n      'number',  // outer_size\n      'number',  // inner_size\n      'number'   // out_id\n    ]);\n  }\n\n  function kernelFunc(args: {\n    backend: BackendWasm,\n    inputs: ArgMinInputs&ArgMaxInputs,\n    attrs: ArgMinAttrs&ArgMaxAttrs,\n  }): TensorInfo {\n    const {backend, inputs, attrs} = args;\n    const {axis} = attrs;\n    const {x} = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    let inputId = xId;\n    let input = x;\n\n    const {transposed, axes, inputWasTransposed} =\n        permuteAxesAndTranspose(x, axis, backend);\n\n    if (inputWasTransposed) {\n      const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n      if (transposedId !== xId) {\n        // transpose was not a no-op. We will need to dispose of this\n        // once we are done.\n        input = transposed;\n        inputId = transposedId;\n      }\n    }\n\n    const outShape = input.shape.slice(0, -1);\n    const out = backend.makeOutput(outShape, 'int32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const outerSize = util.sizeFromShape(out.shape);\n    const innerSize = input.shape[axes[0]];\n    wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n\n    if (inputWasTransposed) {\n      // dispose of the transposed tensor.\n      backend.disposeData(transposed.dataId);\n    }\n\n    return out;\n  }\n\n  return {\n    kernelName,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc: kernelFunc as unknown as KernelFunc,\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAoGA,IAAI,QAAO,uBAAuB;AAItI,SAAQC,uBAAuB,QAAO,gBAAgB;AACtD,SAAQC,QAAQ,QAAO,SAAS;AAEhC,OAAM,SAAUC,2BAA2BA,CAACC,UACQ;EAClD,IAAIC,QAEsB;EAE1B,SAASC,SAASA,CAACC,OAAoB;IACrCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACL,UAAU,EAAE,IAAI,CAAC,YAAY,CACzD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;IAAA,CACZ,CAAC;EACJ;EAEA,SAASM,UAAUA,CAACC,IAInB;IACC,MAAM;MAACJ,OAAO;MAAEK,MAAM;MAAEC;IAAK,CAAC,GAAGF,IAAI;IACrC,MAAM;MAACG;IAAI,CAAC,GAAGD,KAAK;IACpB,MAAM;MAACE;IAAC,CAAC,GAAGH,MAAM;IAClB,MAAMI,GAAG,GAAGT,OAAO,CAACU,SAAS,CAACC,GAAG,CAACH,CAAC,CAACI,MAAM,CAAC,CAACC,EAAE;IAC9C,IAAIC,OAAO,GAAGL,GAAG;IACjB,IAAIM,KAAK,GAAGP,CAAC;IAEb,MAAM;MAACQ,UAAU;MAAEC,IAAI;MAAEC;IAAkB,CAAC,GACxCxB,uBAAuB,CAACc,CAAC,EAAED,IAAI,EAAEP,OAAO,CAAC;IAE7C,IAAIkB,kBAAkB,EAAE;MACtB,MAAMC,YAAY,GAAGnB,OAAO,CAACU,SAAS,CAACC,GAAG,CAACK,UAAU,CAACJ,MAAM,CAAC,CAACC,EAAE;MAChE,IAAIM,YAAY,KAAKV,GAAG,EAAE;QACxB;QACA;QACAM,KAAK,GAAGC,UAAU;QAClBF,OAAO,GAAGK,YAAY;;;IAI1B,MAAMC,QAAQ,GAAGL,KAAK,CAACM,KAAK,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,MAAMC,GAAG,GAAGvB,OAAO,CAACwB,UAAU,CAACJ,QAAQ,EAAE,OAAO,CAAC;IACjD,MAAMK,KAAK,GAAGzB,OAAO,CAACU,SAAS,CAACC,GAAG,CAACY,GAAG,CAACX,MAAM,CAAC,CAACC,EAAE;IAClD,MAAMa,SAAS,GAAGjC,IAAI,CAACkC,aAAa,CAACJ,GAAG,CAACF,KAAK,CAAC;IAC/C,MAAMO,SAAS,GAAGb,KAAK,CAACM,KAAK,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC;IACtCnB,QAAQ,CAACgB,OAAO,EAAEnB,QAAQ,CAACoB,KAAK,CAACc,KAAK,CAAC,EAAEH,SAAS,EAAEE,SAAS,EAAEH,KAAK,CAAC;IAErE,IAAIP,kBAAkB,EAAE;MACtB;MACAlB,OAAO,CAAC8B,WAAW,CAACd,UAAU,CAACJ,MAAM,CAAC;;IAGxC,OAAOW,GAAG;EACZ;EAEA,OAAO;IACL1B,UAAU;IACVkC,WAAW,EAAE,MAAM;IACnBhC,SAAS;IACTI,UAAU,EAAEA;GACb;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}