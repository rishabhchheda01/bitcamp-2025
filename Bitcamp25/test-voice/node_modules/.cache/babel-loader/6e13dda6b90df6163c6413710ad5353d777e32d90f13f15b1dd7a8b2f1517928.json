{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scatter_util, ScatterNd, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmScatterNd;\nfunction setup(backend) {\n  wasmScatterNd = backend.wasm.cwrap(ScatterNd, null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'array', 'number', 'number' // outId\n  ]);\n}\nfunction scatterNd(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const out = backend.makeOutput(shape, updates.dtype);\n  if (util.sizeFromShape(shape) === 0) {\n    return out;\n  }\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = scatter_util.calculateShapes(updates, indices, shape);\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  const updatesData = backend.dataIdMap.get(updates.dataId);\n  const updatesId = updatesData.id;\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmScatterNd(indicesId, updatesId, CppDType[updates.dtype], sliceRank, numUpdates, sliceSize, stridesBytes, outputSize, outId);\n  return out;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: scatterNd\n};","map":{"version":3,"names":["scatter_util","ScatterNd","util","CppDType","wasmScatterNd","setup","backend","wasm","cwrap","scatterNd","args","inputs","attrs","indices","updates","shape","out","makeOutput","dtype","sizeFromShape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","indicesData","dataIdMap","get","dataId","indicesId","id","updatesData","updatesId","stridesBytes","Uint8Array","Int32Array","buffer","outId","scatterNdConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\ScatterNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, scatter_util, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmScatterNd: (\n    indicesId: number, updatesId: number, dtype: CppDType, sliceRank: number,\n    numUpdates: number, sliceSize: number, strides: Uint8Array,\n    outputSize: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmScatterNd = backend.wasm.cwrap(ScatterNd, null /*void*/, [\n    'number',  // indicesId\n    'number',  // updatesId\n    'number',  // dtype\n    'number',  // sliceRank\n    'number',  // numUpdates\n    'number',  // sliceSize\n    'array',   // strides\n    'number',  // outputSize\n    'number'   // outId\n  ]);\n}\n\nfunction scatterNd(\n    args:\n        {backend: BackendWasm, inputs: ScatterNdInputs, attrs: ScatterNdAttrs}):\n    TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const out = backend.makeOutput(shape, updates.dtype);\n  if (util.sizeFromShape(shape) === 0) {\n    return out;\n  }\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      scatter_util.calculateShapes(updates, indices, shape);\n\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n\n  const updatesData = backend.dataIdMap.get(updates.dataId);\n  const updatesId = updatesData.id;\n\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmScatterNd(\n      indicesId, updatesId, CppDType[updates.dtype], sliceRank, numUpdates,\n      sliceSize, stridesBytes, outputSize, outId);\n\n  return out;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,EAAEC,SAAS,EAA+CC,IAAI,QAAO,uBAAuB;AAI1I,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,aAG0C;AAE9C,SAASC,KAAKA,CAACC,OAAoB;EACjCF,aAAa,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,SAAS,EAAE,IAAI,CAAC,UAAU,CAC3D,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASQ,SAASA,CACdC,IAC0E;EAE5E,MAAM;IAACJ,OAAO;IAAEK,MAAM;IAAEC;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,OAAO;IAAEC;EAAO,CAAC,GAAGH,MAAM;EACjC,MAAM;IAACI;EAAK,CAAC,GAAGH,KAAK;EAErB,MAAMI,GAAG,GAAGV,OAAO,CAACW,UAAU,CAACF,KAAK,EAAED,OAAO,CAACI,KAAK,CAAC;EACpD,IAAIhB,IAAI,CAACiB,aAAa,CAACJ,KAAK,CAAC,KAAK,CAAC,EAAE;IACnC,OAAOC,GAAG;;EAGZ,MAAM;IAACI,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAU,CAAC,GACzDxB,YAAY,CAACyB,eAAe,CAACX,OAAO,EAAED,OAAO,EAAEE,KAAK,CAAC;EAEzD,MAAMW,WAAW,GAAGpB,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACf,OAAO,CAACgB,MAAM,CAAC;EACzD,MAAMC,SAAS,GAAGJ,WAAW,CAACK,EAAE;EAEhC,MAAMC,WAAW,GAAG1B,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACd,OAAO,CAACe,MAAM,CAAC;EACzD,MAAMI,SAAS,GAAGD,WAAW,CAACD,EAAE;EAEhC,MAAMG,YAAY,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACb,OAAO,CAAC,CAACc,MAAM,CAAC;EAEnE,MAAMC,KAAK,GAAGhC,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACZ,GAAG,CAACa,MAAM,CAAC,CAACE,EAAE;EAClD3B,aAAa,CACT0B,SAAS,EAAEG,SAAS,EAAE9B,QAAQ,CAACW,OAAO,CAACI,KAAK,CAAC,EAAEE,SAAS,EAAEC,UAAU,EACpEC,SAAS,EAAEY,YAAY,EAAEV,UAAU,EAAEc,KAAK,CAAC;EAE/C,OAAOtB,GAAG;AACZ;AAEA,OAAO,MAAMuB,eAAe,GAAiB;EAC3CC,UAAU,EAAEvC,SAAS;EACrBwC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAErC,KAAK;EAChBsC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}