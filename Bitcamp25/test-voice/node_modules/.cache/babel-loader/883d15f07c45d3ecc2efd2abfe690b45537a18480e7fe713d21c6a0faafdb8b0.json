{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util } from '@tensorflow/tfjs-core';\nlet wasmAvgPool;\nfunction setup(backend) {\n  wasmAvgPool = backend.wasm.cwrap(AvgPool, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction avgPool(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const x = inputs.x;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const channels = convInfo.inChannels;\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  if (convInfo.dilationWidth !== 1 || convInfo.dilationHeight !== 1) {\n    throw new Error(`was backend only supports average pooling with dilation = [1, 1], ` + `got [${convInfo.dilationHeight}, ${convInfo.dilationWidth}].`);\n  }\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmAvgPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, strideHeight, strideWidth, channels, outId);\n  return out;\n}\nexport const avgPoolConfig = {\n  kernelName: AvgPool,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool\n};","map":{"version":3,"names":["AvgPool","backend_util","wasmAvgPool","setup","backend","wasm","cwrap","avgPool","args","inputs","attrs","x","xId","dataIdMap","get","dataId","id","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","strideHeight","strideWidth","channels","inChannels","dataFormat","Error","dilationWidth","dilationHeight","out","makeOutput","outShape","outId","avgPoolConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\AvgPool.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmAvgPool: (\n    xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n    filterHeight: number, filterWidth: number, padTop: number, padRight: number,\n    padBottom: number, padLeft: number, strideHeight: number,\n    strideWidth: number, channels: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmAvgPool = backend.wasm.cwrap(AvgPool, null /* void */, [\n    'number',  // xId\n    'number',  // batchSize\n    'number',  // inputHeight\n    'number',  // inputWidth\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // padTop\n    'number',  // padRight\n    'number',  // padBottom\n    'number',  // padLeft\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // channels\n    'number',  // outId\n  ]);\n}\n\nfunction avgPool(\n    args: {inputs: AvgPoolInputs, backend: BackendWasm, attrs: AvgPoolAttrs}) {\n  const {inputs, attrs, backend} = args;\n\n  const x = inputs.x as Tensor4D;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const channels = convInfo.inChannels;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(\n        `wasm backend does not support dataFormat:'` +\n        `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  if (convInfo.dilationWidth !== 1 || convInfo.dilationHeight !== 1) {\n    throw new Error(\n        `was backend only supports average pooling with dilation = [1, 1], ` +\n        `got [${convInfo.dilationHeight}, ${convInfo.dilationWidth}].`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmAvgPool(\n      xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth,\n      padTop, padRight, padBottom, padLeft, strideHeight, strideWidth, channels,\n      outId);\n  return out;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}