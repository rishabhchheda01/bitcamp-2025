{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { gather_util, GatherNd } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmGatherNd;\nfunction setup(backend) {\n  wasmGatherNd = backend.wasm.cwrap(GatherNd, null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'array', 'number' // outId\n  ]);\n}\nfunction gatherNd(args) {\n  const {\n    backend,\n    inputs\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const [resultShape, numSlices, sliceSize, strides] = gather_util.prepareAndValidate(params, indices);\n  const out = backend.makeOutput(resultShape, params.dtype);\n  if (numSlices === 0) {\n    return out;\n  }\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const xData = backend.dataIdMap.get(params.dataId);\n  const xId = xData.id;\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmGatherNd(xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize, stridesBytes, outId);\n  return out;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: gatherNd\n};","map":{"version":3,"names":["gather_util","GatherNd","CppDType","wasmGatherNd","setup","backend","wasm","cwrap","gatherNd","args","inputs","params","indices","resultShape","numSlices","sliceSize","strides","prepareAndValidate","out","makeOutput","dtype","indicesShape","shape","sliceRank","length","xData","dataIdMap","get","dataId","xId","id","indicesData","indicesId","stridesBytes","Uint8Array","Int32Array","buffer","outId","gatherNdConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\GatherNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {gather_util, GatherNd, GatherNdInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmGatherNd: (\n    xId: number, dtype: CppDType, indicesId: number, numSlices: number,\n    sliceRank: number, sliceSize: number, strides: Uint8Array, outId: number) =>\n    void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmGatherNd = backend.wasm.cwrap(GatherNd, null /*void*/, [\n    'number',  // xId\n    'number',  // dtype\n    'number',  // indicesId\n    'number',  // numSlices\n    'number',  // sliceRank\n    'number',  // sliceSize\n    'array',   // strides\n    'number'   // outId\n  ]);\n}\n\nfunction gatherNd(args: {backend: BackendWasm, inputs: GatherNdInputs}):\n    TensorInfo {\n  const {backend, inputs} = args;\n  const {params, indices} = inputs;\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      gather_util.prepareAndValidate(params, indices);\n\n  const out = backend.makeOutput(resultShape, params.dtype);\n  if (numSlices === 0) {\n    return out;\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const xData = backend.dataIdMap.get(params.dataId);\n  const xId = xData.id;\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmGatherNd(\n      xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize,\n      stridesBytes, outId);\n\n  return out;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: gatherNd\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,WAAW,EAAEC,QAAQ,QAAiD,uBAAuB;AAIrG,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,YAGI;AAER,SAASC,KAAKA,CAACC,OAAoB;EACjCF,YAAY,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,QAAQ,EAAE,IAAI,CAAC,UAAU,CACzD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASO,QAAQA,CAACC,IAAoD;EAEpE,MAAM;IAACJ,OAAO;IAAEK;EAAM,CAAC,GAAGD,IAAI;EAC9B,MAAM;IAACE,MAAM;IAAEC;EAAO,CAAC,GAAGF,MAAM;EAEhC,MAAM,CAACG,WAAW,EAAEC,SAAS,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAC9ChB,WAAW,CAACiB,kBAAkB,CAACN,MAAM,EAAEC,OAAO,CAAC;EAEnD,MAAMM,GAAG,GAAGb,OAAO,CAACc,UAAU,CAACN,WAAW,EAAEF,MAAM,CAACS,KAAK,CAAC;EACzD,IAAIN,SAAS,KAAK,CAAC,EAAE;IACnB,OAAOI,GAAG;;EAGZ,MAAMG,YAAY,GAAGT,OAAO,CAACU,KAAK;EAClC,MAAMC,SAAS,GAAGF,YAAY,CAACA,YAAY,CAACG,MAAM,GAAG,CAAC,CAAC;EAEvD,MAAMC,KAAK,GAAGpB,OAAO,CAACqB,SAAS,CAACC,GAAG,CAAChB,MAAM,CAACiB,MAAM,CAAC;EAClD,MAAMC,GAAG,GAAGJ,KAAK,CAACK,EAAE;EACpB,MAAMC,WAAW,GAAG1B,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACf,OAAO,CAACgB,MAAM,CAAC;EACzD,MAAMI,SAAS,GAAGD,WAAW,CAACD,EAAE;EAEhC,MAAMG,YAAY,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACnB,OAAO,CAAC,CAACoB,MAAM,CAAC;EAEnE,MAAMC,KAAK,GAAGhC,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACT,GAAG,CAACU,MAAM,CAAC,CAACE,EAAE;EAClD3B,YAAY,CACR0B,GAAG,EAAE3B,QAAQ,CAACS,MAAM,CAACS,KAAK,CAAC,EAAEY,SAAS,EAAElB,SAAS,EAAES,SAAS,EAAER,SAAS,EACvEkB,YAAY,EAAEI,KAAK,CAAC;EAExB,OAAOnB,GAAG;AACZ;AAEA,OAAO,MAAMoB,cAAc,GAAiB;EAC1CC,UAAU,EAAEtC,QAAQ;EACpBuC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAErC,KAAK;EAChBsC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}