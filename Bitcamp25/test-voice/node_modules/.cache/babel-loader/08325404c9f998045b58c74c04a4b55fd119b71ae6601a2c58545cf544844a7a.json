{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity, tensor } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n  const {\n    inputs: {\n      x\n    },\n    backend\n  } = args;\n  if (x.dtype === 'string') {\n    return tensor(backend.readSync(x.dataId), x.shape, x.dtype);\n  }\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const inVals = backend.typedArrayFromHeap(x);\n  const outVals = backend.typedArrayFromHeap(out);\n  outVals.set(inVals);\n  return out;\n}\nexport const identityConfig = {\n  kernelName: Identity,\n  backendName: 'wasm',\n  kernelFunc: identity\n};","map":{"version":3,"names":["Identity","tensor","identity","args","inputs","x","backend","dtype","readSync","dataId","shape","out","makeOutput","inVals","typedArrayFromHeap","outVals","set","identityConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Identity.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, tensor} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nexport function identity(args: {inputs: IdentityInputs, backend: BackendWasm}):\n    TensorInfo {\n  const {inputs: {x}, backend} = args;\n\n  if (x.dtype === 'string') {\n    return tensor(backend.readSync(x.dataId), x.shape, x.dtype);\n  }\n\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const inVals = backend.typedArrayFromHeap(x);\n  const outVals = backend.typedArrayFromHeap(out);\n  outVals.set(inVals);\n  return out;\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'wasm',\n  kernelFunc: identity as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,QAAQ,EAA4CC,MAAM,QAAO,uBAAuB;AAKhG,OAAM,SAAUC,QAAQA,CAACC,IAAoD;EAE3E,MAAM;IAACC,MAAM,EAAE;MAACC;IAAC,CAAC;IAAEC;EAAO,CAAC,GAAGH,IAAI;EAEnC,IAAIE,CAAC,CAACE,KAAK,KAAK,QAAQ,EAAE;IACxB,OAAON,MAAM,CAACK,OAAO,CAACE,QAAQ,CAACH,CAAC,CAACI,MAAM,CAAC,EAAEJ,CAAC,CAACK,KAAK,EAAEL,CAAC,CAACE,KAAK,CAAC;;EAG7D,MAAMI,GAAG,GAAGL,OAAO,CAACM,UAAU,CAACP,CAAC,CAACK,KAAK,EAAEL,CAAC,CAACE,KAAK,CAAC;EAChD,MAAMM,MAAM,GAAGP,OAAO,CAACQ,kBAAkB,CAACT,CAAC,CAAC;EAC5C,MAAMU,OAAO,GAAGT,OAAO,CAACQ,kBAAkB,CAACH,GAAG,CAAC;EAC/CI,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;EACnB,OAAOF,GAAG;AACZ;AAEA,OAAO,MAAMM,cAAc,GAAiB;EAC1CC,UAAU,EAAElB,QAAQ;EACpBmB,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAElB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}