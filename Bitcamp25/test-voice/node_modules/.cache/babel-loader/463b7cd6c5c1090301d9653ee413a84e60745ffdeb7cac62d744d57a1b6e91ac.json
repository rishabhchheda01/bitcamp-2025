{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeBilinear;\nfunction setup(backend) {\n  wasmResizeBilinear = backend.wasm.cwrap(ResizeBilinear, null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction resizeBilinear(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: images\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const xId = xData.id;\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmResizeBilinear(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n  return out;\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"names":["ResizeBilinear","util","cast","wasmResizeBilinear","setup","backend","wasm","cwrap","resizeBilinear","args","inputs","attrs","images","alignCorners","halfPixelCenters","size","newHeight","newWidth","batch","oldHeight","oldWidth","numChannels","shape","outShape","xData","dataIdMap","get","dataId","castedData","dtype","x","xId","id","out","makeOutput","sizeFromShape","outId","disposeData","resizeBilinearConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\ResizeBilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\nlet wasmResizeBilinear: (\n    xId: number, batch: number, oldHeight: number, oldWidth: number,\n    numChannels: number, newHeight: number, newWidth: number,\n    alignCorners: number, halfPixelCenters: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmResizeBilinear = backend.wasm.cwrap(ResizeBilinear, null /*void*/, [\n    'number',  // xId\n    'number',  // batch\n    'number',  // oldHeight\n    'number',  // oldWidth\n    'number',  // numChannels\n    'number',  // newHeight\n    'number',  // newWidth\n    'number',  // alignCorners\n    'number',  // halfPixelCenters\n    'number'   // outId\n  ]);\n}\n\nfunction resizeBilinear(args: {\n  backend: BackendWasm,\n  inputs: ResizeBilinearInputs,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData =\n        cast({backend, inputs: {x: images}, attrs: {dtype: 'float32'}});\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const xId = xData.id;\n\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmResizeBilinear(\n      xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth,\n      alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,cAAc,EAAyDC,IAAI,QAAO,uBAAuB;AAI3I,SAAQC,IAAI,QAAO,QAAQ;AAE3B,IAAIC,kBAGsE;AAE1E,SAASC,KAAKA,CAACC,OAAoB;EACjCF,kBAAkB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,cAAc,EAAE,IAAI,CAAC,UAAU,CACrE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,SAASQ,cAAcA,CAACC,IAIvB;EACC,MAAM;IAACJ,OAAO;IAAEK,MAAM;IAAEC;EAAK,CAAC,GAAGF,IAAI;EAErC,MAAM;IAACG;EAAM,CAAC,GAAGF,MAAM;EACvB,MAAM;IAACG,YAAY;IAAEC,gBAAgB;IAAEC;EAAI,CAAC,GAAGJ,KAAK;EACpD,MAAM,CAACK,SAAS,EAAEC,QAAQ,CAAC,GAAGF,IAAI;EAElC,MAAM,CAACG,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,MAAM,CAACU,KAAK;EAC9D,MAAMC,QAAQ,GAAG,CAACL,KAAK,EAAEF,SAAS,EAAEC,QAAQ,EAAEI,WAAW,CAAC;EAE1D,IAAIG,KAAK,GAAGnB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACd,MAAM,CAACe,MAAM,CAAC;EAChD,IAAIC,UAAU;EACd,IAAIJ,KAAK,CAACK,KAAK,KAAK,SAAS,EAAE;IAC7BD,UAAU,GACN1B,IAAI,CAAC;MAACG,OAAO;MAAEK,MAAM,EAAE;QAACoB,CAAC,EAAElB;MAAM,CAAC;MAAED,KAAK,EAAE;QAACkB,KAAK,EAAE;MAAS;IAAC,CAAC,CAAC;IACnEL,KAAK,GAAGnB,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;;EAElD,MAAMI,GAAG,GAAGP,KAAK,CAACQ,EAAE;EAEpB,MAAMC,GAAG,GAAG5B,OAAO,CAAC6B,UAAU,CAACX,QAAQ,EAAE,SAAS,CAAC;EACnD,IAAItB,IAAI,CAACkC,aAAa,CAACvB,MAAM,CAACU,KAAK,CAAC,KAAK,CAAC,EAAE;IAC1C,OAAOW,GAAG;;EAEZ,MAAMG,KAAK,GAAG/B,OAAO,CAACoB,SAAS,CAACC,GAAG,CAACO,GAAG,CAACN,MAAM,CAAC,CAACK,EAAE;EAElD7B,kBAAkB,CACd4B,GAAG,EAAEb,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEL,SAAS,EAAEC,QAAQ,EACjEJ,YAAY,GAAG,CAAC,GAAG,CAAC,EAAEC,gBAAgB,GAAG,CAAC,GAAG,CAAC,EAAEsB,KAAK,CAAC;EAE1D,IAAIR,UAAU,IAAI,IAAI,EAAE;IACtBvB,OAAO,CAACgC,WAAW,CAACT,UAAU,CAACD,MAAM,CAAC;;EAGxC,OAAOM,GAAG;AACZ;AAEA,OAAO,MAAMK,oBAAoB,GAAiB;EAChDC,UAAU,EAAEvC,cAAc;EAC1BwC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAErC,KAAK;EAChBsC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}