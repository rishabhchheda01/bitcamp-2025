{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2 } from '@tensorflow/tfjs-core';\nlet wasmConv3DBackpropInputV2;\nfunction setup(backend) {\n  wasmConv3DBackpropInputV2 = backend.wasm.cwrap(Conv3DBackpropInputV2, null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // padLeft\n  ]);\n}\nexport function conv3DBackpropInputV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    pad,\n    strides,\n    inputShape\n  } = attrs;\n  if (dy.dtype !== 'float32') {\n    throw new Error(`Tensor dy must have dtype float32, got ${dy.dtype}`);\n  }\n  if (filter.dtype !== 'float32') {\n    throw new Error(`Tensor filter must have dtype float32, got ${filter.dtype}`);\n  }\n  const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, /*dilations=*/1, pad);\n  const dx = backend.makeOutput(convInfo.inShape, dy.dtype);\n  wasmConv3DBackpropInputV2(backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.inChannels, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.outChannels, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);\n  return dx;\n}\nexport const conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: conv3DBackpropInputV2\n};","map":{"version":3,"names":["backend_util","Conv3DBackpropInputV2","wasmConv3DBackpropInputV2","setup","backend","wasm","cwrap","conv3DBackpropInputV2","args","inputs","attrs","dy","filter","pad","strides","inputShape","dtype","Error","convInfo","computeConv3DInfo","shape","dx","makeOutput","inShape","dataIdMap","get","dataId","id","batchSize","inDepth","inHeight","inWidth","inChannels","outDepth","outHeight","outWidth","outChannels","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","filterDepth","filterHeight","filterWidth","padInfo","front","top","left","conv3DBackpropInputV2Config","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Conv3DBackpropInputV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmConv3DBackpropInputV2: (\n    filterId: number, dyId: number, dxId: number, batchSize: number,\n    inDepth: number, inHeight: number, inWidth: number, inChannels: number,\n    outDepth: number, outHeight: number, outWidth: number, outChannels: number,\n    strideDepth: number, strideHeight: number, strideWidth: number,\n    dilationDepth: number, dilationHeight: number, dilationWidth: number,\n    filterDepth: number, filterHeight: number, filterWidth: number,\n    padFront: number, padTop: number, padLeft: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmConv3DBackpropInputV2 = backend.wasm.cwrap(Conv3DBackpropInputV2, null, [\n    'number',  // filterId\n    'number',  // dyId\n    'number',  // dxId\n    'number',  // batchSize\n    'number',  // inDepth\n    'number',  // inHeight\n    'number',  // inWidth\n    'number',  // inChannels\n    'number',  // outDepth\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // outChannels\n    'number',  // strideDepth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // dilationDepth\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // filterDepth\n    'number',  // filterHeight\n    'number',  // filterWidth\n    'number',  // padFront\n    'number',  // padTop\n    'number',  // padLeft\n  ]);\n}\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n  if (dy.dtype !== 'float32') {\n    throw new Error(`Tensor dy must have dtype float32, got ${dy.dtype}`);\n  }\n  if (filter.dtype !== 'float32') {\n    throw new Error(\n        `Tensor filter must have dtype float32, got ${filter.dtype}`);\n  }\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, /*dilations=*/1, pad);\n\n  const dx = backend.makeOutput(convInfo.inShape, dy.dtype);\n\n  wasmConv3DBackpropInputV2(\n      backend.dataIdMap.get(filter.dataId).id,\n      backend.dataIdMap.get(dy.dataId).id,\n      backend.dataIdMap.get(dx.dataId).id,\n      convInfo.batchSize,\n      convInfo.inDepth,\n      convInfo.inHeight,\n      convInfo.inWidth,\n      convInfo.inChannels,\n      convInfo.outDepth,\n      convInfo.outHeight,\n      convInfo.outWidth,\n      convInfo.outChannels,\n      convInfo.strideDepth,\n      convInfo.strideHeight,\n      convInfo.strideWidth,\n      convInfo.dilationDepth,\n      convInfo.dilationHeight,\n      convInfo.dilationWidth,\n      convInfo.filterDepth,\n      convInfo.filterHeight,\n      convInfo.filterWidth,\n      convInfo.padInfo.front,\n      convInfo.padInfo.top,\n      convInfo.padInfo.left,\n  );\n  return dx;\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: conv3DBackpropInputV2 as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}