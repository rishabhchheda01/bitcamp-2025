{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nlet wasmFusedDepthwiseConv2d;\nfunction setup(backend) {\n  wasmFusedDepthwiseConv2d = backend.wasm.cwrap(FusedDepthwiseConv2D, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nfunction fusedDepthwiseConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dataFormat,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const fusedActivation = FusableActivation[activation];\n  if (fusedActivation == null) {\n    throw new Error(`${activation} activation not yet supported for FusedDepthwiseConv2D ` + `in the wasm backend.`);\n  }\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const outputChannels = convInfo.outChannels;\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(`FusedDepthwiseConv2D bias shape (${biasData.shape}) does not ` + `match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n  if (dataFormat !== 'NHWC') {\n    throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'` + `${dataFormat}'. Please use 'NHWC'.`);\n  }\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;\n  wasmFusedDepthwiseConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedDepthwiseConv2d\n};","map":{"version":3,"names":["backend_util","FusedDepthwiseConv2D","FusableActivation","wasmFusedDepthwiseConv2d","setup","backend","wasm","cwrap","fusedDepthwiseConv2d","args","inputs","attrs","x","filter","bias","preluActivationWeights","strides","pad","dilations","dataFormat","dimRoundingMode","activation","leakyreluAlpha","convInfo","computeConv2DInfo","shape","fusedActivation","Error","xId","dataIdMap","get","dataId","id","filterId","outputChannels","outChannels","biasId","biasData","length","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","dilationHeight","dilationWidth","strideHeight","strideWidth","inputChannels","inChannels","isSamePad","type","batchSize","inHeight","inWidth","out","makeOutput","outShape","outId","preluActivationWeightsId","fusedDepthwiseConv2DConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {FusableActivation} from './types';\n\nlet wasmFusedDepthwiseConv2d:\n    (xId: number, batchSize: number, inputHeight: number, inputWidth: number,\n     filterId: number, filterHeight: number, filterWidth: number,\n     biasId: number, padTop: number, padRight: number, padBottom: number,\n     padLeft: number, isSamePad: number, dilationHeight: number,\n     dilationWidth: number, strideHeight: number, strideWidth: number,\n     inputChannels: number, outputChannels: number, activation: number,\n     preluActivationWeightsId: number, leakyreluAlpha: number, outId: number) =>\n        void;\n\nfunction setup(backend: BackendWasm) {\n  wasmFusedDepthwiseConv2d =\n      backend.wasm.cwrap(FusedDepthwiseConv2D, null /* void */, [\n        'number',  // xId\n        'number',  // batchSize\n        'number',  // inputHeight\n        'number',  // inputWidth\n        'number',  // filterId\n        'number',  // filterHeight\n        'number',  // filterWidth\n        'number',  // biasId\n        'number',  // padTop\n        'number',  // padRight\n        'number',  // padBottom\n        'number',  // padLeft\n        'number',  // isSamePad\n        'number',  // dilationHeight\n        'number',  // dilationWidth\n        'number',  // strideHeight\n        'number',  // strideWidth\n        'number',  // inputChannels\n        'number',  // outputChannels\n        'number',  // activation\n        'number',  // preluActivationWeightsId\n        'number',  // leakyreluAlpha\n        'number',  // outId\n      ]);\n}\n\nfunction fusedDepthwiseConv2d(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: BackendWasm,\n  attrs: FusedDepthwiseConv2DAttrs\n}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dataFormat,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      (x as Tensor4D).shape, (filter as Tensor4D).shape, strides, dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const fusedActivation =\n      FusableActivation[activation as unknown as\n                        keyof typeof FusableActivation];\n  if (fusedActivation == null) {\n    throw new Error(\n        `${activation} activation not yet supported for FusedDepthwiseConv2D ` +\n        `in the wasm backend.`);\n  }\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n\n  const outputChannels = convInfo.outChannels;\n\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(\n          `FusedDepthwiseConv2D only supports rank-1 bias but got ` +\n          `rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(\n          `FusedDepthwiseConv2D bias shape (${biasData.shape}) does not ` +\n          `match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n\n  if (dataFormat !== 'NHWC') {\n    throw new Error(\n        `wasm backend FusedDepthwiseConv2D does not support dataFormat:'` +\n        `${dataFormat}'. Please use 'NHWC'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ?\n      0 :\n      backend.dataIdMap.get(preluActivationWeights.dataId).id;\n\n  wasmFusedDepthwiseConv2d(\n      xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth,\n      biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight,\n      dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels,\n      fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n\n  return out;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedDepthwiseConv2d as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}