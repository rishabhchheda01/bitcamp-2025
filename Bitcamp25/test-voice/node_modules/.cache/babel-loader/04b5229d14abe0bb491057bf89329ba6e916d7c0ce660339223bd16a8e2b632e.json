{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util } from '@tensorflow/tfjs-core';\nlet wasmAvgPool3DGrad;\nfunction setup(backend) {\n  wasmAvgPool3DGrad = backend.wasm.cwrap('AvgPool3DGrad', null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // filterWidth\n  ]);\n}\nexport function avgPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, /*dilations=*/1, pad, dimRoundingMode);\n  const dx = backend.makeOutput(input.shape, input.dtype);\n  wasmAvgPool3DGrad(backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize,\n  // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in\n  // channels should always equal to out channels.\n  /*channelSize=*/\n  convInfo.inChannels, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth);\n  return dx;\n}\nexport const avgPool3DGradConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool3DGrad\n};","map":{"version":3,"names":["AvgPool3DGrad","backend_util","wasmAvgPool3DGrad","setup","backend","wasm","cwrap","avgPool3DGrad","args","inputs","attrs","dy","input","filterSize","strides","pad","dimRoundingMode","convInfo","computePool3DInfo","shape","dx","makeOutput","dtype","dataIdMap","get","dataId","id","batchSize","inChannels","inDepth","inHeight","inWidth","outDepth","outHeight","outWidth","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padInfo","front","top","left","filterDepth","filterHeight","filterWidth","avgPool3DGradConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\AvgPool3DGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmAvgPool3DGrad: (\n    dyId: number, dxId: number, batchSize: number, channelSize: number,\n    inDepth: number, inHeight: number, inWidth: number, outDepth: number,\n    outHeight: number, outWidth: number, strideDepth: number,\n    strideHeight: number, strideWidth: number, dilationDepth: number,\n    dilationHeight: number, dilationWidth: number, effectiveFilterDepth: number,\n    effectiveFilterHeight: number, effectiveFilterWidth: number,\n    padFront: number, padTop: number, padLeft: number, filterDepth: number,\n    filterHeight: number, filterWidth: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmAvgPool3DGrad = backend.wasm.cwrap('AvgPool3DGrad', null, [\n    'number',  // dyId\n    'number',  // dxId\n    'number',  // batchSize\n    'number',  // channelSize\n    'number',  // inDepth\n    'number',  // inHeight\n    'number',  // inWidth\n    'number',  // outDepth\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // strideDepth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // dilationDepth\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // effectiveFilterDepth\n    'number',  // effectiveFilterHeight\n    'number',  // effectiveFilterWidth\n    'number',  // padFront\n    'number',  // padTop\n    'number',  // padLeft\n    'number',  // filterDepth\n    'number',  // filterHeight\n    'number',  // filterWidth\n  ]);\n}\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  attrs: AvgPool3DGradAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, /*dilations=*/1, pad, dimRoundingMode);\n  const dx = backend.makeOutput(input.shape, input.dtype);\n\n  wasmAvgPool3DGrad(\n      backend.dataIdMap.get(dy.dataId).id,\n      backend.dataIdMap.get(dx.dataId).id,\n      convInfo.batchSize,\n      // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in\n      // channels should always equal to out channels.\n      /*channelSize=*/convInfo.inChannels,\n      convInfo.inDepth,\n      convInfo.inHeight,\n      convInfo.inWidth,\n      convInfo.outDepth,\n      convInfo.outHeight,\n      convInfo.outWidth,\n      convInfo.strideDepth,\n      convInfo.strideHeight,\n      convInfo.strideWidth,\n      convInfo.dilationDepth,\n      convInfo.dilationHeight,\n      convInfo.dilationWidth,\n      convInfo.effectiveFilterDepth,\n      convInfo.effectiveFilterHeight,\n      convInfo.effectiveFilterWidth,\n      convInfo.padInfo.front,\n      convInfo.padInfo.top,\n      convInfo.padInfo.left,\n      convInfo.filterDepth,\n      convInfo.filterHeight,\n      convInfo.filterWidth,\n  );\n  return dx;\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAa,EAA2CC,YAAY,QAA6C,uBAAuB;AAIhJ,IAAIC,iBAQkD;AAEtD,SAASC,KAAKA,CAACC,OAAoB;EACjCF,iBAAiB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,CAC5D,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,EAAE;IAAEC;EAAK,CAAC,GAAGH,MAAM;EAC1B,MAAM;IAACI,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC,GAAGN,KAAK;EAEzD,MAAMO,QAAQ,GAAGhB,YAAY,CAACiB,iBAAiB,CAC3CN,KAAK,CAACO,KAAiD,EAAEN,UAAU,EACnEC,OAAO,EAAE,cAAc,CAAC,EAAEC,GAAG,EAAEC,eAAe,CAAC;EACnD,MAAMI,EAAE,GAAGhB,OAAO,CAACiB,UAAU,CAACT,KAAK,CAACO,KAAK,EAAEP,KAAK,CAACU,KAAK,CAAC;EAEvDpB,iBAAiB,CACbE,OAAO,CAACmB,SAAS,CAACC,GAAG,CAACb,EAAE,CAACc,MAAM,CAAC,CAACC,EAAE,EACnCtB,OAAO,CAACmB,SAAS,CAACC,GAAG,CAACJ,EAAE,CAACK,MAAM,CAAC,CAACC,EAAE,EACnCT,QAAQ,CAACU,SAAS;EAClB;EACA;EACA;EAAgBV,QAAQ,CAACW,UAAU,EACnCX,QAAQ,CAACY,OAAO,EAChBZ,QAAQ,CAACa,QAAQ,EACjBb,QAAQ,CAACc,OAAO,EAChBd,QAAQ,CAACe,QAAQ,EACjBf,QAAQ,CAACgB,SAAS,EAClBhB,QAAQ,CAACiB,QAAQ,EACjBjB,QAAQ,CAACkB,WAAW,EACpBlB,QAAQ,CAACmB,YAAY,EACrBnB,QAAQ,CAACoB,WAAW,EACpBpB,QAAQ,CAACqB,aAAa,EACtBrB,QAAQ,CAACsB,cAAc,EACvBtB,QAAQ,CAACuB,aAAa,EACtBvB,QAAQ,CAACwB,oBAAoB,EAC7BxB,QAAQ,CAACyB,qBAAqB,EAC9BzB,QAAQ,CAAC0B,oBAAoB,EAC7B1B,QAAQ,CAAC2B,OAAO,CAACC,KAAK,EACtB5B,QAAQ,CAAC2B,OAAO,CAACE,GAAG,EACpB7B,QAAQ,CAAC2B,OAAO,CAACG,IAAI,EACrB9B,QAAQ,CAAC+B,WAAW,EACpB/B,QAAQ,CAACgC,YAAY,EACrBhC,QAAQ,CAACiC,WAAW,CACvB;EACD,OAAO9B,EAAE;AACX;AAEA,OAAO,MAAM+B,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEpD,aAAa;EACzBqD,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEnD,KAAK;EAChBoD,UAAU,EAAEhD;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}