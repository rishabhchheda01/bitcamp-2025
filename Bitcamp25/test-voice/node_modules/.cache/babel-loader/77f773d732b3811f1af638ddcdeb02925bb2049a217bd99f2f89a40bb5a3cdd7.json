{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nlet wasmProd;\nfunction setup(backend) {\n  wasmProd = backend.wasm.cwrap(Prod, null /*void*/, ['number', 'number', 'number', 'number']);\n}\nfunction prod(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    originalAxes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, input.shape.length);\n    }\n  }\n  backend_util.assertAxesAreInnerMostDims('prod', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const out = backend.makeOutput(outShape, input.dtype);\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmProd(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prod\n};","map":{"version":3,"names":["backend_util","Prod","util","permuteAxesAndTranspose","CppDType","wasmProd","setup","backend","wasm","cwrap","prod","args","inputs","attrs","axis","keepDims","x","xId","dataIdMap","get","dataId","id","inputId","input","transposed","axes","originalAxes","inputWasTransposed","reductionAxes","transposedId","getInnerMostAxes","length","shape","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","reduceSize","sizeFromShape","out","makeOutput","dtype","outId","disposeData","newShape","expandShapeToKeepDim","prodConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Prod.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {permuteAxesAndTranspose} from './kernel_utils';\n\nimport {CppDType} from './types';\n\nlet wasmProd: (\n    xId: number, reduceSize: number,\n    dtype: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmProd = backend.wasm.cwrap(Prod, null /*void*/, [\n    'number',\n    'number',\n    'number',\n    'number'\n  ]);\n}\n\nfunction prod(args: {\n  backend: BackendWasm,\n  inputs: ProdInputs,\n  attrs: ProdAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {axis, keepDims} = attrs;\n  const {x} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n\n  const {transposed, axes, originalAxes, inputWasTransposed} =\n      permuteAxesAndTranspose(x, axis, backend);\n\n  let reductionAxes = axes;\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(\n          reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'prod', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const out = backend.makeOutput(outShape, input.dtype);\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmProd(inputId, reduceSize, CppDType[out.dtype], outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  return out;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prod as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}