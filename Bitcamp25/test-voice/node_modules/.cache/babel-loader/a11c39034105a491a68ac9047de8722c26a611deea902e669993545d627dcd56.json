{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeBilinearGrad;\nfunction setup(backend) {\n  wasmResizeBilinearGrad = backend.wasm.cwrap(ResizeBilinearGrad, null /*void*/, ['number', 'number', 'number', 'array', 'array', 'boolean' // alignCorners\n  ]);\n}\nfunction resizeBilinearGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images,\n    dy\n  } = inputs;\n  const {\n    alignCorners\n  } = attrs;\n  const dx = backend.makeOutput(images.shape, 'float32');\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: images\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n  wasmResizeBilinearGrad(backend.dataIdMap.get(images.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, new Uint8Array(new Int32Array(images.shape).buffer), new Uint8Array(new Int32Array(dy.shape).buffer), alignCorners);\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n  return dx;\n}\nexport const resizeBilinearGradConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinearGrad\n};","map":{"version":3,"names":["ResizeBilinearGrad","cast","wasmResizeBilinearGrad","setup","backend","wasm","cwrap","resizeBilinearGrad","args","inputs","attrs","images","dy","alignCorners","dx","makeOutput","shape","xData","dataIdMap","get","dataId","castedData","dtype","x","id","Uint8Array","Int32Array","buffer","disposeData","resizeBilinearGradConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\ResizeBilinearGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\nlet wasmResizeBilinearGrad: (\n    imagesId: number, dyId: number, dxId: number, imagesShape: Uint8Array,\n    dyShape: Uint8Array, alignCorners: boolean) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmResizeBilinearGrad = backend.wasm.cwrap(\n      ResizeBilinearGrad, null /*void*/,\n      [\n        'number',   // imagesId\n        'number',   // dyId\n        'number',   // dxId\n        'array',    // imagesShape\n        'array',    // dyShape\n        'boolean',  // alignCorners\n      ]);\n}\n\nfunction resizeBilinearGrad(args: {\n  backend: BackendWasm; inputs: ResizeBilinearGradInputs;\n  attrs: ResizeBilinearGradAttrs;\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const dx = backend.makeOutput(images.shape, 'float32');\n\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {x: images},\n      attrs: {dtype: 'float32'},\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  wasmResizeBilinearGrad(\n      backend.dataIdMap.get(images.dataId).id,\n      backend.dataIdMap.get(dy.dataId).id,\n      backend.dataIdMap.get(dx.dataId).id,\n      new Uint8Array(new Int32Array(images.shape).buffer),\n      new Uint8Array(new Int32Array(dy.shape).buffer),\n      alignCorners,\n  );\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return dx;\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,kBAAkB,QAAsE,uBAAuB;AAIjJ,SAAQC,IAAI,QAAO,QAAQ;AAE3B,IAAIC,sBAEmD;AAEvD,SAASC,KAAKA,CAACC,OAAoB;EACjCF,sBAAsB,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CACvCN,kBAAkB,EAAE,IAAI,CAAC,UACzB,CACE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,OAAO,EACP,SAAS,CAAG;EAAA,CACb,CAAC;AACR;AAEA,SAASO,kBAAkBA,CAACC,IAG3B;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,MAAM;IAAEC;EAAE,CAAC,GAAGH,MAAM;EAC3B,MAAM;IAACI;EAAY,CAAC,GAAGH,KAAK;EAE5B,MAAMI,EAAE,GAAGV,OAAO,CAACW,UAAU,CAACJ,MAAM,CAACK,KAAK,EAAE,SAAS,CAAC;EAEtD,IAAIC,KAAK,GAAGb,OAAO,CAACc,SAAS,CAACC,GAAG,CAACR,MAAM,CAACS,MAAM,CAAC;EAChD,IAAIC,UAAU;EACd,IAAIJ,KAAK,CAACK,KAAK,KAAK,SAAS,EAAE;IAC7BD,UAAU,GAAGpB,IAAI,CAAC;MAChBG,OAAO;MACPK,MAAM,EAAE;QAACc,CAAC,EAAEZ;MAAM,CAAC;MACnBD,KAAK,EAAE;QAACY,KAAK,EAAE;MAAS;KACzB,CAAC;IACFL,KAAK,GAAGb,OAAO,CAACc,SAAS,CAACC,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;;EAGlDlB,sBAAsB,CAClBE,OAAO,CAACc,SAAS,CAACC,GAAG,CAACR,MAAM,CAACS,MAAM,CAAC,CAACI,EAAE,EACvCpB,OAAO,CAACc,SAAS,CAACC,GAAG,CAACP,EAAE,CAACQ,MAAM,CAAC,CAACI,EAAE,EACnCpB,OAAO,CAACc,SAAS,CAACC,GAAG,CAACL,EAAE,CAACM,MAAM,CAAC,CAACI,EAAE,EACnC,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACf,MAAM,CAACK,KAAK,CAAC,CAACW,MAAM,CAAC,EACnD,IAAIF,UAAU,CAAC,IAAIC,UAAU,CAACd,EAAE,CAACI,KAAK,CAAC,CAACW,MAAM,CAAC,EAC/Cd,YAAY,CACf;EAED,IAAIQ,UAAU,IAAI,IAAI,EAAE;IACtBjB,OAAO,CAACwB,WAAW,CAACP,UAAU,CAACD,MAAM,CAAC;;EAGxC,OAAON,EAAE;AACX;AAEA,OAAO,MAAMe,wBAAwB,GAAiB;EACpDC,UAAU,EAAE9B,kBAAkB;EAC9B+B,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE7B,KAAK;EAChB8B,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}