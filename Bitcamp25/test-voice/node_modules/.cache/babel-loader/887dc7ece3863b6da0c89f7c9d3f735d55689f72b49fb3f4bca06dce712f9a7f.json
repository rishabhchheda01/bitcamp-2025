{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nfunction stringNGrams(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const $data = backend.readSync(data.dataId);\n  const $dataSplits = backend.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  const nGramsOut = backend.makeOutput([nGrams.length], 'string');\n  const nGramsOutData = backend.dataIdMap.get(nGramsOut.dataId);\n  nGramsOutData.stringBytes = nGrams;\n  const nGramsSplitsOut = backend.makeOutput(dataSplits.shape, 'int32');\n  const nGramsSplitsOutVals = backend.typedArrayFromHeap(nGramsSplitsOut);\n  nGramsSplitsOutVals.set(nGramsSplits);\n  return [nGramsOut, nGramsSplitsOut];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'wasm',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"names":["StringNGrams","stringNGramsImplCPU","stringNGrams","args","backend","inputs","attrs","data","dataSplits","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","$data","readSync","dataId","$dataSplits","nGrams","nGramsSplits","nGramsOut","makeOutput","length","nGramsOutData","dataIdMap","get","stringBytes","nGramsSplitsOut","shape","nGramsSplitsOutVals","typedArrayFromHeap","set","stringNGramsConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\StringNGrams.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nfunction stringNGrams(args: {\n  backend: BackendWasm,\n  inputs: StringNGramsInputs,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {backend, inputs, attrs} = args;\n  const {data, dataSplits} = inputs;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences,\n  } = attrs;\n\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n\n  const nGramsOut = backend.makeOutput([nGrams.length], 'string');\n  const nGramsOutData = backend.dataIdMap.get(nGramsOut.dataId);\n  nGramsOutData.stringBytes = nGrams;\n\n  const nGramsSplitsOut = backend.makeOutput(dataSplits.shape, 'int32');\n  const nGramsSplitsOutVals = backend.typedArrayFromHeap(nGramsSplitsOut);\n  nGramsSplitsOutVals.set(nGramsSplits);\n\n  return [nGramsOut, nGramsSplitsOut];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'wasm',\n  kernelFunc: stringNGrams as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,QAA0D,uBAAuB;AAG/H,SAAQC,mBAAmB,QAAO,wBAAwB;AAE1D,SAASC,YAAYA,CAACC,IAIrB;EACC,MAAM;IAACC,OAAO;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,IAAI;IAAEC;EAAU,CAAC,GAAGH,MAAM;EACjC,MAAM;IACJI,SAAS;IACTC,WAAW;IACXC,OAAO;IACPC,QAAQ;IACRC,QAAQ;IACRC;EAAsB,CACvB,GAAGR,KAAK;EAET,MAAMS,KAAK,GAAGX,OAAO,CAACY,QAAQ,CAACT,IAAI,CAACU,MAAM,CAAiB;EAC3D,MAAMC,WAAW,GAAGd,OAAO,CAACY,QAAQ,CAACR,UAAU,CAACS,MAAM,CAAe;EAErE,MAAM,CAACE,MAAM,EAAEC,YAAY,CAAC,GAAGnB,mBAAmB,CAC9Cc,KAAK,EAAEG,WAAW,EAAET,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EACvEC,sBAAsB,CAAC;EAE3B,MAAMO,SAAS,GAAGjB,OAAO,CAACkB,UAAU,CAAC,CAACH,MAAM,CAACI,MAAM,CAAC,EAAE,QAAQ,CAAC;EAC/D,MAAMC,aAAa,GAAGpB,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACL,SAAS,CAACJ,MAAM,CAAC;EAC7DO,aAAa,CAACG,WAAW,GAAGR,MAAM;EAElC,MAAMS,eAAe,GAAGxB,OAAO,CAACkB,UAAU,CAACd,UAAU,CAACqB,KAAK,EAAE,OAAO,CAAC;EACrE,MAAMC,mBAAmB,GAAG1B,OAAO,CAAC2B,kBAAkB,CAACH,eAAe,CAAC;EACvEE,mBAAmB,CAACE,GAAG,CAACZ,YAAY,CAAC;EAErC,OAAO,CAACC,SAAS,EAAEO,eAAe,CAAC;AACrC;AAEA,OAAO,MAAMK,kBAAkB,GAAiB;EAC9CC,UAAU,EAAElC,YAAY;EACxBmC,WAAW,EAAE,MAAM;EACnBC,UAAU,EAAElC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}