{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nlet wasmMaxPoolGrad;\nfunction setup(backend) {\n  wasmMaxPoolGrad = backend.wasm.cwrap('MaxPoolGrad', null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // padLeft\n  ]);\n}\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(input.shape, filterSize, strides, /*dilations=*/1, pad, dimRoundingMode);\n  const dx = backend.makeOutput(input.shape, input.dtype);\n  wasmMaxPoolGrad(backend.dataIdMap.get(input.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize,\n  // Since Pool ops (MaxPool and MaxPool) support 2D filter only, in\n  // channels should always equal to out channels.\n  /*channelSize=*/\n  convInfo.inChannels, convInfo.inHeight, convInfo.inWidth, convInfo.outHeight, convInfo.outWidth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.top, convInfo.padInfo.left);\n  return dx;\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"names":["backend_util","MaxPoolGrad","wasmMaxPoolGrad","setup","backend","wasm","cwrap","maxPoolGrad","args","inputs","attrs","dy","input","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","dx","makeOutput","dtype","dataIdMap","get","dataId","id","batchSize","inChannels","inHeight","inWidth","outHeight","outWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padInfo","top","left","maxPoolGradConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\MaxPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmMaxPoolGrad: (\n    xId: number, dyId: number, dxId: number, batchSize: number,\n    channelSize: number, inHeight: number, inWidth: number, outHeight: number,\n    outWidth: number, strideHeight: number, strideWidth: number,\n    dilationHeight: number, dilationWidth: number,\n    effectiveFilterHeight: number, effectiveFilterWidth: number, padTop: number,\n    padLeft: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmMaxPoolGrad = backend.wasm.cwrap('MaxPoolGrad', null, [\n    'number',  // xId\n    'number',  // dyId\n    'number',  // dxId\n    'number',  // batchSize\n    'number',  // channelSize\n    'number',  // inHeight\n    'number',  // inWidth\n    'number',  // outHeight\n    'number',  // outWidth\n    'number',  // strideHeight\n    'number',  // strideWidth\n    'number',  // dilationHeight\n    'number',  // dilationWidth\n    'number',  // effectiveFilterHeight\n    'number',  // effectiveFilterWidth\n    'number',  // padTop\n    'number',  // padLeft\n  ]);\n}\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  attrs: MaxPoolGradAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      input.shape as [number, number, number, number], filterSize, strides,\n      /*dilations=*/1, pad, dimRoundingMode);\n  const dx = backend.makeOutput(input.shape, input.dtype);\n\n  wasmMaxPoolGrad(\n      backend.dataIdMap.get(input.dataId).id,\n      backend.dataIdMap.get(dy.dataId).id,\n      backend.dataIdMap.get(dx.dataId).id,\n      convInfo.batchSize,\n      // Since Pool ops (MaxPool and MaxPool) support 2D filter only, in\n      // channels should always equal to out channels.\n      /*channelSize=*/convInfo.inChannels,\n      convInfo.inHeight,\n      convInfo.inWidth,\n      convInfo.outHeight,\n      convInfo.outWidth,\n      convInfo.strideHeight,\n      convInfo.strideWidth,\n      convInfo.dilationHeight,\n      convInfo.dilationWidth,\n      convInfo.effectiveFilterHeight,\n      convInfo.effectiveFilterWidth,\n      convInfo.padInfo.top,\n      convInfo.padInfo.left,\n  );\n  return dx;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA4BC,WAAW,QAAwD,uBAAuB;AAI1I,IAAIC,eAMwB;AAE5B,SAASC,KAAKA,CAACC,OAAoB;EACjCF,eAAe,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,CACxD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUC,WAAWA,CAACC,IAI3B;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG,EAAE;IAAEC;EAAK,CAAC,GAAGH,MAAM;EAC1B,MAAM;IAACI,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC,GAAGN,KAAK;EAEzD,MAAMO,QAAQ,GAAGjB,YAAY,CAACkB,iBAAiB,CAC3CN,KAAK,CAACO,KAAyC,EAAEN,UAAU,EAAEC,OAAO,EACpE,cAAc,CAAC,EAAEC,GAAG,EAAEC,eAAe,CAAC;EAC1C,MAAMI,EAAE,GAAGhB,OAAO,CAACiB,UAAU,CAACT,KAAK,CAACO,KAAK,EAAEP,KAAK,CAACU,KAAK,CAAC;EAEvDpB,eAAe,CACXE,OAAO,CAACmB,SAAS,CAACC,GAAG,CAACZ,KAAK,CAACa,MAAM,CAAC,CAACC,EAAE,EACtCtB,OAAO,CAACmB,SAAS,CAACC,GAAG,CAACb,EAAE,CAACc,MAAM,CAAC,CAACC,EAAE,EACnCtB,OAAO,CAACmB,SAAS,CAACC,GAAG,CAACJ,EAAE,CAACK,MAAM,CAAC,CAACC,EAAE,EACnCT,QAAQ,CAACU,SAAS;EAClB;EACA;EACA;EAAgBV,QAAQ,CAACW,UAAU,EACnCX,QAAQ,CAACY,QAAQ,EACjBZ,QAAQ,CAACa,OAAO,EAChBb,QAAQ,CAACc,SAAS,EAClBd,QAAQ,CAACe,QAAQ,EACjBf,QAAQ,CAACgB,YAAY,EACrBhB,QAAQ,CAACiB,WAAW,EACpBjB,QAAQ,CAACkB,cAAc,EACvBlB,QAAQ,CAACmB,aAAa,EACtBnB,QAAQ,CAACoB,qBAAqB,EAC9BpB,QAAQ,CAACqB,oBAAoB,EAC7BrB,QAAQ,CAACsB,OAAO,CAACC,GAAG,EACpBvB,QAAQ,CAACsB,OAAO,CAACE,IAAI,CACxB;EACD,OAAOrB,EAAE;AACX;AAEA,OAAO,MAAMsB,iBAAiB,GAAiB;EAC7CC,UAAU,EAAE1C,WAAW;EACvB2C,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE1C,KAAK;EAChB2C,UAAU,EAAEvC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}