{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nlet wasmLinSpace;\nfunction setup(backend) {\n  wasmLinSpace = backend.wasm.cwrap(LinSpace, null, ['number', 'number', 'number', 'number' // num\n  ]);\n}\nexport function linSpace(args) {\n  const {\n    attrs,\n    backend\n  } = args;\n  const {\n    start,\n    stop,\n    num\n  } = attrs;\n  // TFJS Cpu backend supports num as a float and returns undetermined tensor in\n  // that case. However, according to TensorFlow spec, num should be a integer.\n  const numInt = Math.floor(num);\n  const out = backend.makeOutput([numInt], 'float32');\n  wasmLinSpace(backend.dataIdMap.get(out.dataId).id, start, stop, numInt);\n  return out;\n}\nexport const linSpaceConfig = {\n  kernelName: LinSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: linSpace\n};","map":{"version":3,"names":["LinSpace","wasmLinSpace","setup","backend","wasm","cwrap","linSpace","args","attrs","start","stop","num","numInt","Math","floor","out","makeOutput","dataIdMap","get","dataId","id","linSpaceConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\LinSpace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmLinSpace: (outId: number, start: number, stop: number, num: number) =>\n    void;\n\nfunction setup(backend: BackendWasm) {\n  wasmLinSpace = backend.wasm.cwrap(LinSpace, null, [\n    'number',  // outId\n    'number',  // start\n    'number',  // stop\n    'number',  // num\n  ]);\n}\n\nexport function linSpace(args: {attrs: LinSpaceAttrs, backend: BackendWasm}):\n    TensorInfo {\n  const {attrs, backend} = args;\n  const {start, stop, num} = attrs;\n\n  // TFJS Cpu backend supports num as a float and returns undetermined tensor in\n  // that case. However, according to TensorFlow spec, num should be a integer.\n  const numInt = Math.floor(num);\n\n  const out = backend.makeOutput([numInt], 'float32');\n  wasmLinSpace(backend.dataIdMap.get(out.dataId).id, start, stop, numInt);\n  return out;\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: linSpace as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,QAAQ,QAAkC,uBAAuB;AAInG,IAAIC,YACI;AAER,SAASC,KAAKA,CAACC,OAAoB;EACjCF,YAAY,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACL,QAAQ,EAAE,IAAI,EAAE,CAChD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUM,QAAQA,CAACC,IAAkD;EAEzE,MAAM;IAACC,KAAK;IAAEL;EAAO,CAAC,GAAGI,IAAI;EAC7B,MAAM;IAACE,KAAK;IAAEC,IAAI;IAAEC;EAAG,CAAC,GAAGH,KAAK;EAEhC;EACA;EACA,MAAMI,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC;EAE9B,MAAMI,GAAG,GAAGZ,OAAO,CAACa,UAAU,CAAC,CAACJ,MAAM,CAAC,EAAE,SAAS,CAAC;EACnDX,YAAY,CAACE,OAAO,CAACc,SAAS,CAACC,GAAG,CAACH,GAAG,CAACI,MAAM,CAAC,CAACC,EAAE,EAAEX,KAAK,EAAEC,IAAI,EAAEE,MAAM,CAAC;EACvE,OAAOG,GAAG;AACZ;AAEA,OAAO,MAAMM,cAAc,GAAiB;EAC1CC,UAAU,EAAEtB,QAAQ;EACpBuB,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEtB,KAAK;EAChBuB,UAAU,EAAEnB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}