{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\n// Must match enum in CropAndResize.cc\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n  InterpolationMethod[InterpolationMethod[\"bilinear\"] = 0] = \"bilinear\";\n  InterpolationMethod[InterpolationMethod[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\nlet wasmCropAndResize;\nfunction setup(backend) {\n  wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null /*void*/, ['number', 'number', 'number', 'number', 'array', 'number', 'number', 'number', 'number', 'number' // out id\n  ]);\n}\nfunction cropAndResize(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    method,\n    extrapolationValue,\n    cropSize\n  } = attrs;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n  let imagesData = backend.dataIdMap.get(image.dataId);\n  let castedData;\n  if (image.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: image\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    imagesData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const imagesId = imagesData.id;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n  const out = backend.makeOutput(outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n  wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n  return out;\n}\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cropAndResize\n};","map":{"version":3,"names":["CropAndResize","cast","InterpolationMethod","wasmCropAndResize","setup","backend","wasm","cwrap","cropAndResize","args","inputs","attrs","method","extrapolationValue","cropSize","image","boxes","boxInd","numBoxes","shape","cropHeight","cropWidth","outShape","imagesData","dataIdMap","get","dataId","castedData","dtype","x","imagesId","id","boxesId","boxIndId","out","makeOutput","outId","imagesShapeBytes","Uint8Array","Int32Array","buffer","disposeData","cropAndResizeConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\CropAndResize.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\n// Must match enum in CropAndResize.cc\nenum InterpolationMethod {\n  bilinear = 0,\n  nearest = 1\n}\n\nlet wasmCropAndResize: (\n    imagesId: number, boxesId: number, boxIndId: number, numBoxes: number,\n    imagesShape: Uint8Array, cropHeight: number, cropWidth: number,\n    method: number, extrapolationValue: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null /*void*/, [\n    'number',  // imagesId\n    'number',  // boxesId\n    'number',  // boxIndId\n    'number',  // numBoxes\n    'array',   // images shape\n    'number',  // cropHeight\n    'number',  // cropWidth\n    'number',  // method\n    'number',  // extrapolation value\n    'number'   // out id\n  ]);\n}\n\nfunction cropAndResize(args: {\n  backend: BackendWasm,\n  inputs: CropAndResizeInputs,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {backend, inputs, attrs} = args;\n  const {method, extrapolationValue, cropSize} = attrs;\n  const {image, boxes, boxInd} = inputs;\n\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize as [number, number];\n  const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n\n  let imagesData = backend.dataIdMap.get(image.dataId);\n  let castedData;\n  if (image.dtype !== 'float32') {\n    castedData = cast({backend, inputs: {x: image}, attrs: {dtype: 'float32'}});\n    imagesData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const imagesId = imagesData.id;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n\n  const out = backend.makeOutput(outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n\n  wasmCropAndResize(\n      imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight,\n      cropWidth,\n      InterpolationMethod[method as unknown as\n                          keyof typeof InterpolationMethod],\n      extrapolationValue, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}