{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kheri\\\\Downloads\\\\Bitcamp\\\\bitcamp-2025\\\\Bitcamp25\\\\test-voice\\\\src\\\\SplineViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SplineViewer = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  url,\n  options,\n  persistOnUpdate = false\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const splineElementRef = useRef(null);\n  const iframeRef = useRef(null);\n  const isInitializedRef = useRef(false);\n  const splineLoadedRef = useRef(false);\n\n  // Enhanced function to send keyboard events to Spline iframe using multiple methods\n  const sendKeyboardEvent = (type, key) => {\n    try {\n      if (iframeRef.current) {\n        const iframeWindow = iframeRef.current.contentWindow;\n        if (iframeWindow) {\n          // Method 1: Try using postMessage to communicate with iframe\n          iframeWindow.postMessage({\n            type: 'spline-keyboard-event',\n            eventType: type,\n            key: key\n          }, '*');\n\n          // Method 2: Try to directly interact with iframe document\n          try {\n            const iframeDoc = iframeRef.current.contentDocument || iframeWindow.document;\n\n            // Create a standard KeyboardEvent\n            const event = new KeyboardEvent(type, {\n              key: key,\n              code: `Key${key.toUpperCase()}`,\n              keyCode: key.charCodeAt(0),\n              which: key.charCodeAt(0),\n              bubbles: true,\n              cancelable: true,\n              composed: true\n            });\n\n            // Dispatch to document\n            iframeDoc.dispatchEvent(event);\n\n            // Method 3: Try to find the canvas element within Spline iframe (common for 3D scenes)\n            const canvas = iframeDoc.querySelector('canvas');\n            if (canvas) {\n              canvas.dispatchEvent(event);\n              canvas.focus();\n            }\n\n            // Method 4: Try to dispatch to document.body\n            if (iframeDoc.body) {\n              iframeDoc.body.dispatchEvent(event);\n            }\n\n            // Method 5: Try to dispatch to window\n            iframeWindow.dispatchEvent(event);\n          } catch (e) {\n            console.warn(\"Couldn't dispatch direct event to iframe:\", e);\n          }\n\n          // Method 6: Use direct window.eval within iframe (most intrusive but often effective)\n          try {\n            iframeWindow.eval(`\n              document.dispatchEvent(new KeyboardEvent('${type}', {\n                key: '${key}',\n                code: 'Key${key.toUpperCase()}',\n                keyCode: ${key.charCodeAt(0)},\n                which: ${key.charCodeAt(0)},\n                bubbles: true,\n                cancelable: true\n              }));\n              console.log('Spline received ${key} via eval');\n            `);\n          } catch (e) {\n            console.warn(\"Couldn't use eval in iframe:\", e);\n          }\n        }\n      }\n\n      // Also dispatch to parent window as backup\n      window.dispatchEvent(new KeyboardEvent(type, {\n        key: key,\n        code: `Key${key.toUpperCase()}`,\n        keyCode: key.charCodeAt(0),\n        which: key.charCodeAt(0),\n        bubbles: true,\n        cancelable: true\n      }));\n\n      // Log for debugging\n      console.log(`Attempted to send ${type} event for key ${key} to Spline`);\n    } catch (e) {\n      console.error(\"Error sending keyboard event to iframe:\", e);\n    }\n  };\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getSplineElement: () => splineElementRef.current,\n    getContainer: () => containerRef.current,\n    getIframe: () => iframeRef.current,\n    sendKey: key => {\n      sendKeyboardEvent('keydown', key);\n      setTimeout(() => {\n        sendKeyboardEvent('keyup', key);\n      }, 100);\n    },\n    isLoaded: () => splineLoadedRef.current\n  }));\n\n  // Listen for iframe elements being added to the DOM\n  const observeIframe = () => {\n    if (!containerRef.current) return;\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          // Check each added node\n          mutation.addedNodes.forEach(node => {\n            // Direct iframe detection\n            if (node.tagName === 'IFRAME') {\n              setupIframe(node);\n            } else {\n              // Look for iframes deeper in the added nodes\n              const iframes = node.querySelectorAll('iframe');\n              iframes.forEach(iframe => setupIframe(iframe));\n            }\n          });\n        }\n      });\n    });\n    observer.observe(containerRef.current, {\n      childList: true,\n      subtree: true\n    });\n    return observer;\n  };\n\n  // Setup and configure an iframe when found\n  const setupIframe = iframe => {\n    console.log('Spline iframe found');\n    iframeRef.current = iframe;\n\n    // Add listeners once the iframe is loaded\n    iframe.addEventListener('load', () => {\n      console.log('Spline iframe loaded');\n      splineLoadedRef.current = true;\n\n      // Focus the iframe\n      setTimeout(() => {\n        iframe.focus();\n\n        // Try to find and focus the canvas inside iframe\n        try {\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n          const canvas = iframeDoc.querySelector('canvas');\n          if (canvas) {\n            canvas.focus();\n          }\n        } catch (e) {\n          console.warn(\"Couldn't focus canvas in iframe:\", e);\n        }\n      }, 500);\n\n      // Test the keyboard event system\n      setTimeout(() => {\n        sendKeyboardEvent('keydown', 'u');\n        setTimeout(() => sendKeyboardEvent('keyup', 'u'), 100);\n      }, 1000);\n    });\n  };\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // If we should persist and we already have a Spline instance, don't recreate\n    if (persistOnUpdate && isInitializedRef.current && splineElementRef.current) {\n      return;\n    }\n\n    // Clean up any existing spline-viewer elements if not persisting\n    const existingViewer = containerRef.current.querySelector('spline-viewer');\n    if (existingViewer && (!persistOnUpdate || !isInitializedRef.current)) {\n      existingViewer.remove();\n    }\n\n    // If already initialized and should persist, don't continue\n    if (persistOnUpdate && isInitializedRef.current) {\n      return;\n    }\n\n    // Create a new spline-viewer element\n    const splineViewer = document.createElement('spline-viewer');\n    splineElementRef.current = splineViewer;\n\n    // Set the URL attribute\n    splineViewer.setAttribute('url', url);\n\n    // Add an empty keyboard handler to ensure Spline accepts keyboard events\n    splineViewer.addEventListener('keydown', e => {\n      console.log(`Spline viewer received keydown: ${e.key}`);\n    });\n\n    // Set additional options if provided\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        if (value === true) {\n          splineViewer.setAttribute(key, '');\n        } else if (value !== false) {\n          splineViewer.setAttribute(key, value);\n        }\n      });\n    }\n\n    // Append the viewer to the container\n    containerRef.current.appendChild(splineViewer);\n\n    // Load the Spline viewer script if not already loaded\n    if (!document.querySelector('script[src*=\"@splinetool/viewer\"]')) {\n      const script = document.createElement('script');\n      script.type = 'module';\n      script.src = 'https://unpkg.com/@splinetool/viewer@1.9.82/build/spline-viewer.js';\n      document.head.appendChild(script);\n    }\n\n    // Observe for iframe creation\n    const observer = observeIframe();\n\n    // Try to locate any existing iframes - they might already be there\n    const existingIframes = containerRef.current.querySelectorAll('iframe');\n    if (existingIframes.length > 0) {\n      setupIframe(existingIframes[0]);\n    }\n\n    // Mark as initialized\n    isInitializedRef.current = true;\n\n    // Set up event listeners for parent-window keyboard events\n    const handleKeyEvent = e => {\n      // We're only listening for our specific keys\n      if (['u', 'd', 'l', 'r'].includes(e.key)) {\n        console.log(`Parent window received key: ${e.key}`);\n        // We don't need to do anything here as we're just debugging\n      }\n    };\n    window.addEventListener('keydown', handleKeyEvent);\n\n    // Clean up function\n    return () => {\n      if (observer) {\n        observer.disconnect();\n      }\n      window.removeEventListener('keydown', handleKeyEvent);\n      if (!persistOnUpdate && containerRef.current) {\n        const viewer = containerRef.current.querySelector('spline-viewer');\n        if (viewer) {\n          viewer.remove();\n          isInitializedRef.current = false;\n          splineLoadedRef.current = false;\n        }\n      }\n    };\n  }, [url, options, persistOnUpdate]);\n\n  // Tab index allows the container to receive keyboard focus\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    tabIndex: \"0\",\n    onKeyDown: e => {\n      console.log(`Container onKeyDown: ${e.key}`);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 10\n  }, this);\n}, \"WbzE+R74Xk9alCMshUA/1Nr2bgo=\")), \"WbzE+R74Xk9alCMshUA/1Nr2bgo=\");\n_c2 = SplineViewer;\nexport default SplineViewer;\nvar _c, _c2;\n$RefreshReg$(_c, \"SplineViewer$forwardRef\");\n$RefreshReg$(_c2, \"SplineViewer\");","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useImperativeHandle","jsxDEV","_jsxDEV","SplineViewer","_s","_c","url","options","persistOnUpdate","ref","containerRef","splineElementRef","iframeRef","isInitializedRef","splineLoadedRef","sendKeyboardEvent","type","key","current","iframeWindow","contentWindow","postMessage","eventType","iframeDoc","contentDocument","document","event","KeyboardEvent","code","toUpperCase","keyCode","charCodeAt","which","bubbles","cancelable","composed","dispatchEvent","canvas","querySelector","focus","body","e","console","warn","eval","window","log","error","getSplineElement","getContainer","getIframe","sendKey","setTimeout","isLoaded","observeIframe","observer","MutationObserver","mutations","forEach","mutation","addedNodes","length","node","tagName","setupIframe","iframes","querySelectorAll","iframe","observe","childList","subtree","addEventListener","existingViewer","remove","splineViewer","createElement","setAttribute","Object","entries","value","appendChild","script","src","head","existingIframes","handleKeyEvent","includes","disconnect","removeEventListener","viewer","style","width","height","tabIndex","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/SplineViewer.js"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\n\nconst SplineViewer = forwardRef(({ url, options, persistOnUpdate = false }, ref) => {\n  const containerRef = useRef(null);\n  const splineElementRef = useRef(null);\n  const iframeRef = useRef(null);\n  const isInitializedRef = useRef(false);\n  const splineLoadedRef = useRef(false);\n\n  // Enhanced function to send keyboard events to Spline iframe using multiple methods\n  const sendKeyboardEvent = (type, key) => {\n    try {\n      if (iframeRef.current) {\n        const iframeWindow = iframeRef.current.contentWindow;\n        if (iframeWindow) {\n          // Method 1: Try using postMessage to communicate with iframe\n          iframeWindow.postMessage({\n            type: 'spline-keyboard-event',\n            eventType: type,\n            key: key\n          }, '*');\n          \n          // Method 2: Try to directly interact with iframe document\n          try {\n            const iframeDoc = iframeRef.current.contentDocument || iframeWindow.document;\n            \n            // Create a standard KeyboardEvent\n            const event = new KeyboardEvent(type, {\n              key: key,\n              code: `Key${key.toUpperCase()}`,\n              keyCode: key.charCodeAt(0),\n              which: key.charCodeAt(0),\n              bubbles: true,\n              cancelable: true,\n              composed: true\n            });\n            \n            // Dispatch to document\n            iframeDoc.dispatchEvent(event);\n            \n            // Method 3: Try to find the canvas element within Spline iframe (common for 3D scenes)\n            const canvas = iframeDoc.querySelector('canvas');\n            if (canvas) {\n              canvas.dispatchEvent(event);\n              canvas.focus();\n            }\n            \n            // Method 4: Try to dispatch to document.body\n            if (iframeDoc.body) {\n              iframeDoc.body.dispatchEvent(event);\n            }\n            \n            // Method 5: Try to dispatch to window\n            iframeWindow.dispatchEvent(event);\n          } catch (e) {\n            console.warn(\"Couldn't dispatch direct event to iframe:\", e);\n          }\n          \n          // Method 6: Use direct window.eval within iframe (most intrusive but often effective)\n          try {\n            iframeWindow.eval(`\n              document.dispatchEvent(new KeyboardEvent('${type}', {\n                key: '${key}',\n                code: 'Key${key.toUpperCase()}',\n                keyCode: ${key.charCodeAt(0)},\n                which: ${key.charCodeAt(0)},\n                bubbles: true,\n                cancelable: true\n              }));\n              console.log('Spline received ${key} via eval');\n            `);\n          } catch (e) {\n            console.warn(\"Couldn't use eval in iframe:\", e);\n          }\n        }\n      }\n      \n      // Also dispatch to parent window as backup\n      window.dispatchEvent(new KeyboardEvent(type, {\n        key: key,\n        code: `Key${key.toUpperCase()}`,\n        keyCode: key.charCodeAt(0),\n        which: key.charCodeAt(0),\n        bubbles: true,\n        cancelable: true\n      }));\n      \n      // Log for debugging\n      console.log(`Attempted to send ${type} event for key ${key} to Spline`);\n    } catch (e) {\n      console.error(\"Error sending keyboard event to iframe:\", e);\n    }\n  };\n\n  // Expose methods to parent component via ref\n  useImperativeHandle(ref, () => ({\n    getSplineElement: () => splineElementRef.current,\n    getContainer: () => containerRef.current,\n    getIframe: () => iframeRef.current,\n    sendKey: (key) => {\n      sendKeyboardEvent('keydown', key);\n      setTimeout(() => {\n        sendKeyboardEvent('keyup', key);\n      }, 100);\n    },\n    isLoaded: () => splineLoadedRef.current\n  }));\n\n  // Listen for iframe elements being added to the DOM\n  const observeIframe = () => {\n    if (!containerRef.current) return;\n    \n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          // Check each added node\n          mutation.addedNodes.forEach((node) => {\n            // Direct iframe detection\n            if (node.tagName === 'IFRAME') {\n              setupIframe(node);\n            } else {\n              // Look for iframes deeper in the added nodes\n              const iframes = node.querySelectorAll('iframe');\n              iframes.forEach(iframe => setupIframe(iframe));\n            }\n          });\n        }\n      });\n    });\n    \n    observer.observe(containerRef.current, { childList: true, subtree: true });\n    return observer;\n  };\n  \n  // Setup and configure an iframe when found\n  const setupIframe = (iframe) => {\n    console.log('Spline iframe found');\n    iframeRef.current = iframe;\n    \n    // Add listeners once the iframe is loaded\n    iframe.addEventListener('load', () => {\n      console.log('Spline iframe loaded');\n      splineLoadedRef.current = true;\n      \n      // Focus the iframe\n      setTimeout(() => {\n        iframe.focus();\n        \n        // Try to find and focus the canvas inside iframe\n        try {\n          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n          const canvas = iframeDoc.querySelector('canvas');\n          if (canvas) {\n            canvas.focus();\n          }\n        } catch (e) {\n          console.warn(\"Couldn't focus canvas in iframe:\", e);\n        }\n      }, 500);\n      \n      // Test the keyboard event system\n      setTimeout(() => {\n        sendKeyboardEvent('keydown', 'u');\n        setTimeout(() => sendKeyboardEvent('keyup', 'u'), 100);\n      }, 1000);\n    });\n  };\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    // If we should persist and we already have a Spline instance, don't recreate\n    if (persistOnUpdate && isInitializedRef.current && splineElementRef.current) {\n      return;\n    }\n    \n    // Clean up any existing spline-viewer elements if not persisting\n    const existingViewer = containerRef.current.querySelector('spline-viewer');\n    if (existingViewer && (!persistOnUpdate || !isInitializedRef.current)) {\n      existingViewer.remove();\n    }\n\n    // If already initialized and should persist, don't continue\n    if (persistOnUpdate && isInitializedRef.current) {\n      return;\n    }\n    \n    // Create a new spline-viewer element\n    const splineViewer = document.createElement('spline-viewer');\n    splineElementRef.current = splineViewer;\n    \n    // Set the URL attribute\n    splineViewer.setAttribute('url', url);\n    \n    // Add an empty keyboard handler to ensure Spline accepts keyboard events\n    splineViewer.addEventListener('keydown', (e) => {\n      console.log(`Spline viewer received keydown: ${e.key}`);\n    });\n    \n    // Set additional options if provided\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        if (value === true) {\n          splineViewer.setAttribute(key, '');\n        } else if (value !== false) {\n          splineViewer.setAttribute(key, value);\n        }\n      });\n    }\n    \n    // Append the viewer to the container\n    containerRef.current.appendChild(splineViewer);\n    \n    // Load the Spline viewer script if not already loaded\n    if (!document.querySelector('script[src*=\"@splinetool/viewer\"]')) {\n      const script = document.createElement('script');\n      script.type = 'module';\n      script.src = 'https://unpkg.com/@splinetool/viewer@1.9.82/build/spline-viewer.js';\n      document.head.appendChild(script);\n    }\n\n    // Observe for iframe creation\n    const observer = observeIframe();\n    \n    // Try to locate any existing iframes - they might already be there\n    const existingIframes = containerRef.current.querySelectorAll('iframe');\n    if (existingIframes.length > 0) {\n      setupIframe(existingIframes[0]);\n    }\n\n    // Mark as initialized\n    isInitializedRef.current = true;\n    \n    // Set up event listeners for parent-window keyboard events\n    const handleKeyEvent = (e) => {\n      // We're only listening for our specific keys\n      if (['u', 'd', 'l', 'r'].includes(e.key)) {\n        console.log(`Parent window received key: ${e.key}`);\n        // We don't need to do anything here as we're just debugging\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyEvent);\n    \n    // Clean up function\n    return () => {\n      if (observer) {\n        observer.disconnect();\n      }\n      \n      window.removeEventListener('keydown', handleKeyEvent);\n      \n      if (!persistOnUpdate && containerRef.current) {\n        const viewer = containerRef.current.querySelector('spline-viewer');\n        if (viewer) {\n          viewer.remove();\n          isInitializedRef.current = false;\n          splineLoadedRef.current = false;\n        }\n      }\n    };\n  }, [url, options, persistOnUpdate]);\n\n  // Tab index allows the container to receive keyboard focus\n  return <div \n    ref={containerRef} \n    style={{ width: '100%', height: '100%' }} \n    tabIndex=\"0\"\n    onKeyDown={(e) => {\n      console.log(`Container onKeyDown: ${e.key}`);\n    }}\n  />;\n});\n\nexport default SplineViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}