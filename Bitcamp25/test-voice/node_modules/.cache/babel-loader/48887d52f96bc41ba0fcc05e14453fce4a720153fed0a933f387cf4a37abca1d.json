{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kheri\\\\Downloads\\\\Bitcamp\\\\bitcamp-2025\\\\Bitcamp25\\\\test-voice\\\\src\\\\components\\\\Finance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport capitalOneService from '../services/capitalOneService';\nimport AccountList from './finance/AccountList';\nimport CustomerInfo from './finance/CustomerInfo';\nimport TransactionHistory from './finance/TransactionHistory';\nimport AccountActions from './finance/AccountActions';\nimport BranchLocator from './finance/BranchLocator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Finance = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [activeView, setActiveView] = useState('accounts'); // accounts, customer, transactions, actions, branches\n  const [initializingData, setInitializingData] = useState(false);\n  // API status display\n  const [apiStatus, setApiStatus] = useState(null);\n  // Add a state to track the current endpoint\n  const [currentEndpoint, setCurrentEndpoint] = useState('');\n\n  // Listen for API status messages\n  useEffect(() => {\n    const handleApiStatusMessage = event => {\n      if (event.data && event.data.type === 'API_STATUS') {\n        setApiStatus({\n          ...event.data,\n          timestamp: new Date()\n        });\n\n        // Extract and set the current endpoint\n        if (event.data.status === 'request') {\n          const message = event.data.message;\n          const match = message.match(/API REQUEST: \\w+ (\\/[^\\s]+)/);\n          if (match && match[1]) {\n            setCurrentEndpoint(match[1]);\n          }\n        }\n\n        // Clear status after 5 seconds\n        setTimeout(() => {\n          setApiStatus(null);\n        }, 5000);\n      }\n    };\n\n    // Add listener for postMessage events\n    window.addEventListener('message', handleApiStatusMessage);\n\n    // Set up console.log override to capture API calls\n    const originalConsoleLog = console.log;\n    console.log = function () {\n      // Call the original console.log\n      originalConsoleLog.apply(console, arguments);\n\n      // Check if this is an API request log\n      const args = Array.from(arguments).join(' ');\n      if (args.includes('API REQUEST:')) {\n        window.postMessage({\n          type: 'API_STATUS',\n          status: 'request',\n          message: args\n        }, '*');\n      } else if (args.includes('Response from')) {\n        window.postMessage({\n          type: 'API_STATUS',\n          status: 'response',\n          message: args\n        }, '*');\n      } else if (args.includes('API Error') || args.includes('CORS or network issue')) {\n        window.postMessage({\n          type: 'API_STATUS',\n          status: 'error',\n          message: args\n        }, '*');\n      }\n    };\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('message', handleApiStatusMessage);\n      console.log = originalConsoleLog;\n    };\n  }, []);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n\n        // First, try to get the account with the default ID\n        let defaultAccount = null;\n        try {\n          // Get the default account directly using the constant from the service\n          defaultAccount = await capitalOneService.getAccountById();\n          console.log(\"Got default account:\", defaultAccount);\n        } catch (err) {\n          console.log(\"Could not fetch default account, will try to get all accounts\");\n        }\n\n        // Fetch accounts and customers\n        let accountsData = await capitalOneService.getAccounts();\n        let customersData = await capitalOneService.getCustomers();\n\n        // Check if we need to create test data\n        if (!accountsData || accountsData.length === 0 || !customersData || customersData.length === 0) {\n          // Show initializing status\n          setInitializingData(true);\n\n          // Create test data if no data exists\n          const testData = await createTestData();\n          if (testData) {\n            accountsData = testData.accounts;\n            customersData = testData.customers;\n          }\n        }\n        setAccounts(accountsData || []);\n        setCustomers(customersData || []);\n\n        // Decide which account to select\n        let selectedAccountObj = null;\n\n        // First preference: Use the default account if it exists\n        if (defaultAccount) {\n          selectedAccountObj = defaultAccount;\n        }\n        // Second preference: Use the first account from the list\n        else if (accountsData && accountsData.length > 0) {\n          selectedAccountObj = accountsData[0];\n        }\n\n        // If we have an account to select\n        if (selectedAccountObj) {\n          console.log(\"Selected account:\", selectedAccountObj);\n          setSelectedAccount(selectedAccountObj);\n          try {\n            // Get the customer associated with this account\n            const customerData = await capitalOneService.getCustomerByAccount(selectedAccountObj._id);\n            setSelectedCustomer(customerData);\n          } catch (err) {\n            console.log(\"Could not fetch customer for account, using first customer instead\");\n            if (customersData && customersData.length > 0) {\n              setSelectedCustomer(customersData[0]);\n            }\n          }\n\n          // Get transactions (deposits, withdrawals, transfers) for this account\n          await fetchTransactions(selectedAccountObj._id);\n        }\n        setInitializingData(false);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error in fetchInitialData:\", err);\n        setError(err.message || 'Failed to fetch data');\n        setInitializingData(false);\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n\n  // Function to create test data if none exists\n  const createTestData = async () => {\n    try {\n      console.log(\"Creating test data...\");\n\n      // Create a test customer\n      const customerData = {\n        first_name: \"John\",\n        last_name: \"Doe\",\n        address: {\n          street_number: \"123\",\n          street_name: \"Main St\",\n          city: \"Washington\",\n          state: \"DC\",\n          zip: \"20001\"\n        }\n      };\n      const customerResponse = await capitalOneService.createCustomer(customerData);\n      console.log(\"Created customer:\", customerResponse);\n\n      // Get the customer ID from the response\n      let customerId;\n      if (customerResponse && customerResponse.objectCreated) {\n        customerId = customerResponse.objectCreated._id;\n      } else if (customerResponse && customerResponse._id) {\n        customerId = customerResponse._id;\n      } else {\n        // Try to get first customer if we couldn't create one\n        const customers = await capitalOneService.getCustomers();\n        if (customers && customers.length > 0) {\n          customerId = customers[0]._id;\n        } else {\n          throw new Error(\"Failed to create or find a customer\");\n        }\n      }\n\n      // Create a checking account\n      const checkingAccountData = {\n        type: \"Checking\",\n        nickname: \"Primary Checking\",\n        rewards: 10,\n        balance: 5000,\n        account_number: \"123456789\"\n      };\n      const savingsAccountData = {\n        type: \"Savings\",\n        nickname: \"Emergency Fund\",\n        rewards: 25,\n        balance: 10000,\n        account_number: \"987654321\"\n      };\n      const creditAccountData = {\n        type: \"Credit Card\",\n        nickname: \"Rewards Card\",\n        rewards: 100,\n        balance: 1500,\n        account_number: \"555555555\"\n      };\n\n      // Create accounts\n      const checkingResponse = await capitalOneService.createAccount(customerId, checkingAccountData);\n      const savingsResponse = await capitalOneService.createAccount(customerId, savingsAccountData);\n      const creditResponse = await capitalOneService.createAccount(customerId, creditAccountData);\n      console.log(\"Created accounts:\", checkingResponse, savingsResponse, creditResponse);\n\n      // Get created accounts\n      const accounts = await capitalOneService.getCustomerAccounts(customerId);\n      const customers = await capitalOneService.getCustomers();\n\n      // Create some sample transactions if accounts were created\n      if (accounts && accounts.length > 0) {\n        // Create deposit\n        await capitalOneService.createDeposit(accounts[0]._id, {\n          medium: \"balance\",\n          transaction_date: new Date().toISOString().split('T')[0],\n          status: \"completed\",\n          amount: 1000,\n          description: \"Salary deposit\"\n        });\n\n        // Create withdrawal\n        await capitalOneService.createWithdrawal(accounts[0]._id, {\n          medium: \"balance\",\n          transaction_date: new Date().toISOString().split('T')[0],\n          status: \"completed\",\n          amount: 250,\n          description: \"ATM withdrawal\"\n        });\n\n        // Create transfer between accounts if we have multiple\n        if (accounts.length > 1) {\n          await capitalOneService.createTransfer(accounts[0]._id, {\n            medium: \"balance\",\n            payee_id: accounts[1]._id,\n            transaction_date: new Date().toISOString().split('T')[0],\n            status: \"completed\",\n            amount: 500,\n            description: \"Transfer to savings\"\n          });\n        }\n      }\n      return {\n        accounts,\n        customers\n      };\n    } catch (err) {\n      console.error(\"Error creating test data:\", err);\n      return null;\n    }\n  };\n  const fetchTransactions = async accountId => {\n    try {\n      // Check if accountId looks like a mock ID and use the default ID if needed\n      const isMockId = accountId && (accountId.includes('mock') || accountId.length < 20);\n      const id = isMockId ? undefined : accountId; // Use undefined to trigger the default ID in the API service\n\n      console.log(`Fetching transactions for account: ${isMockId ? 'Using DEFAULT_ID (mock detected)' : accountId}`);\n\n      // Fetch deposits, withdrawals, and transfers for the account\n      let deposits = [];\n      let withdrawals = [];\n      let transfers = [];\n      try {\n        deposits = await capitalOneService.getAccountDeposits(id);\n      } catch (e) {\n        console.log(\"Error fetching deposits:\", e);\n      }\n      try {\n        withdrawals = await capitalOneService.getAccountWithdrawals(id);\n      } catch (e) {\n        console.log(\"Error fetching withdrawals:\", e);\n      }\n      try {\n        transfers = await capitalOneService.getAccountTransfers(id);\n      } catch (e) {\n        console.log(\"Error fetching transfers:\", e);\n      }\n\n      // Combine and format transactions\n      const allTransactions = [...(Array.isArray(deposits) ? deposits.map(d => ({\n        ...d,\n        type: 'deposit'\n      })) : []), ...(Array.isArray(withdrawals) ? withdrawals.map(w => ({\n        ...w,\n        type: 'withdrawal'\n      })) : []), ...(Array.isArray(transfers) ? transfers.map(t => ({\n        ...t,\n        type: 'transfer'\n      })) : [])];\n\n      // Sort by date (newest first)\n      allTransactions.sort((a, b) => {\n        const dateA = new Date(a.transaction_date || a.payment_date || 0);\n        const dateB = new Date(b.transaction_date || b.payment_date || 0);\n        return dateB - dateA;\n      });\n      setTransactions(allTransactions);\n    } catch (err) {\n      console.error(\"Error in fetchTransactions:\", err);\n      setError(err.message || 'Failed to fetch transactions');\n    }\n  };\n  const handleAccountSelect = async account => {\n    setSelectedAccount(account);\n    try {\n      // Get customer for this account\n      try {\n        const customerData = await capitalOneService.getCustomerByAccount(account._id);\n        setSelectedCustomer(customerData);\n      } catch (err) {\n        console.log(\"Could not fetch customer for account:\", err);\n        // If we can't get the customer by account, just use the first customer\n        if (customers && customers.length > 0) {\n          setSelectedCustomer(customers[0]);\n        }\n      }\n\n      // Get transactions for this account\n      await fetchTransactions(account._id);\n    } catch (err) {\n      console.error(\"Error in handleAccountSelect:\", err);\n      setError(err.message || 'Failed to fetch account details');\n    }\n  };\n  const handleCreateDeposit = async depositData => {\n    try {\n      await capitalOneService.createDeposit(selectedAccount._id, depositData);\n\n      // Refresh account data and transactions\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\n      setSelectedAccount(updatedAccount);\n      await fetchTransactions(selectedAccount._id);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Error creating deposit:\", err);\n      setError(err.message || 'Failed to create deposit');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const handleCreateWithdrawal = async withdrawalData => {\n    try {\n      await capitalOneService.createWithdrawal(selectedAccount._id, withdrawalData);\n\n      // Refresh account data and transactions\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\n      setSelectedAccount(updatedAccount);\n      await fetchTransactions(selectedAccount._id);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Error creating withdrawal:\", err);\n      setError(err.message || 'Failed to create withdrawal');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const handleCreateTransfer = async transferData => {\n    try {\n      await capitalOneService.createTransfer(selectedAccount._id, transferData);\n\n      // Refresh account data and transactions\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\n      setSelectedAccount(updatedAccount);\n      await fetchTransactions(selectedAccount._id);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Error creating transfer:\", err);\n      setError(err.message || 'Failed to create transfer');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finance-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"section-title\",\n      children: \"Capital One Banking Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-endpoint-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"endpoint-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"endpoint-label\",\n          children: \"Current API Endpoint:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"endpoint-value\",\n          children: currentEndpoint || 'None'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"api-key-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"api-key-label\",\n          children: \"API Key:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"api-key-value\",\n          children: \"f1fbb5f9a7bfdc1597fafdf76476cfa7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), apiStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `api-status-indicator status-${apiStatus.status}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-icon\",\n        children: apiStatus.status === 'request' ? '🔄' : apiStatus.status === 'response' ? '✅' : '❌'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-message\",\n          children: apiStatus.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-time\",\n          children: apiStatus.timestamp.toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'accounts' ? 'active' : ''}`,\n        onClick: () => setActiveView('accounts'),\n        children: \"Accounts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'customer' ? 'active' : ''}`,\n        onClick: () => setActiveView('customer'),\n        children: \"Customer Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'transactions' ? 'active' : ''}`,\n        onClick: () => setActiveView('transactions'),\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'actions' ? 'active' : ''}`,\n        onClick: () => setActiveView('actions'),\n        children: \"Account Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'branches' ? 'active' : ''}`,\n        onClick: () => setActiveView('branches'),\n        children: \"Branch Locator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), selectedAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Selected Account: \", selectedAccount.nickname || selectedAccount._id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-balance\",\n        children: [\"Balance: $\", selectedAccount.balance ? selectedAccount.balance.toFixed(2) : '0.00']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-type\",\n        children: [\"Type: \", selectedAccount.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-button\",\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 9\n    }, this), (loading || initializingData) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-container\",\n        children: initializingData ? 'Creating sample data...' : 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-content-container\",\n      children: [activeView === 'accounts' && /*#__PURE__*/_jsxDEV(AccountList, {\n        accounts: accounts,\n        selectedAccount: selectedAccount,\n        onSelectAccount: handleAccountSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this), activeView === 'customer' && selectedCustomer && /*#__PURE__*/_jsxDEV(CustomerInfo, {\n        customer: selectedCustomer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 11\n      }, this), activeView === 'transactions' && /*#__PURE__*/_jsxDEV(TransactionHistory, {\n        transactions: transactions,\n        accountId: selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 11\n      }, this), activeView === 'actions' && /*#__PURE__*/_jsxDEV(AccountActions, {\n        account: selectedAccount,\n        onCreateDeposit: handleCreateDeposit,\n        onCreateWithdrawal: handleCreateWithdrawal,\n        onCreateTransfer: handleCreateTransfer,\n        accounts: accounts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 11\n      }, this), activeView === 'branches' && /*#__PURE__*/_jsxDEV(BranchLocator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n};\n_s(Finance, \"yrakLsBC48X0mIRskIa4x7Kddt4=\");\n_c = Finance;\nexport default Finance;\nvar _c;\n$RefreshReg$(_c, \"Finance\");","map":{"version":3,"names":["React","useState","useEffect","capitalOneService","AccountList","CustomerInfo","TransactionHistory","AccountActions","BranchLocator","jsxDEV","_jsxDEV","Finance","_s","loading","setLoading","error","setError","accounts","setAccounts","customers","setCustomers","selectedAccount","setSelectedAccount","selectedCustomer","setSelectedCustomer","transactions","setTransactions","activeView","setActiveView","initializingData","setInitializingData","apiStatus","setApiStatus","currentEndpoint","setCurrentEndpoint","handleApiStatusMessage","event","data","type","timestamp","Date","status","message","match","setTimeout","window","addEventListener","originalConsoleLog","console","log","apply","arguments","args","Array","from","join","includes","postMessage","removeEventListener","fetchInitialData","defaultAccount","getAccountById","err","accountsData","getAccounts","customersData","getCustomers","length","testData","createTestData","selectedAccountObj","customerData","getCustomerByAccount","_id","fetchTransactions","first_name","last_name","address","street_number","street_name","city","state","zip","customerResponse","createCustomer","customerId","objectCreated","Error","checkingAccountData","nickname","rewards","balance","account_number","savingsAccountData","creditAccountData","checkingResponse","createAccount","savingsResponse","creditResponse","getCustomerAccounts","createDeposit","medium","transaction_date","toISOString","split","amount","description","createWithdrawal","createTransfer","payee_id","accountId","isMockId","id","undefined","deposits","withdrawals","transfers","getAccountDeposits","e","getAccountWithdrawals","getAccountTransfers","allTransactions","isArray","map","d","w","t","sort","a","b","dateA","payment_date","dateB","handleAccountSelect","account","handleCreateDeposit","depositData","updatedAccount","success","handleCreateWithdrawal","withdrawalData","handleCreateTransfer","transferData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","onClick","toFixed","location","reload","onSelectAccount","customer","onCreateDeposit","onCreateWithdrawal","onCreateTransfer","_c","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/components/Finance.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport capitalOneService from '../services/capitalOneService';\r\nimport AccountList from './finance/AccountList';\r\nimport CustomerInfo from './finance/CustomerInfo';\r\nimport TransactionHistory from './finance/TransactionHistory';\r\nimport AccountActions from './finance/AccountActions';\r\nimport BranchLocator from './finance/BranchLocator';\r\n\r\nconst Finance = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [selectedAccount, setSelectedAccount] = useState(null);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [activeView, setActiveView] = useState('accounts'); // accounts, customer, transactions, actions, branches\r\n  const [initializingData, setInitializingData] = useState(false);\r\n  // API status display\r\n  const [apiStatus, setApiStatus] = useState(null);\r\n  // Add a state to track the current endpoint\r\n  const [currentEndpoint, setCurrentEndpoint] = useState('');\r\n\r\n  // Listen for API status messages\r\n  useEffect(() => {\r\n    const handleApiStatusMessage = (event) => {\r\n      if (event.data && event.data.type === 'API_STATUS') {\r\n        setApiStatus({\r\n          ...event.data,\r\n          timestamp: new Date()\r\n        });\r\n        \r\n        // Extract and set the current endpoint\r\n        if (event.data.status === 'request') {\r\n          const message = event.data.message;\r\n          const match = message.match(/API REQUEST: \\w+ (\\/[^\\s]+)/);\r\n          if (match && match[1]) {\r\n            setCurrentEndpoint(match[1]);\r\n          }\r\n        }\r\n        \r\n        // Clear status after 5 seconds\r\n        setTimeout(() => {\r\n          setApiStatus(null);\r\n        }, 5000);\r\n      }\r\n    };\r\n    \r\n    // Add listener for postMessage events\r\n    window.addEventListener('message', handleApiStatusMessage);\r\n    \r\n    // Set up console.log override to capture API calls\r\n    const originalConsoleLog = console.log;\r\n    console.log = function() {\r\n      // Call the original console.log\r\n      originalConsoleLog.apply(console, arguments);\r\n      \r\n      // Check if this is an API request log\r\n      const args = Array.from(arguments).join(' ');\r\n      if (args.includes('API REQUEST:')) {\r\n        window.postMessage({\r\n          type: 'API_STATUS',\r\n          status: 'request',\r\n          message: args\r\n        }, '*');\r\n      } else if (args.includes('Response from')) {\r\n        window.postMessage({\r\n          type: 'API_STATUS',\r\n          status: 'response',\r\n          message: args\r\n        }, '*');\r\n      } else if (args.includes('API Error') || args.includes('CORS or network issue')) {\r\n        window.postMessage({\r\n          type: 'API_STATUS',\r\n          status: 'error',\r\n          message: args\r\n        }, '*');\r\n      }\r\n    };\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('message', handleApiStatusMessage);\r\n      console.log = originalConsoleLog;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // First, try to get the account with the default ID\r\n        let defaultAccount = null;\r\n        try {\r\n          // Get the default account directly using the constant from the service\r\n          defaultAccount = await capitalOneService.getAccountById();\r\n          console.log(\"Got default account:\", defaultAccount);\r\n        } catch (err) {\r\n          console.log(\"Could not fetch default account, will try to get all accounts\");\r\n        }\r\n        \r\n        // Fetch accounts and customers\r\n        let accountsData = await capitalOneService.getAccounts();\r\n        let customersData = await capitalOneService.getCustomers();\r\n        \r\n        // Check if we need to create test data\r\n        if ((!accountsData || accountsData.length === 0) || (!customersData || customersData.length === 0)) {\r\n          // Show initializing status\r\n          setInitializingData(true);\r\n          \r\n          // Create test data if no data exists\r\n          const testData = await createTestData();\r\n          if (testData) {\r\n            accountsData = testData.accounts;\r\n            customersData = testData.customers;\r\n          }\r\n        }\r\n        \r\n        setAccounts(accountsData || []);\r\n        setCustomers(customersData || []);\r\n        \r\n        // Decide which account to select\r\n        let selectedAccountObj = null;\r\n        \r\n        // First preference: Use the default account if it exists\r\n        if (defaultAccount) {\r\n          selectedAccountObj = defaultAccount;\r\n        } \r\n        // Second preference: Use the first account from the list\r\n        else if (accountsData && accountsData.length > 0) {\r\n          selectedAccountObj = accountsData[0];\r\n        }\r\n        \r\n        // If we have an account to select\r\n        if (selectedAccountObj) {\r\n          console.log(\"Selected account:\", selectedAccountObj);\r\n          setSelectedAccount(selectedAccountObj);\r\n          \r\n          try {\r\n            // Get the customer associated with this account\r\n            const customerData = await capitalOneService.getCustomerByAccount(selectedAccountObj._id);\r\n            setSelectedCustomer(customerData);\r\n          } catch (err) {\r\n            console.log(\"Could not fetch customer for account, using first customer instead\");\r\n            if (customersData && customersData.length > 0) {\r\n              setSelectedCustomer(customersData[0]);\r\n            }\r\n          }\r\n          \r\n          // Get transactions (deposits, withdrawals, transfers) for this account\r\n          await fetchTransactions(selectedAccountObj._id);\r\n        }\r\n        \r\n        setInitializingData(false);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error in fetchInitialData:\", err);\r\n        setError(err.message || 'Failed to fetch data');\r\n        setInitializingData(false);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchInitialData();\r\n  }, []);\r\n  \r\n  // Function to create test data if none exists\r\n  const createTestData = async () => {\r\n    try {\r\n      console.log(\"Creating test data...\");\r\n      \r\n      // Create a test customer\r\n      const customerData = {\r\n        first_name: \"John\",\r\n        last_name: \"Doe\",\r\n        address: {\r\n          street_number: \"123\",\r\n          street_name: \"Main St\",\r\n          city: \"Washington\",\r\n          state: \"DC\",\r\n          zip: \"20001\"\r\n        }\r\n      };\r\n      \r\n      const customerResponse = await capitalOneService.createCustomer(customerData);\r\n      console.log(\"Created customer:\", customerResponse);\r\n      \r\n      // Get the customer ID from the response\r\n      let customerId;\r\n      if (customerResponse && customerResponse.objectCreated) {\r\n        customerId = customerResponse.objectCreated._id;\r\n      } else if (customerResponse && customerResponse._id) {\r\n        customerId = customerResponse._id;\r\n      } else {\r\n        // Try to get first customer if we couldn't create one\r\n        const customers = await capitalOneService.getCustomers();\r\n        if (customers && customers.length > 0) {\r\n          customerId = customers[0]._id;\r\n        } else {\r\n          throw new Error(\"Failed to create or find a customer\");\r\n        }\r\n      }\r\n      \r\n      // Create a checking account\r\n      const checkingAccountData = {\r\n        type: \"Checking\",\r\n        nickname: \"Primary Checking\",\r\n        rewards: 10,\r\n        balance: 5000,\r\n        account_number: \"123456789\"\r\n      };\r\n      \r\n      const savingsAccountData = {\r\n        type: \"Savings\",\r\n        nickname: \"Emergency Fund\",\r\n        rewards: 25,\r\n        balance: 10000,\r\n        account_number: \"987654321\"\r\n      };\r\n      \r\n      const creditAccountData = {\r\n        type: \"Credit Card\",\r\n        nickname: \"Rewards Card\",\r\n        rewards: 100,\r\n        balance: 1500,\r\n        account_number: \"555555555\"\r\n      };\r\n      \r\n      // Create accounts\r\n      const checkingResponse = await capitalOneService.createAccount(customerId, checkingAccountData);\r\n      const savingsResponse = await capitalOneService.createAccount(customerId, savingsAccountData);\r\n      const creditResponse = await capitalOneService.createAccount(customerId, creditAccountData);\r\n      \r\n      console.log(\"Created accounts:\", checkingResponse, savingsResponse, creditResponse);\r\n      \r\n      // Get created accounts\r\n      const accounts = await capitalOneService.getCustomerAccounts(customerId);\r\n      const customers = await capitalOneService.getCustomers();\r\n      \r\n      // Create some sample transactions if accounts were created\r\n      if (accounts && accounts.length > 0) {\r\n        // Create deposit\r\n        await capitalOneService.createDeposit(accounts[0]._id, {\r\n          medium: \"balance\",\r\n          transaction_date: new Date().toISOString().split('T')[0],\r\n          status: \"completed\",\r\n          amount: 1000,\r\n          description: \"Salary deposit\"\r\n        });\r\n        \r\n        // Create withdrawal\r\n        await capitalOneService.createWithdrawal(accounts[0]._id, {\r\n          medium: \"balance\",\r\n          transaction_date: new Date().toISOString().split('T')[0],\r\n          status: \"completed\",\r\n          amount: 250,\r\n          description: \"ATM withdrawal\"\r\n        });\r\n        \r\n        // Create transfer between accounts if we have multiple\r\n        if (accounts.length > 1) {\r\n          await capitalOneService.createTransfer(accounts[0]._id, {\r\n            medium: \"balance\",\r\n            payee_id: accounts[1]._id,\r\n            transaction_date: new Date().toISOString().split('T')[0],\r\n            status: \"completed\",\r\n            amount: 500,\r\n            description: \"Transfer to savings\"\r\n          });\r\n        }\r\n      }\r\n      \r\n      return {\r\n        accounts,\r\n        customers\r\n      };\r\n    } catch (err) {\r\n      console.error(\"Error creating test data:\", err);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const fetchTransactions = async (accountId) => {\r\n    try {\r\n      // Check if accountId looks like a mock ID and use the default ID if needed\r\n      const isMockId = accountId && (accountId.includes('mock') || accountId.length < 20);\r\n      const id = isMockId ? undefined : accountId; // Use undefined to trigger the default ID in the API service\r\n      \r\n      console.log(`Fetching transactions for account: ${isMockId ? 'Using DEFAULT_ID (mock detected)' : accountId}`);\r\n      \r\n      // Fetch deposits, withdrawals, and transfers for the account\r\n      let deposits = [];\r\n      let withdrawals = [];\r\n      let transfers = [];\r\n      \r\n      try {\r\n        deposits = await capitalOneService.getAccountDeposits(id);\r\n      } catch (e) {\r\n        console.log(\"Error fetching deposits:\", e);\r\n      }\r\n      \r\n      try {\r\n        withdrawals = await capitalOneService.getAccountWithdrawals(id);\r\n      } catch (e) {\r\n        console.log(\"Error fetching withdrawals:\", e);\r\n      }\r\n      \r\n      try {\r\n        transfers = await capitalOneService.getAccountTransfers(id);\r\n      } catch (e) {\r\n        console.log(\"Error fetching transfers:\", e);\r\n      }\r\n      \r\n      // Combine and format transactions\r\n      const allTransactions = [\r\n        ...(Array.isArray(deposits) ? deposits.map(d => ({ ...d, type: 'deposit' })) : []),\r\n        ...(Array.isArray(withdrawals) ? withdrawals.map(w => ({ ...w, type: 'withdrawal' })) : []),\r\n        ...(Array.isArray(transfers) ? transfers.map(t => ({ ...t, type: 'transfer' })) : [])\r\n      ];\r\n      \r\n      // Sort by date (newest first)\r\n      allTransactions.sort((a, b) => {\r\n        const dateA = new Date(a.transaction_date || a.payment_date || 0);\r\n        const dateB = new Date(b.transaction_date || b.payment_date || 0);\r\n        return dateB - dateA;\r\n      });\r\n      \r\n      setTransactions(allTransactions);\r\n    } catch (err) {\r\n      console.error(\"Error in fetchTransactions:\", err);\r\n      setError(err.message || 'Failed to fetch transactions');\r\n    }\r\n  };\r\n  \r\n  const handleAccountSelect = async (account) => {\r\n    setSelectedAccount(account);\r\n    \r\n    try {\r\n      // Get customer for this account\r\n      try {\r\n        const customerData = await capitalOneService.getCustomerByAccount(account._id);\r\n        setSelectedCustomer(customerData);\r\n      } catch (err) {\r\n        console.log(\"Could not fetch customer for account:\", err);\r\n        // If we can't get the customer by account, just use the first customer\r\n        if (customers && customers.length > 0) {\r\n          setSelectedCustomer(customers[0]);\r\n        }\r\n      }\r\n      \r\n      // Get transactions for this account\r\n      await fetchTransactions(account._id);\r\n    } catch (err) {\r\n      console.error(\"Error in handleAccountSelect:\", err);\r\n      setError(err.message || 'Failed to fetch account details');\r\n    }\r\n  };\r\n  \r\n  const handleCreateDeposit = async (depositData) => {\r\n    try {\r\n      await capitalOneService.createDeposit(selectedAccount._id, depositData);\r\n      \r\n      // Refresh account data and transactions\r\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\r\n      setSelectedAccount(updatedAccount);\r\n      \r\n      await fetchTransactions(selectedAccount._id);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Error creating deposit:\", err);\r\n      setError(err.message || 'Failed to create deposit');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n  \r\n  const handleCreateWithdrawal = async (withdrawalData) => {\r\n    try {\r\n      await capitalOneService.createWithdrawal(selectedAccount._id, withdrawalData);\r\n      \r\n      // Refresh account data and transactions\r\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\r\n      setSelectedAccount(updatedAccount);\r\n      \r\n      await fetchTransactions(selectedAccount._id);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Error creating withdrawal:\", err);\r\n      setError(err.message || 'Failed to create withdrawal');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n  \r\n  const handleCreateTransfer = async (transferData) => {\r\n    try {\r\n      await capitalOneService.createTransfer(selectedAccount._id, transferData);\r\n      \r\n      // Refresh account data and transactions\r\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\r\n      setSelectedAccount(updatedAccount);\r\n      \r\n      await fetchTransactions(selectedAccount._id);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Error creating transfer:\", err);\r\n      setError(err.message || 'Failed to create transfer');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"finance-dashboard\">\r\n      <h3 className=\"section-title\">Capital One Banking Dashboard</h3>\r\n      \r\n      {/* Current API Endpoint Indicator */}\r\n      <div className=\"api-endpoint-display\">\r\n        <div className=\"endpoint-container\">\r\n          <span className=\"endpoint-label\">Current API Endpoint:</span>\r\n          <span className=\"endpoint-value\">{currentEndpoint || 'None'}</span>\r\n        </div>\r\n        <div className=\"api-key-container\">\r\n          <span className=\"api-key-label\">API Key:</span>\r\n          <span className=\"api-key-value\">f1fbb5f9a7bfdc1597fafdf76476cfa7</span>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* API Status Indicator */}\r\n      {apiStatus && (\r\n        <div className={`api-status-indicator status-${apiStatus.status}`}>\r\n          <div className=\"status-icon\">\r\n            {apiStatus.status === 'request' ? '🔄' : \r\n             apiStatus.status === 'response' ? '✅' : '❌'}\r\n          </div>\r\n          <div className=\"status-content\">\r\n            <div className=\"status-message\">\r\n              {apiStatus.message}\r\n            </div>\r\n            <div className=\"status-time\">\r\n              {apiStatus.timestamp.toLocaleTimeString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Navigation Tabs */}\r\n      <div className=\"finance-tabs\">\r\n        <button \r\n          className={`finance-tab ${activeView === 'accounts' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('accounts')}\r\n        >\r\n          Accounts\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'customer' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('customer')}\r\n        >\r\n          Customer Info\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'transactions' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('transactions')}\r\n        >\r\n          Transactions\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'actions' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('actions')}\r\n        >\r\n          Account Actions\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'branches' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('branches')}\r\n        >\r\n          Branch Locator\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Current Account Summary */}\r\n      {selectedAccount && (\r\n        <div className=\"account-summary\">\r\n          <h4>Selected Account: {selectedAccount.nickname || selectedAccount._id}</h4>\r\n          <div className=\"account-balance\">\r\n            Balance: ${selectedAccount.balance ? selectedAccount.balance.toFixed(2) : '0.00'}\r\n          </div>\r\n          <div className=\"account-type\">\r\n            Type: {selectedAccount.type}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Show error state if there's an error */}\r\n      {error && (\r\n        <div className=\"error-container\">\r\n          <p>Error: {error}</p>\r\n          <button className=\"retry-button\" onClick={() => window.location.reload()}>Retry</button>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Show loading state */}\r\n      {(loading || initializingData) && (\r\n        <div className=\"loading-overlay\">\r\n          <div className=\"spinner-container\">\r\n            {initializingData ? 'Creating sample data...' : 'Loading...'}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Content based on active view */}\r\n      <div className=\"finance-content-container\">\r\n        {activeView === 'accounts' && (\r\n          <AccountList \r\n            accounts={accounts} \r\n            selectedAccount={selectedAccount}\r\n            onSelectAccount={handleAccountSelect}\r\n          />\r\n        )}\r\n        \r\n        {activeView === 'customer' && selectedCustomer && (\r\n          <CustomerInfo customer={selectedCustomer} />\r\n        )}\r\n        \r\n        {activeView === 'transactions' && (\r\n          <TransactionHistory \r\n            transactions={transactions}\r\n            accountId={selectedAccount?._id}\r\n          />\r\n        )}\r\n        \r\n        {activeView === 'actions' && (\r\n          <AccountActions \r\n            account={selectedAccount}\r\n            onCreateDeposit={handleCreateDeposit}\r\n            onCreateWithdrawal={handleCreateWithdrawal}\r\n            onCreateTransfer={handleCreateTransfer}\r\n            accounts={accounts}\r\n          />\r\n        )}\r\n        \r\n        {activeView === 'branches' && (\r\n          <BranchLocator />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Finance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}