{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kheri\\\\Downloads\\\\Bitcamp\\\\bitcamp-2025\\\\Bitcamp25\\\\test-voice\\\\src\\\\components\\\\Finance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport capitalOneService from '../services/capitalOneService';\nimport AccountList from './finance/AccountList';\nimport CustomerInfo from './finance/CustomerInfo';\nimport TransactionHistory from './finance/TransactionHistory';\nimport AccountActions from './finance/AccountActions';\nimport BranchLocator from './finance/BranchLocator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Finance = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [activeView, setActiveView] = useState('accounts'); // accounts, customer, transactions, actions, branches\n  const [initializingData, setInitializingData] = useState(false);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch accounts and customers\n        let accountsData = await capitalOneService.getAccounts();\n        let customersData = await capitalOneService.getCustomers();\n\n        // Check if we need to create test data\n        if (!accountsData || accountsData.length === 0 || !customersData || customersData.length === 0) {\n          // Show initializing status\n          setInitializingData(true);\n\n          // Create test data if no data exists\n          const testData = await createTestData();\n          if (testData) {\n            accountsData = testData.accounts;\n            customersData = testData.customers;\n          }\n        }\n        setAccounts(accountsData || []);\n        setCustomers(customersData || []);\n\n        // Select the first account by default\n        if (accountsData && accountsData.length > 0) {\n          setSelectedAccount(accountsData[0]);\n          try {\n            // Get the customer associated with this account\n            const customerData = await capitalOneService.getCustomerByAccount(accountsData[0]._id);\n            setSelectedCustomer(customerData);\n          } catch (err) {\n            console.log(\"Could not fetch customer for account, using first customer instead\");\n            if (customersData && customersData.length > 0) {\n              setSelectedCustomer(customersData[0]);\n            }\n          }\n\n          // Get transactions (deposits, withdrawals, transfers) for this account\n          await fetchTransactions(accountsData[0]._id);\n        }\n        setInitializingData(false);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error in fetchInitialData:\", err);\n        setError(err.message || 'Failed to fetch data');\n        setInitializingData(false);\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n\n  // Function to create test data if none exists\n  const createTestData = async () => {\n    try {\n      console.log(\"Creating test data...\");\n\n      // Create a test customer\n      const customerData = {\n        first_name: \"John\",\n        last_name: \"Doe\",\n        address: {\n          street_number: \"123\",\n          street_name: \"Main St\",\n          city: \"Washington\",\n          state: \"DC\",\n          zip: \"20001\"\n        }\n      };\n      const customerResponse = await capitalOneService.createCustomer(customerData);\n      console.log(\"Created customer:\", customerResponse);\n\n      // Get the customer ID from the response\n      let customerId;\n      if (customerResponse && customerResponse.objectCreated) {\n        customerId = customerResponse.objectCreated._id;\n      } else if (customerResponse && customerResponse._id) {\n        customerId = customerResponse._id;\n      } else {\n        // Try to get first customer if we couldn't create one\n        const customers = await capitalOneService.getCustomers();\n        if (customers && customers.length > 0) {\n          customerId = customers[0]._id;\n        } else {\n          throw new Error(\"Failed to create or find a customer\");\n        }\n      }\n\n      // Create a checking account\n      const checkingAccountData = {\n        type: \"Checking\",\n        nickname: \"Primary Checking\",\n        rewards: 10,\n        balance: 5000,\n        account_number: \"123456789\"\n      };\n      const savingsAccountData = {\n        type: \"Savings\",\n        nickname: \"Emergency Fund\",\n        rewards: 25,\n        balance: 10000,\n        account_number: \"987654321\"\n      };\n      const creditAccountData = {\n        type: \"Credit Card\",\n        nickname: \"Rewards Card\",\n        rewards: 100,\n        balance: 1500,\n        account_number: \"555555555\"\n      };\n\n      // Create accounts\n      const checkingResponse = await capitalOneService.createAccount(customerId, checkingAccountData);\n      const savingsResponse = await capitalOneService.createAccount(customerId, savingsAccountData);\n      const creditResponse = await capitalOneService.createAccount(customerId, creditAccountData);\n      console.log(\"Created accounts:\", checkingResponse, savingsResponse, creditResponse);\n\n      // Get created accounts\n      const accounts = await capitalOneService.getCustomerAccounts(customerId);\n      const customers = await capitalOneService.getCustomers();\n\n      // Create some sample transactions if accounts were created\n      if (accounts && accounts.length > 0) {\n        // Create deposit\n        await capitalOneService.createDeposit(accounts[0]._id, {\n          medium: \"balance\",\n          transaction_date: new Date().toISOString().split('T')[0],\n          status: \"completed\",\n          amount: 1000,\n          description: \"Salary deposit\"\n        });\n\n        // Create withdrawal\n        await capitalOneService.createWithdrawal(accounts[0]._id, {\n          medium: \"balance\",\n          transaction_date: new Date().toISOString().split('T')[0],\n          status: \"completed\",\n          amount: 250,\n          description: \"ATM withdrawal\"\n        });\n\n        // Create transfer between accounts if we have multiple\n        if (accounts.length > 1) {\n          await capitalOneService.createTransfer(accounts[0]._id, {\n            medium: \"balance\",\n            payee_id: accounts[1]._id,\n            transaction_date: new Date().toISOString().split('T')[0],\n            status: \"completed\",\n            amount: 500,\n            description: \"Transfer to savings\"\n          });\n        }\n      }\n      return {\n        accounts,\n        customers\n      };\n    } catch (err) {\n      console.error(\"Error creating test data:\", err);\n      return null;\n    }\n  };\n  const fetchTransactions = async accountId => {\n    try {\n      // Fetch deposits, withdrawals, and transfers for the account\n      let deposits = [];\n      let withdrawals = [];\n      let transfers = [];\n      try {\n        deposits = await capitalOneService.getAccountDeposits(accountId);\n      } catch (e) {\n        console.log(\"Error fetching deposits:\", e);\n      }\n      try {\n        withdrawals = await capitalOneService.getAccountWithdrawals(accountId);\n      } catch (e) {\n        console.log(\"Error fetching withdrawals:\", e);\n      }\n      try {\n        transfers = await capitalOneService.getAccountTransfers(accountId);\n      } catch (e) {\n        console.log(\"Error fetching transfers:\", e);\n      }\n\n      // Combine and format transactions\n      const allTransactions = [...(Array.isArray(deposits) ? deposits.map(d => ({\n        ...d,\n        type: 'deposit'\n      })) : []), ...(Array.isArray(withdrawals) ? withdrawals.map(w => ({\n        ...w,\n        type: 'withdrawal'\n      })) : []), ...(Array.isArray(transfers) ? transfers.map(t => ({\n        ...t,\n        type: 'transfer'\n      })) : [])];\n\n      // Sort by date (newest first)\n      allTransactions.sort((a, b) => {\n        const dateA = new Date(a.transaction_date || a.payment_date || 0);\n        const dateB = new Date(b.transaction_date || b.payment_date || 0);\n        return dateB - dateA;\n      });\n      setTransactions(allTransactions);\n    } catch (err) {\n      console.error(\"Error in fetchTransactions:\", err);\n      setError(err.message || 'Failed to fetch transactions');\n    }\n  };\n  const handleAccountSelect = async account => {\n    setSelectedAccount(account);\n    try {\n      // Get customer for this account\n      try {\n        const customerData = await capitalOneService.getCustomerByAccount(account._id);\n        setSelectedCustomer(customerData);\n      } catch (err) {\n        console.log(\"Could not fetch customer for account:\", err);\n        // If we can't get the customer by account, just use the first customer\n        if (customers && customers.length > 0) {\n          setSelectedCustomer(customers[0]);\n        }\n      }\n\n      // Get transactions for this account\n      await fetchTransactions(account._id);\n    } catch (err) {\n      console.error(\"Error in handleAccountSelect:\", err);\n      setError(err.message || 'Failed to fetch account details');\n    }\n  };\n  const handleCreateDeposit = async depositData => {\n    try {\n      await capitalOneService.createDeposit(selectedAccount._id, depositData);\n\n      // Refresh account data and transactions\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\n      setSelectedAccount(updatedAccount);\n      await fetchTransactions(selectedAccount._id);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Error creating deposit:\", err);\n      setError(err.message || 'Failed to create deposit');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const handleCreateWithdrawal = async withdrawalData => {\n    try {\n      await capitalOneService.createWithdrawal(selectedAccount._id, withdrawalData);\n\n      // Refresh account data and transactions\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\n      setSelectedAccount(updatedAccount);\n      await fetchTransactions(selectedAccount._id);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Error creating withdrawal:\", err);\n      setError(err.message || 'Failed to create withdrawal');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const handleCreateTransfer = async transferData => {\n    try {\n      await capitalOneService.createTransfer(selectedAccount._id, transferData);\n\n      // Refresh account data and transactions\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\n      setSelectedAccount(updatedAccount);\n      await fetchTransactions(selectedAccount._id);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Error creating transfer:\", err);\n      setError(err.message || 'Failed to create transfer');\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // Show loading state\n  if (loading || initializingData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-dashboard loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"section-title\",\n        children: \"Finance Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: initializingData ? 'Creating sample data...' : 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-dashboard error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"section-title\",\n        children: \"Finance Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.reload(),\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"finance-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"section-title\",\n      children: \"Capital One Banking Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'accounts' ? 'active' : ''}`,\n        onClick: () => setActiveView('accounts'),\n        children: \"Accounts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'customer' ? 'active' : ''}`,\n        onClick: () => setActiveView('customer'),\n        children: \"Customer Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'transactions' ? 'active' : ''}`,\n        onClick: () => setActiveView('transactions'),\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'actions' ? 'active' : ''}`,\n        onClick: () => setActiveView('actions'),\n        children: \"Account Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `finance-tab ${activeView === 'branches' ? 'active' : ''}`,\n        onClick: () => setActiveView('branches'),\n        children: \"Branch Locator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), selectedAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-account-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Selected Account: \", selectedAccount.nickname || selectedAccount._id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-balance\",\n        children: [\"Balance: $\", selectedAccount.balance ? selectedAccount.balance.toFixed(2) : '0.00']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-type\",\n        children: [\"Type: \", selectedAccount.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-content\",\n      children: [activeView === 'accounts' && /*#__PURE__*/_jsxDEV(AccountList, {\n        accounts: accounts,\n        selectedAccount: selectedAccount,\n        onSelectAccount: handleAccountSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), activeView === 'customer' && selectedCustomer && /*#__PURE__*/_jsxDEV(CustomerInfo, {\n        customer: selectedCustomer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this), activeView === 'transactions' && /*#__PURE__*/_jsxDEV(TransactionHistory, {\n        transactions: transactions,\n        accountId: selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this), activeView === 'actions' && /*#__PURE__*/_jsxDEV(AccountActions, {\n        account: selectedAccount,\n        onCreateDeposit: handleCreateDeposit,\n        onCreateWithdrawal: handleCreateWithdrawal,\n        onCreateTransfer: handleCreateTransfer,\n        accounts: accounts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this), activeView === 'branches' && /*#__PURE__*/_jsxDEV(BranchLocator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n_s(Finance, \"k5OokLhAngaKK+Kf/Eb+EuWcuPE=\");\n_c = Finance;\nexport default Finance;\nvar _c;\n$RefreshReg$(_c, \"Finance\");","map":{"version":3,"names":["React","useState","useEffect","capitalOneService","AccountList","CustomerInfo","TransactionHistory","AccountActions","BranchLocator","jsxDEV","_jsxDEV","Finance","_s","loading","setLoading","error","setError","accounts","setAccounts","customers","setCustomers","selectedAccount","setSelectedAccount","selectedCustomer","setSelectedCustomer","transactions","setTransactions","activeView","setActiveView","initializingData","setInitializingData","fetchInitialData","accountsData","getAccounts","customersData","getCustomers","length","testData","createTestData","customerData","getCustomerByAccount","_id","err","console","log","fetchTransactions","message","first_name","last_name","address","street_number","street_name","city","state","zip","customerResponse","createCustomer","customerId","objectCreated","Error","checkingAccountData","type","nickname","rewards","balance","account_number","savingsAccountData","creditAccountData","checkingResponse","createAccount","savingsResponse","creditResponse","getCustomerAccounts","createDeposit","medium","transaction_date","Date","toISOString","split","status","amount","description","createWithdrawal","createTransfer","payee_id","accountId","deposits","withdrawals","transfers","getAccountDeposits","e","getAccountWithdrawals","getAccountTransfers","allTransactions","Array","isArray","map","d","w","t","sort","a","b","dateA","payment_date","dateB","handleAccountSelect","account","handleCreateDeposit","depositData","updatedAccount","getAccountById","success","handleCreateWithdrawal","withdrawalData","handleCreateTransfer","transferData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","toFixed","onSelectAccount","customer","onCreateDeposit","onCreateWithdrawal","onCreateTransfer","_c","$RefreshReg$"],"sources":["C:/Users/kheri/Downloads/Bitcamp/bitcamp-2025/Bitcamp25/test-voice/src/components/Finance.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport capitalOneService from '../services/capitalOneService';\r\nimport AccountList from './finance/AccountList';\r\nimport CustomerInfo from './finance/CustomerInfo';\r\nimport TransactionHistory from './finance/TransactionHistory';\r\nimport AccountActions from './finance/AccountActions';\r\nimport BranchLocator from './finance/BranchLocator';\r\n\r\nconst Finance = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [selectedAccount, setSelectedAccount] = useState(null);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [activeView, setActiveView] = useState('accounts'); // accounts, customer, transactions, actions, branches\r\n  const [initializingData, setInitializingData] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch accounts and customers\r\n        let accountsData = await capitalOneService.getAccounts();\r\n        let customersData = await capitalOneService.getCustomers();\r\n        \r\n        // Check if we need to create test data\r\n        if ((!accountsData || accountsData.length === 0) || (!customersData || customersData.length === 0)) {\r\n          // Show initializing status\r\n          setInitializingData(true);\r\n          \r\n          // Create test data if no data exists\r\n          const testData = await createTestData();\r\n          if (testData) {\r\n            accountsData = testData.accounts;\r\n            customersData = testData.customers;\r\n          }\r\n        }\r\n        \r\n        setAccounts(accountsData || []);\r\n        setCustomers(customersData || []);\r\n        \r\n        // Select the first account by default\r\n        if (accountsData && accountsData.length > 0) {\r\n          setSelectedAccount(accountsData[0]);\r\n          \r\n          try {\r\n            // Get the customer associated with this account\r\n            const customerData = await capitalOneService.getCustomerByAccount(accountsData[0]._id);\r\n            setSelectedCustomer(customerData);\r\n          } catch (err) {\r\n            console.log(\"Could not fetch customer for account, using first customer instead\");\r\n            if (customersData && customersData.length > 0) {\r\n              setSelectedCustomer(customersData[0]);\r\n            }\r\n          }\r\n          \r\n          // Get transactions (deposits, withdrawals, transfers) for this account\r\n          await fetchTransactions(accountsData[0]._id);\r\n        }\r\n        \r\n        setInitializingData(false);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error in fetchInitialData:\", err);\r\n        setError(err.message || 'Failed to fetch data');\r\n        setInitializingData(false);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchInitialData();\r\n  }, []);\r\n  \r\n  // Function to create test data if none exists\r\n  const createTestData = async () => {\r\n    try {\r\n      console.log(\"Creating test data...\");\r\n      \r\n      // Create a test customer\r\n      const customerData = {\r\n        first_name: \"John\",\r\n        last_name: \"Doe\",\r\n        address: {\r\n          street_number: \"123\",\r\n          street_name: \"Main St\",\r\n          city: \"Washington\",\r\n          state: \"DC\",\r\n          zip: \"20001\"\r\n        }\r\n      };\r\n      \r\n      const customerResponse = await capitalOneService.createCustomer(customerData);\r\n      console.log(\"Created customer:\", customerResponse);\r\n      \r\n      // Get the customer ID from the response\r\n      let customerId;\r\n      if (customerResponse && customerResponse.objectCreated) {\r\n        customerId = customerResponse.objectCreated._id;\r\n      } else if (customerResponse && customerResponse._id) {\r\n        customerId = customerResponse._id;\r\n      } else {\r\n        // Try to get first customer if we couldn't create one\r\n        const customers = await capitalOneService.getCustomers();\r\n        if (customers && customers.length > 0) {\r\n          customerId = customers[0]._id;\r\n        } else {\r\n          throw new Error(\"Failed to create or find a customer\");\r\n        }\r\n      }\r\n      \r\n      // Create a checking account\r\n      const checkingAccountData = {\r\n        type: \"Checking\",\r\n        nickname: \"Primary Checking\",\r\n        rewards: 10,\r\n        balance: 5000,\r\n        account_number: \"123456789\"\r\n      };\r\n      \r\n      const savingsAccountData = {\r\n        type: \"Savings\",\r\n        nickname: \"Emergency Fund\",\r\n        rewards: 25,\r\n        balance: 10000,\r\n        account_number: \"987654321\"\r\n      };\r\n      \r\n      const creditAccountData = {\r\n        type: \"Credit Card\",\r\n        nickname: \"Rewards Card\",\r\n        rewards: 100,\r\n        balance: 1500,\r\n        account_number: \"555555555\"\r\n      };\r\n      \r\n      // Create accounts\r\n      const checkingResponse = await capitalOneService.createAccount(customerId, checkingAccountData);\r\n      const savingsResponse = await capitalOneService.createAccount(customerId, savingsAccountData);\r\n      const creditResponse = await capitalOneService.createAccount(customerId, creditAccountData);\r\n      \r\n      console.log(\"Created accounts:\", checkingResponse, savingsResponse, creditResponse);\r\n      \r\n      // Get created accounts\r\n      const accounts = await capitalOneService.getCustomerAccounts(customerId);\r\n      const customers = await capitalOneService.getCustomers();\r\n      \r\n      // Create some sample transactions if accounts were created\r\n      if (accounts && accounts.length > 0) {\r\n        // Create deposit\r\n        await capitalOneService.createDeposit(accounts[0]._id, {\r\n          medium: \"balance\",\r\n          transaction_date: new Date().toISOString().split('T')[0],\r\n          status: \"completed\",\r\n          amount: 1000,\r\n          description: \"Salary deposit\"\r\n        });\r\n        \r\n        // Create withdrawal\r\n        await capitalOneService.createWithdrawal(accounts[0]._id, {\r\n          medium: \"balance\",\r\n          transaction_date: new Date().toISOString().split('T')[0],\r\n          status: \"completed\",\r\n          amount: 250,\r\n          description: \"ATM withdrawal\"\r\n        });\r\n        \r\n        // Create transfer between accounts if we have multiple\r\n        if (accounts.length > 1) {\r\n          await capitalOneService.createTransfer(accounts[0]._id, {\r\n            medium: \"balance\",\r\n            payee_id: accounts[1]._id,\r\n            transaction_date: new Date().toISOString().split('T')[0],\r\n            status: \"completed\",\r\n            amount: 500,\r\n            description: \"Transfer to savings\"\r\n          });\r\n        }\r\n      }\r\n      \r\n      return {\r\n        accounts,\r\n        customers\r\n      };\r\n    } catch (err) {\r\n      console.error(\"Error creating test data:\", err);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const fetchTransactions = async (accountId) => {\r\n    try {\r\n      // Fetch deposits, withdrawals, and transfers for the account\r\n      let deposits = [];\r\n      let withdrawals = [];\r\n      let transfers = [];\r\n      \r\n      try {\r\n        deposits = await capitalOneService.getAccountDeposits(accountId);\r\n      } catch (e) {\r\n        console.log(\"Error fetching deposits:\", e);\r\n      }\r\n      \r\n      try {\r\n        withdrawals = await capitalOneService.getAccountWithdrawals(accountId);\r\n      } catch (e) {\r\n        console.log(\"Error fetching withdrawals:\", e);\r\n      }\r\n      \r\n      try {\r\n        transfers = await capitalOneService.getAccountTransfers(accountId);\r\n      } catch (e) {\r\n        console.log(\"Error fetching transfers:\", e);\r\n      }\r\n      \r\n      // Combine and format transactions\r\n      const allTransactions = [\r\n        ...(Array.isArray(deposits) ? deposits.map(d => ({ ...d, type: 'deposit' })) : []),\r\n        ...(Array.isArray(withdrawals) ? withdrawals.map(w => ({ ...w, type: 'withdrawal' })) : []),\r\n        ...(Array.isArray(transfers) ? transfers.map(t => ({ ...t, type: 'transfer' })) : [])\r\n      ];\r\n      \r\n      // Sort by date (newest first)\r\n      allTransactions.sort((a, b) => {\r\n        const dateA = new Date(a.transaction_date || a.payment_date || 0);\r\n        const dateB = new Date(b.transaction_date || b.payment_date || 0);\r\n        return dateB - dateA;\r\n      });\r\n      \r\n      setTransactions(allTransactions);\r\n    } catch (err) {\r\n      console.error(\"Error in fetchTransactions:\", err);\r\n      setError(err.message || 'Failed to fetch transactions');\r\n    }\r\n  };\r\n  \r\n  const handleAccountSelect = async (account) => {\r\n    setSelectedAccount(account);\r\n    \r\n    try {\r\n      // Get customer for this account\r\n      try {\r\n        const customerData = await capitalOneService.getCustomerByAccount(account._id);\r\n        setSelectedCustomer(customerData);\r\n      } catch (err) {\r\n        console.log(\"Could not fetch customer for account:\", err);\r\n        // If we can't get the customer by account, just use the first customer\r\n        if (customers && customers.length > 0) {\r\n          setSelectedCustomer(customers[0]);\r\n        }\r\n      }\r\n      \r\n      // Get transactions for this account\r\n      await fetchTransactions(account._id);\r\n    } catch (err) {\r\n      console.error(\"Error in handleAccountSelect:\", err);\r\n      setError(err.message || 'Failed to fetch account details');\r\n    }\r\n  };\r\n  \r\n  const handleCreateDeposit = async (depositData) => {\r\n    try {\r\n      await capitalOneService.createDeposit(selectedAccount._id, depositData);\r\n      \r\n      // Refresh account data and transactions\r\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\r\n      setSelectedAccount(updatedAccount);\r\n      \r\n      await fetchTransactions(selectedAccount._id);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Error creating deposit:\", err);\r\n      setError(err.message || 'Failed to create deposit');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n  \r\n  const handleCreateWithdrawal = async (withdrawalData) => {\r\n    try {\r\n      await capitalOneService.createWithdrawal(selectedAccount._id, withdrawalData);\r\n      \r\n      // Refresh account data and transactions\r\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\r\n      setSelectedAccount(updatedAccount);\r\n      \r\n      await fetchTransactions(selectedAccount._id);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Error creating withdrawal:\", err);\r\n      setError(err.message || 'Failed to create withdrawal');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n  \r\n  const handleCreateTransfer = async (transferData) => {\r\n    try {\r\n      await capitalOneService.createTransfer(selectedAccount._id, transferData);\r\n      \r\n      // Refresh account data and transactions\r\n      const updatedAccount = await capitalOneService.getAccountById(selectedAccount._id);\r\n      setSelectedAccount(updatedAccount);\r\n      \r\n      await fetchTransactions(selectedAccount._id);\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Error creating transfer:\", err);\r\n      setError(err.message || 'Failed to create transfer');\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n  \r\n  // Show loading state\r\n  if (loading || initializingData) {\r\n    return (\r\n      <div className=\"finance-dashboard loading\">\r\n        <h3 className=\"section-title\">Finance Dashboard</h3>\r\n        <div className=\"loading-spinner\">\r\n          {initializingData ? 'Creating sample data...' : 'Loading...'}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"finance-dashboard error\">\r\n        <h3 className=\"section-title\">Finance Dashboard</h3>\r\n        <div className=\"error-message\">\r\n          <p>Error: {error}</p>\r\n          <button onClick={() => window.location.reload()}>Retry</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"finance-dashboard\">\r\n      <h3 className=\"section-title\">Capital One Banking Dashboard</h3>\r\n      \r\n      {/* Navigation Tabs */}\r\n      <div className=\"finance-tabs\">\r\n        <button \r\n          className={`finance-tab ${activeView === 'accounts' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('accounts')}\r\n        >\r\n          Accounts\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'customer' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('customer')}\r\n        >\r\n          Customer Info\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'transactions' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('transactions')}\r\n        >\r\n          Transactions\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'actions' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('actions')}\r\n        >\r\n          Account Actions\r\n        </button>\r\n        <button \r\n          className={`finance-tab ${activeView === 'branches' ? 'active' : ''}`}\r\n          onClick={() => setActiveView('branches')}\r\n        >\r\n          Branch Locator\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Current Account Summary */}\r\n      {selectedAccount && (\r\n        <div className=\"current-account-summary\">\r\n          <h4>Selected Account: {selectedAccount.nickname || selectedAccount._id}</h4>\r\n          <div className=\"account-balance\">\r\n            Balance: ${selectedAccount.balance ? selectedAccount.balance.toFixed(2) : '0.00'}\r\n          </div>\r\n          <div className=\"account-type\">\r\n            Type: {selectedAccount.type}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Content based on active view */}\r\n      <div className=\"finance-content\">\r\n        {activeView === 'accounts' && (\r\n          <AccountList \r\n            accounts={accounts} \r\n            selectedAccount={selectedAccount}\r\n            onSelectAccount={handleAccountSelect}\r\n          />\r\n        )}\r\n        \r\n        {activeView === 'customer' && selectedCustomer && (\r\n          <CustomerInfo customer={selectedCustomer} />\r\n        )}\r\n        \r\n        {activeView === 'transactions' && (\r\n          <TransactionHistory \r\n            transactions={transactions}\r\n            accountId={selectedAccount?._id}\r\n          />\r\n        )}\r\n        \r\n        {activeView === 'actions' && (\r\n          <AccountActions \r\n            account={selectedAccount}\r\n            onCreateDeposit={handleCreateDeposit}\r\n            onCreateWithdrawal={handleCreateWithdrawal}\r\n            onCreateTransfer={handleCreateTransfer}\r\n            accounts={accounts}\r\n          />\r\n        )}\r\n        \r\n        {activeView === 'branches' && (\r\n          <BranchLocator />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Finance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}