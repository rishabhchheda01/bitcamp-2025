{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { softmax } from './Softmax';\nlet wasmMultinomial;\nfunction setup(backend) {\n  wasmMultinomial = backend.wasm.cwrap(Multinomial, null, ['number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  if (logits.dtype !== 'float32') {\n    throw new Error(`Tensor logits must have dtype float32, got ${logits.dtype}`);\n  }\n  const probabilities = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const [batchSize, numEvents] = probabilities.shape;\n  const out = backend.makeOutput([batchSize, numSamples], 'int32');\n  wasmMultinomial(backend.dataIdMap.get(probabilities.dataId).id, batchSize, numEvents, numSamples, seed, backend.dataIdMap.get(out.dataId).id);\n  if (!normalized) {\n    backend.disposeData(probabilities.dataId);\n  }\n  return out;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: multinomial\n};","map":{"version":3,"names":["Multinomial","softmax","wasmMultinomial","setup","backend","wasm","cwrap","multinomial","args","inputs","attrs","logits","numSamples","seed","normalized","dtype","Error","probabilities","dim","shape","length","batchSize","numEvents","out","makeOutput","dataIdMap","get","dataId","id","disposeData","multinomialConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\Multinomial.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {softmax} from './Softmax';\n\nlet wasmMultinomial: (\n    probabilitiesId: number, batchSize: number, numEvents: number,\n    numSamples: number, seed: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmMultinomial = backend.wasm.cwrap(Multinomial, null, [\n    'number',  // probabilitiesId\n    'number',  // batchSize\n    'number',  // numEvents\n    'number',  // numSamples\n    'number',  // seed\n    'number',  // outId\n  ]);\n}\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  attrs: MultinomialAttrs,\n  backend: BackendWasm,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  if (logits.dtype !== 'float32') {\n    throw new Error(\n        `Tensor logits must have dtype float32, got ${logits.dtype}`);\n  }\n\n  const probabilities = normalized ? logits : softmax({\n    inputs: {logits},\n    backend,\n    attrs: {dim: logits.shape.length - 1},\n  });\n\n  const [batchSize, numEvents] = probabilities.shape;\n  const out = backend.makeOutput([batchSize, numSamples], 'int32');\n\n  wasmMultinomial(\n      backend.dataIdMap.get(probabilities.dataId).id,\n      batchSize,\n      numEvents,\n      numSamples,\n      seed,\n      backend.dataIdMap.get(out.dataId).id,\n  );\n  if (!normalized) {\n    backend.disposeData(probabilities.dataId);\n  }\n  return out;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAW,QAAwD,uBAAuB;AAG5H,SAAQC,OAAO,QAAO,WAAW;AAEjC,IAAIC,eAEwD;AAE5D,SAASC,KAAKA,CAACC,OAAoB;EACjCF,eAAe,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACN,WAAW,EAAE,IAAI,EAAE,CACtD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUO,WAAWA,CAACC,IAI3B;EACC,MAAM;IAACC,MAAM;IAAEL,OAAO;IAAEM;EAAK,CAAC,GAAGF,IAAI;EACrC,MAAM;IAACG;EAAM,CAAC,GAAGF,MAAM;EACvB,MAAM;IAACG,UAAU;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EAE5C,IAAIC,MAAM,CAACI,KAAK,KAAK,SAAS,EAAE;IAC9B,MAAM,IAAIC,KAAK,CACX,8CAA8CL,MAAM,CAACI,KAAK,EAAE,CAAC;;EAGnE,MAAME,aAAa,GAAGH,UAAU,GAAGH,MAAM,GAAGV,OAAO,CAAC;IAClDQ,MAAM,EAAE;MAACE;IAAM,CAAC;IAChBP,OAAO;IACPM,KAAK,EAAE;MAACQ,GAAG,EAAEP,MAAM,CAACQ,KAAK,CAACC,MAAM,GAAG;IAAC;GACrC,CAAC;EAEF,MAAM,CAACC,SAAS,EAAEC,SAAS,CAAC,GAAGL,aAAa,CAACE,KAAK;EAClD,MAAMI,GAAG,GAAGnB,OAAO,CAACoB,UAAU,CAAC,CAACH,SAAS,EAAET,UAAU,CAAC,EAAE,OAAO,CAAC;EAEhEV,eAAe,CACXE,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACT,aAAa,CAACU,MAAM,CAAC,CAACC,EAAE,EAC9CP,SAAS,EACTC,SAAS,EACTV,UAAU,EACVC,IAAI,EACJT,OAAO,CAACqB,SAAS,CAACC,GAAG,CAACH,GAAG,CAACI,MAAM,CAAC,CAACC,EAAE,CACvC;EACD,IAAI,CAACd,UAAU,EAAE;IACfV,OAAO,CAACyB,WAAW,CAACZ,aAAa,CAACU,MAAM,CAAC;;EAE3C,OAAOJ,GAAG;AACZ;AAEA,OAAO,MAAMO,iBAAiB,GAAiB;EAC7CC,UAAU,EAAE/B,WAAW;EACvBgC,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAE9B,KAAK;EAChB+B,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}