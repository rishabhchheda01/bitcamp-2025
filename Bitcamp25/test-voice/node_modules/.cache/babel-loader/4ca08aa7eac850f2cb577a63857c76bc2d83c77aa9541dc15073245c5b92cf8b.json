{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nexport function createBinaryKernelConfig(kernelName, supportsFullBroadcast, dtype) {\n  let wasmFunc;\n  function setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, ['number', 'array', 'number', 'number', 'array', 'number', 'number', 'number' // out_id\n    ]);\n  }\n  function kernelFunc(args) {\n    const {\n      backend,\n      inputs\n    } = args;\n    const {\n      a,\n      b\n    } = inputs;\n    const aId = backend.dataIdMap.get(a.dataId).id;\n    const bId = backend.dataIdMap.get(b.dataId).id;\n    const outputType = dtype != null ? dtype : a.dtype;\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const out = backend.makeOutput(newShape, outputType);\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(newShape) === 0) {\n      return out;\n    }\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const kernelFunc = () => wasmFunc(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, CppDType[a.dtype], outId);\n    kernelFunc();\n    return out;\n  }\n  return {\n    kernelName,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc\n  };\n}","map":{"version":3,"names":["backend_util","util","CppDType","createBinaryKernelConfig","kernelName","supportsFullBroadcast","dtype","wasmFunc","setupFunc","backend","wasm","cwrap","kernelFunc","args","inputs","a","b","aId","dataIdMap","get","dataId","id","bId","outputType","newShape","assertAndGetBroadcastShape","shape","out","makeOutput","sizeFromShape","aShapeBytes","Uint8Array","Int32Array","buffer","bShapeBytes","outId","length","backendName"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\binary_kernel.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelConfig, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nexport function createBinaryKernelConfig(\n    kernelName: string, supportsFullBroadcast: boolean,\n    dtype?: DataType): KernelConfig {\n  let wasmFunc:\n      (aId: number, aShape: Uint8Array, aShapeLen: number, bId: number,\n       bShape: Uint8Array, bShapeLen: number, dtype: number, outId: number) =>\n          void;\n\n  function setupFunc(backend: BackendWasm): void {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, [\n      'number',  // a_id,\n      'array',   // a_shape\n      'number',  // a_shape.length\n      'number',  // b_id\n      'array',   // b_shape\n      'number',  // b_shape.length\n      'number',  // dtype\n      'number'   // out_id\n    ]);\n  }\n\n  function kernelFunc(args: {backend: BackendWasm, inputs: BinaryInputs}):\n      TensorInfo {\n    const {backend, inputs} = args;\n    const {a, b} = inputs;\n    const aId = backend.dataIdMap.get(a.dataId).id;\n    const bId = backend.dataIdMap.get(b.dataId).id;\n\n    const outputType = dtype != null ? dtype : a.dtype;\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const out = backend.makeOutput(newShape, outputType);\n\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(newShape) === 0) {\n      return out;\n    }\n\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const kernelFunc = () => wasmFunc(\n        aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length,\n        CppDType[a.dtype], outId);\n\n    kernelFunc();\n    return out;\n  }\n\n  return {kernelName, backendName: 'wasm', setupFunc, kernelFunc};\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAoDC,IAAI,QAAO,uBAAuB;AAI1G,SAAQC,QAAQ,QAAO,SAAS;AAEhC,OAAM,SAAUC,wBAAwBA,CACpCC,UAAkB,EAAEC,qBAA8B,EAClDC,KAAgB;EAClB,IAAIC,QAGQ;EAEZ,SAASC,SAASA,CAACC,OAAoB;IACrCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,UAAU,EAAE,IAAI,CAAC,YAAY,CACzD,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;IAAA,CACZ,CAAC;EACJ;EAEA,SAASQ,UAAUA,CAACC,IAAkD;IAEpE,MAAM;MAACJ,OAAO;MAAEK;IAAM,CAAC,GAAGD,IAAI;IAC9B,MAAM;MAACE,CAAC;MAAEC;IAAC,CAAC,GAAGF,MAAM;IACrB,MAAMG,GAAG,GAAGR,OAAO,CAACS,SAAS,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC,CAACC,EAAE;IAC9C,MAAMC,GAAG,GAAGb,OAAO,CAACS,SAAS,CAACC,GAAG,CAACH,CAAC,CAACI,MAAM,CAAC,CAACC,EAAE;IAE9C,MAAME,UAAU,GAAGjB,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAGS,CAAC,CAACT,KAAK;IAClD,MAAMkB,QAAQ,GAAGxB,YAAY,CAACyB,0BAA0B,CAACV,CAAC,CAACW,KAAK,EAAEV,CAAC,CAACU,KAAK,CAAC;IAC1E,MAAMC,GAAG,GAAGlB,OAAO,CAACmB,UAAU,CAACJ,QAAQ,EAAED,UAAU,CAAC;IAEpD;IACA,IAAItB,IAAI,CAAC4B,aAAa,CAACL,QAAQ,CAAC,KAAK,CAAC,EAAE;MACtC,OAAOG,GAAG;;IAGZ,MAAMG,WAAW,GAAG,IAAIC,UAAU,CAAC,IAAIC,UAAU,CAACjB,CAAC,CAACW,KAAK,CAAC,CAACO,MAAM,CAAC;IAClE,MAAMC,WAAW,GAAG,IAAIH,UAAU,CAAC,IAAIC,UAAU,CAAChB,CAAC,CAACU,KAAK,CAAC,CAACO,MAAM,CAAC;IAClE,MAAME,KAAK,GAAG1B,OAAO,CAACS,SAAS,CAACC,GAAG,CAACQ,GAAG,CAACP,MAAM,CAAC,CAACC,EAAE;IAClD,MAAMT,UAAU,GAAGA,CAAA,KAAML,QAAQ,CAC7BU,GAAG,EAAEa,WAAW,EAAEf,CAAC,CAACW,KAAK,CAACU,MAAM,EAAEd,GAAG,EAAEY,WAAW,EAAElB,CAAC,CAACU,KAAK,CAACU,MAAM,EAClElC,QAAQ,CAACa,CAAC,CAACT,KAAK,CAAC,EAAE6B,KAAK,CAAC;IAE7BvB,UAAU,EAAE;IACZ,OAAOe,GAAG;EACZ;EAEA,OAAO;IAACvB,UAAU;IAAEiC,WAAW,EAAE,MAAM;IAAE7B,SAAS;IAAEI;EAAU,CAAC;AACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}