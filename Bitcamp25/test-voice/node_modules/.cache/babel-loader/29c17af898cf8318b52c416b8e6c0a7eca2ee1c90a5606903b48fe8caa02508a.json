{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(LeakyRelu, null /* void */, ['number', 'number', 'number', 'number' // out_id\n  ]);\n}\nexport function leakyRelu(args) {\n  const {\n    inputs: {\n      x\n    },\n    attrs: {\n      alpha\n    },\n    backend\n  } = args;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  // According to TF API, LeakyRelu returns float32 when input is either float32\n  // or int32.\n  const out = backend.makeOutput(x.shape, 'float32');\n  if (util.sizeFromShape(x.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(xId, CppDType[x.dtype], alpha, outId);\n  }\n  return out;\n}\nexport const leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: leakyRelu\n};","map":{"version":3,"names":["LeakyRelu","util","CppDType","wasmFunc","setupFunc","backend","wasm","cwrap","leakyRelu","args","inputs","x","attrs","alpha","xId","dataIdMap","get","dataId","id","out","makeOutput","shape","sizeFromShape","outId","dtype","leakyReluConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\kheri\\Downloads\\Bitcamp\\bitcamp-2025\\Bitcamp25\\tfjs-backend-wasm\\src\\kernels\\LeakyRelu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmFunc: (\n    xId: number, dtype: number, leakyreluAlpha: number, outId: number) => void;\n\nfunction setupFunc(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(LeakyRelu, null /* void */, [\n    'number',  // x_id\n    'number',  // dtype\n    'number',  // leakyrelu_alpha\n    'number',  // out_id\n  ]);\n}\n\nexport function leakyRelu(\n    args:\n        {inputs: LeakyReluInputs, attrs: LeakyReluAttrs, backend: BackendWasm}):\n    TensorInfo {\n  const {inputs: {x}, attrs: {alpha}, backend} = args;\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  // According to TF API, LeakyRelu returns float32 when input is either float32\n  // or int32.\n  const out = backend.makeOutput(x.shape, 'float32');\n\n  if (util.sizeFromShape(x.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(xId, CppDType[x.dtype], alpha, outId);\n  }\n\n  return out;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: leakyRelu as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,SAAS,EAA+CC,IAAI,QAAO,uBAAuB;AAI5H,SAAQC,QAAQ,QAAO,SAAS;AAEhC,IAAIC,QAC0E;AAE9E,SAASC,SAASA,CAACC,OAAoB;EACrCF,QAAQ,GAAGE,OAAO,CAACC,IAAI,CAACC,KAAK,CAACP,SAAS,EAAE,IAAI,CAAC,YAAY,CACxD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;AAEA,OAAM,SAAUQ,SAASA,CACrBC,IAC0E;EAE5E,MAAM;IAACC,MAAM,EAAE;MAACC;IAAC,CAAC;IAAEC,KAAK,EAAE;MAACC;IAAK,CAAC;IAAER;EAAO,CAAC,GAAGI,IAAI;EAEnD,MAAMK,GAAG,GAAGT,OAAO,CAACU,SAAS,CAACC,GAAG,CAACL,CAAC,CAACM,MAAM,CAAC,CAACC,EAAE;EAC9C;EACA;EACA,MAAMC,GAAG,GAAGd,OAAO,CAACe,UAAU,CAACT,CAAC,CAACU,KAAK,EAAE,SAAS,CAAC;EAElD,IAAIpB,IAAI,CAACqB,aAAa,CAACX,CAAC,CAACU,KAAK,CAAC,KAAK,CAAC,EAAE;IACrC,MAAME,KAAK,GAAGlB,OAAO,CAACU,SAAS,CAACC,GAAG,CAACG,GAAG,CAACF,MAAM,CAAC,CAACC,EAAE;IAClDf,QAAQ,CAACW,GAAG,EAAEZ,QAAQ,CAACS,CAAC,CAACa,KAAK,CAAC,EAAEX,KAAK,EAAEU,KAAK,CAAC;;EAGhD,OAAOJ,GAAG;AACZ;AAEA,OAAO,MAAMM,eAAe,GAAiB;EAC3CC,UAAU,EAAE1B,SAAS;EACrB2B,WAAW,EAAE,MAAM;EACnBvB,SAAS;EACTwB,UAAU,EAAEpB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}